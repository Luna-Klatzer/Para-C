# Generated from ./grammar/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3~")
        buf.write("\u04ee\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\3\2\3\2\3\2\3")
        buf.write("\2\3\2\6\2\u00d0\n\2\r\2\16\2\u00d1\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\5\2\u00db\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00ef\n")
        buf.write("\2\3\3\3\3\5\3\u00f3\n\3\3\3\3\3\3\3\3\4\3\4\5\4\u00fa")
        buf.write("\n\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\7\b\u010c\n\b\f\b\16\b\u010f\13\b\3\t\3")
        buf.write("\t\5\t\u0113\n\t\3\t\3\t\3\t\3\n\3\n\5\n\u011a\n\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\5\n\u0122\n\n\3\n\3\n\5\n\u0126\n")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u012e\n\n\3\n\3\n\3\n\3")
        buf.write("\n\7\n\u0134\n\n\f\n\16\n\u0137\13\n\3\13\3\13\3\13\7")
        buf.write("\13\u013c\n\13\f\13\16\13\u013f\13\13\3\f\7\f\u0142\n")
        buf.write("\f\f\f\16\f\u0145\13\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u0152\n\f\3\r\3\r\3\16\3\16\5\16\u0158")
        buf.write("\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0161\n")
        buf.write("\16\3\16\3\16\3\16\7\16\u0166\n\16\f\16\16\16\u0169\13")
        buf.write("\16\3\17\3\17\3\17\7\17\u016e\n\17\f\17\16\17\u0171\13")
        buf.write("\17\3\20\3\20\3\20\7\20\u0176\n\20\f\20\16\20\u0179\13")
        buf.write("\20\3\21\3\21\3\21\7\21\u017e\n\21\f\21\16\21\u0181\13")
        buf.write("\21\3\22\3\22\3\22\7\22\u0186\n\22\f\22\16\22\u0189\13")
        buf.write("\22\3\23\3\23\3\23\7\23\u018e\n\23\f\23\16\23\u0191\13")
        buf.write("\23\3\24\3\24\3\24\7\24\u0196\n\24\f\24\16\24\u0199\13")
        buf.write("\24\3\25\3\25\3\25\7\25\u019e\n\25\f\25\16\25\u01a1\13")
        buf.write("\25\3\26\3\26\3\26\7\26\u01a6\n\26\f\26\16\26\u01a9\13")
        buf.write("\26\3\27\3\27\3\27\7\27\u01ae\n\27\f\27\16\27\u01b1\13")
        buf.write("\27\3\30\3\30\3\30\7\30\u01b6\n\30\f\30\16\30\u01b9\13")
        buf.write("\30\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01c1\n\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\5\32\u01c9\n\32\3\33\3\33\3")
        buf.write("\34\3\34\3\34\7\34\u01d0\n\34\f\34\16\34\u01d3\13\34\3")
        buf.write("\35\3\35\3\36\3\36\5\36\u01d9\n\36\3\36\3\36\3\36\5\36")
        buf.write("\u01de\n\36\3\37\6\37\u01e1\n\37\r\37\16\37\u01e2\3 \3")
        buf.write(" \3 \3 \3 \3 \5 \u01eb\n \3!\3!\3!\7!\u01f0\n!\f!\16!")
        buf.write("\u01f3\13!\3\"\3\"\3\"\5\"\u01f8\n\"\3#\3#\3$\3$\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\5%\u0213\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\5%\u0222\n%\3%\3%\7%\u0226\n%\f%\16%\u0229\13%\3&\3")
        buf.write("&\5&\u022d\n&\3&\3&\7&\u0231\n&\f&\16&\u0234\13&\3&\3")
        buf.write("&\3&\3&\3&\5&\u023b\n&\3\'\3\'\3(\6(\u0240\n(\r(\16(\u0241")
        buf.write("\3)\3)\5)\u0246\n)\3)\3)\3)\5)\u024b\n)\3*\3*\5*\u024f")
        buf.write("\n*\3*\5*\u0252\n*\3+\3+\3+\7+\u0257\n+\f+\16+\u025a\13")
        buf.write("+\3,\3,\5,\u025e\n,\3,\3,\5,\u0262\n,\3-\3-\5-\u0266\n")
        buf.write("-\3-\3-\3-\5-\u026b\n-\3-\3-\3-\3-\5-\u0271\n-\3.\3.\3")
        buf.write(".\7.\u0276\n.\f.\16.\u0279\13.\3/\3/\3/\5/\u027e\n/\3")
        buf.write("\60\3\60\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u0290\n\63\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u0296\n\64\3\64\3\64\3\65\5\65\u029b\n\65")
        buf.write("\3\65\3\65\7\65\u029f\n\65\f\65\16\65\u02a2\13\65\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66")
        buf.write("\u02af\n\66\3\66\3\66\3\66\3\66\5\66\u02b5\n\66\3\66\3")
        buf.write("\66\3\66\5\66\u02ba\n\66\3\66\5\66\u02bd\n\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\5\66\u02c4\n\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u02d3")
        buf.write("\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\5\66\u02df\n\66\3\66\7\66\u02e2\n\66\f\66\16\66\u02e5")
        buf.write("\13\66\3\67\3\67\3\67\6\67\u02ea\n\67\r\67\16\67\u02eb")
        buf.write("\3\67\3\67\5\67\u02f0\n\67\38\38\38\38\38\38\38\39\59")
        buf.write("\u02fa\n9\39\39\59\u02fe\n9\79\u0300\n9\f9\169\u0303\13")
        buf.write("9\3:\3:\3:\5:\u0308\n:\3:\5:\u030b\n:\3;\3;\3;\3;\3;\7")
        buf.write(";\u0312\n;\f;\16;\u0315\13;\3<\3<\5<\u0319\n<\6<\u031b")
        buf.write("\n<\r<\16<\u031c\3=\6=\u0320\n=\r=\16=\u0321\3>\3>\3>")
        buf.write("\5>\u0327\n>\3?\3?\3?\7?\u032c\n?\f?\16?\u032f\13?\3@")
        buf.write("\3@\3@\3@\3@\5@\u0336\n@\5@\u0338\n@\3A\3A\3A\7A\u033d")
        buf.write("\nA\fA\16A\u0340\13A\3B\3B\5B\u0344\nB\3C\3C\5C\u0348")
        buf.write("\nC\3C\3C\7C\u034c\nC\fC\16C\u034f\13C\5C\u0351\nC\3D")
        buf.write("\3D\3D\3D\3D\7D\u0358\nD\fD\16D\u035b\13D\3D\3D\5D\u035f")
        buf.write("\nD\3D\5D\u0362\nD\3D\3D\3D\3D\5D\u0368\nD\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0378\nD\3D\3D\7D\u037c")
        buf.write("\nD\fD\16D\u037f\13D\5D\u0381\nD\3D\3D\3D\5D\u0386\nD")
        buf.write("\3D\5D\u0389\nD\3D\3D\3D\3D\3D\5D\u0390\nD\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u03a3\nD\3")
        buf.write("D\3D\7D\u03a7\nD\fD\16D\u03aa\13D\7D\u03ac\nD\fD\16D\u03af")
        buf.write("\13D\3E\3E\3F\3F\3F\5F\u03b6\nF\3F\5F\u03b9\nF\3F\5F\u03bc")
        buf.write("\nF\3G\5G\u03bf\nG\3G\3G\3G\5G\u03c4\nG\3G\7G\u03c7\n")
        buf.write("G\fG\16G\u03ca\13G\3H\3H\3H\3I\6I\u03d0\nI\rI\16I\u03d1")
        buf.write("\3J\3J\3J\3J\3J\3J\5J\u03da\nJ\3K\3K\3K\3K\3K\6K\u03e1")
        buf.write("\nK\rK\16K\u03e2\3K\3K\3K\3L\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\7L\u03f5\nL\fL\16L\u03f8\13L\5L\u03fa\nL\3")
        buf.write("L\3L\3L\3L\7L\u0400\nL\fL\16L\u0403\13L\5L\u0405\nL\7")
        buf.write("L\u0407\nL\fL\16L\u040a\13L\3L\3L\5L\u040e\nL\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u041b\nM\3N\3N\5N\u041f\n")
        buf.write("N\3N\3N\3O\6O\u0424\nO\rO\16O\u0425\3P\3P\5P\u042a\nP")
        buf.write("\3Q\5Q\u042d\nQ\3Q\3Q\3R\3R\3R\6R\u0434\nR\rR\16R\u0435")
        buf.write("\3R\3R\5R\u043a\nR\3R\3R\5R\u043e\nR\5R\u0440\nR\3S\3")
        buf.write("S\3S\3S\5S\u0446\nS\3S\3S\3S\5S\u044b\nS\3S\3S\3T\3T\3")
        buf.write("T\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\5V\u045c\nV\3V\3V\3V\3")
        buf.write("V\3V\3V\5V\u0464\nV\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u047a\nW\3X\3X\5X\u047e\n")
        buf.write("X\5X\u0480\nX\3X\3X\5X\u0484\nX\3X\3X\5X\u0488\nX\3Y\3")
        buf.write("Y\5Y\u048c\nY\3Z\3Z\3Z\7Z\u0491\nZ\fZ\16Z\u0494\13Z\3")
        buf.write("[\3[\3[\3[\3[\5[\u049b\n[\3[\3[\5[\u049f\n[\3[\3[\3\\")
        buf.write("\5\\\u04a4\n\\\3\\\3\\\3]\3]\6]\u04aa\n]\r]\16]\u04ab")
        buf.write("\3^\3^\3^\5^\u04b1\n^\3_\3_\3_\5_\u04b6\n_\3_\3_\3_\3")
        buf.write("_\3_\5_\u04bd\n_\3_\3_\3_\5_\u04c2\n_\3`\7`\u04c5\n`\f")
        buf.write("`\16`\u04c8\13`\3`\5`\u04cb\n`\3a\3a\3a\3b\3b\3b\3b\5")
        buf.write("b\u04d4\nb\3b\3b\3c\3c\3c\3c\7c\u04dc\nc\fc\16c\u04df")
        buf.write("\13c\5c\u04e1\nc\3c\3c\3d\3d\3d\3d\3e\6e\u04ea\ne\re\16")
        buf.write("e\u04eb\3e\2\6\32Hj\u0086f\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\2\31\3\2tu\4\2TTVV\5\2\60\60")
        buf.write("TTVV\4\2\60\60>>\7\2SSUUWWZZ_`\3\2WY\4\2SSUU\3\2QR\3\2")
        buf.write("MP\3\2rs\3\2gq\b\2\25\25\"\"++\62\62\67\67FF\3\2\6\b\4")
        buf.write("\2\t\t\66\66\4\2\64\6488\6\2\31\31,,;;??\5\2\n\13\'\'")
        buf.write("DD\4\2GHff\3\2GH\4\2WW^^\4\2\r\r\17\17\4\2\20\20;;\4\2")
        buf.write("\26\26\32\32\2\u0564\2\u00ee\3\2\2\2\4\u00f0\3\2\2\2\6")
        buf.write("\u00f9\3\2\2\2\b\u00fb\3\2\2\2\n\u00fe\3\2\2\2\f\u0101")
        buf.write("\3\2\2\2\16\u0108\3\2\2\2\20\u0112\3\2\2\2\22\u0125\3")
        buf.write("\2\2\2\24\u0138\3\2\2\2\26\u0143\3\2\2\2\30\u0153\3\2")
        buf.write("\2\2\32\u0160\3\2\2\2\34\u016a\3\2\2\2\36\u0172\3\2\2")
        buf.write("\2 \u017a\3\2\2\2\"\u0182\3\2\2\2$\u018a\3\2\2\2&\u0192")
        buf.write("\3\2\2\2(\u019a\3\2\2\2*\u01a2\3\2\2\2,\u01aa\3\2\2\2")
        buf.write(".\u01b2\3\2\2\2\60\u01ba\3\2\2\2\62\u01c8\3\2\2\2\64\u01ca")
        buf.write("\3\2\2\2\66\u01cc\3\2\2\28\u01d4\3\2\2\2:\u01dd\3\2\2")
        buf.write("\2<\u01e0\3\2\2\2>\u01ea\3\2\2\2@\u01ec\3\2\2\2B\u01f4")
        buf.write("\3\2\2\2D\u01f9\3\2\2\2F\u01fb\3\2\2\2H\u0221\3\2\2\2")
        buf.write("J\u023a\3\2\2\2L\u023c\3\2\2\2N\u023f\3\2\2\2P\u024a\3")
        buf.write("\2\2\2R\u024e\3\2\2\2T\u0253\3\2\2\2V\u0261\3\2\2\2X\u0270")
        buf.write("\3\2\2\2Z\u0272\3\2\2\2\\\u027a\3\2\2\2^\u027f\3\2\2\2")
        buf.write("`\u0281\3\2\2\2b\u0286\3\2\2\2d\u028f\3\2\2\2f\u0291\3")
        buf.write("\2\2\2h\u029a\3\2\2\2j\u02b4\3\2\2\2l\u02ef\3\2\2\2n\u02f1")
        buf.write("\3\2\2\2p\u02f9\3\2\2\2r\u0304\3\2\2\2t\u0313\3\2\2\2")
        buf.write("v\u031a\3\2\2\2x\u031f\3\2\2\2z\u0323\3\2\2\2|\u0328\3")
        buf.write("\2\2\2~\u0337\3\2\2\2\u0080\u0339\3\2\2\2\u0082\u0341")
        buf.write("\3\2\2\2\u0084\u0350\3\2\2\2\u0086\u0380\3\2\2\2\u0088")
        buf.write("\u03b0\3\2\2\2\u008a\u03bb\3\2\2\2\u008c\u03be\3\2\2\2")
        buf.write("\u008e\u03cb\3\2\2\2\u0090\u03cf\3\2\2\2\u0092\u03d9\3")
        buf.write("\2\2\2\u0094\u03db\3\2\2\2\u0096\u040d\3\2\2\2\u0098\u041a")
        buf.write("\3\2\2\2\u009a\u041c\3\2\2\2\u009c\u0423\3\2\2\2\u009e")
        buf.write("\u0429\3\2\2\2\u00a0\u042c\3\2\2\2\u00a2\u0430\3\2\2\2")
        buf.write("\u00a4\u0441\3\2\2\2\u00a6\u044e\3\2\2\2\u00a8\u0451\3")
        buf.write("\2\2\2\u00aa\u0463\3\2\2\2\u00ac\u0479\3\2\2\2\u00ae\u047f")
        buf.write("\3\2\2\2\u00b0\u0489\3\2\2\2\u00b2\u048d\3\2\2\2\u00b4")
        buf.write("\u049e\3\2\2\2\u00b6\u04a3\3\2\2\2\u00b8\u04a9\3\2\2\2")
        buf.write("\u00ba\u04b0\3\2\2\2\u00bc\u04c1\3\2\2\2\u00be\u04c6\3")
        buf.write("\2\2\2\u00c0\u04cc\3\2\2\2\u00c2\u04cf\3\2\2\2\u00c4\u04d7")
        buf.write("\3\2\2\2\u00c6\u04e4\3\2\2\2\u00c8\u04e9\3\2\2\2\u00ca")
        buf.write("\u00ef\7w\2\2\u00cb\u00cc\7\61\2\2\u00cc\u00ef\7w\2\2")
        buf.write("\u00cd\u00ef\7x\2\2\u00ce\u00d0\7z\2\2\u00cf\u00ce\3\2")
        buf.write("\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d1\u00d2")
        buf.write("\3\2\2\2\u00d2\u00ef\3\2\2\2\u00d3\u00d4\7G\2\2\u00d4")
        buf.write("\u00d5\5\66\34\2\u00d5\u00d6\7H\2\2\u00d6\u00ef\3\2\2")
        buf.write("\2\u00d7\u00ef\5\f\7\2\u00d8\u00ef\5\4\3\2\u00d9\u00db")
        buf.write("\7\3\2\2\u00da\u00d9\3\2\2\2\u00da\u00db\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00dd\7G\2\2\u00dd\u00de\5\u009a")
        buf.write("N\2\u00de\u00df\7H\2\2\u00df\u00ef\3\2\2\2\u00e0\u00e1")
        buf.write("\7\4\2\2\u00e1\u00e2\7G\2\2\u00e2\u00e3\5\26\f\2\u00e3")
        buf.write("\u00e4\7f\2\2\u00e4\u00e5\5\u0082B\2\u00e5\u00e6\7H\2")
        buf.write("\2\u00e6\u00ef\3\2\2\2\u00e7\u00e8\7\5\2\2\u00e8\u00e9")
        buf.write("\7G\2\2\u00e9\u00ea\5\u0082B\2\u00ea\u00eb\7f\2\2\u00eb")
        buf.write("\u00ec\5\26\f\2\u00ec\u00ed\7H\2\2\u00ed\u00ef\3\2\2\2")
        buf.write("\u00ee\u00ca\3\2\2\2\u00ee\u00cb\3\2\2\2\u00ee\u00cd\3")
        buf.write("\2\2\2\u00ee\u00cf\3\2\2\2\u00ee\u00d3\3\2\2\2\u00ee\u00d7")
        buf.write("\3\2\2\2\u00ee\u00d8\3\2\2\2\u00ee\u00da\3\2\2\2\u00ee")
        buf.write("\u00e0\3\2\2\2\u00ee\u00e7\3\2\2\2\u00ef\3\3\2\2\2\u00f0")
        buf.write("\u00f2\7G\2\2\u00f1\u00f3\5|?\2\u00f2\u00f1\3\2\2\2\u00f2")
        buf.write("\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\7H\2\2")
        buf.write("\u00f5\u00f6\5\6\4\2\u00f6\5\3\2\2\2\u00f7\u00fa\5\b\5")
        buf.write("\2\u00f8\u00fa\5\n\6\2\u00f9\u00f7\3\2\2\2\u00f9\u00f8")
        buf.write("\3\2\2\2\u00fa\7\3\2\2\2\u00fb\u00fc\7b\2\2\u00fc\u00fd")
        buf.write("\5\66\34\2\u00fd\t\3\2\2\2\u00fe\u00ff\7b\2\2\u00ff\u0100")
        buf.write("\5\u009aN\2\u0100\13\3\2\2\2\u0101\u0102\7B\2\2\u0102")
        buf.write("\u0103\7G\2\2\u0103\u0104\5\62\32\2\u0104\u0105\7f\2\2")
        buf.write("\u0105\u0106\5\16\b\2\u0106\u0107\7H\2\2\u0107\r\3\2\2")
        buf.write("\2\u0108\u010d\5\20\t\2\u0109\u010a\7f\2\2\u010a\u010c")
        buf.write("\5\20\t\2\u010b\u0109\3\2\2\2\u010c\u010f\3\2\2\2\u010d")
        buf.write("\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\17\3\2\2\2\u010f")
        buf.write("\u010d\3\2\2\2\u0110\u0113\5\u0082B\2\u0111\u0113\7\33")
        buf.write("\2\2\u0112\u0110\3\2\2\2\u0112\u0111\3\2\2\2\u0113\u0114")
        buf.write("\3\2\2\2\u0114\u0115\7d\2\2\u0115\u0116\5\62\32\2\u0116")
        buf.write("\21\3\2\2\2\u0117\u0126\5\2\2\2\u0118\u011a\7\3\2\2\u0119")
        buf.write("\u0118\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011b\3\2\2\2")
        buf.write("\u011b\u011c\7G\2\2\u011c\u011d\5\u0082B\2\u011d\u011e")
        buf.write("\7H\2\2\u011e\u011f\7K\2\2\u011f\u0121\5\u008cG\2\u0120")
        buf.write("\u0122\7f\2\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2")
        buf.write("\u0122\u0123\3\2\2\2\u0123\u0124\7L\2\2\u0124\u0126\3")
        buf.write("\2\2\2\u0125\u0117\3\2\2\2\u0125\u0119\3\2\2\2\u0126\u0135")
        buf.write("\3\2\2\2\u0127\u0128\7I\2\2\u0128\u0129\5\66\34\2\u0129")
        buf.write("\u012a\7J\2\2\u012a\u0134\3\2\2\2\u012b\u012d\7G\2\2\u012c")
        buf.write("\u012e\5\24\13\2\u012d\u012c\3\2\2\2\u012d\u012e\3\2\2")
        buf.write("\2\u012e\u012f\3\2\2\2\u012f\u0134\7H\2\2\u0130\u0131")
        buf.write("\t\2\2\2\u0131\u0134\7w\2\2\u0132\u0134\t\3\2\2\u0133")
        buf.write("\u0127\3\2\2\2\u0133\u012b\3\2\2\2\u0133\u0130\3\2\2\2")
        buf.write("\u0133\u0132\3\2\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3")
        buf.write("\2\2\2\u0135\u0136\3\2\2\2\u0136\23\3\2\2\2\u0137\u0135")
        buf.write("\3\2\2\2\u0138\u013d\5\62\32\2\u0139\u013a\7f\2\2\u013a")
        buf.write("\u013c\5\62\32\2\u013b\u0139\3\2\2\2\u013c\u013f\3\2\2")
        buf.write("\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\25\3")
        buf.write("\2\2\2\u013f\u013d\3\2\2\2\u0140\u0142\t\4\2\2\u0141\u0140")
        buf.write("\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143")
        buf.write("\u0144\3\2\2\2\u0144\u0151\3\2\2\2\u0145\u0143\3\2\2\2")
        buf.write("\u0146\u0152\5\22\n\2\u0147\u0148\5\30\r\2\u0148\u0149")
        buf.write("\5\32\16\2\u0149\u0152\3\2\2\2\u014a\u014b\t\5\2\2\u014b")
        buf.write("\u014c\7G\2\2\u014c\u014d\5\u0082B\2\u014d\u014e\7H\2")
        buf.write("\2\u014e\u0152\3\2\2\2\u014f\u0150\7\\\2\2\u0150\u0152")
        buf.write("\7w\2\2\u0151\u0146\3\2\2\2\u0151\u0147\3\2\2\2\u0151")
        buf.write("\u014a\3\2\2\2\u0151\u014f\3\2\2\2\u0152\27\3\2\2\2\u0153")
        buf.write("\u0154\t\6\2\2\u0154\31\3\2\2\2\u0155\u0157\b\16\1\2\u0156")
        buf.write("\u0158\7\3\2\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\u015a\7G\2\2\u015a\u015b\5")
        buf.write("\u0082B\2\u015b\u015c\7H\2\2\u015c\u015d\5\32\16\6\u015d")
        buf.write("\u0161\3\2\2\2\u015e\u0161\5\26\f\2\u015f\u0161\7y\2\2")
        buf.write("\u0160\u0155\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u015f\3")
        buf.write("\2\2\2\u0161\u0167\3\2\2\2\u0162\u0163\f\5\2\2\u0163\u0164")
        buf.write("\7\24\2\2\u0164\u0166\5\u0082B\2\u0165\u0162\3\2\2\2\u0166")
        buf.write("\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2")
        buf.write("\u0168\33\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016f\5\32")
        buf.write("\16\2\u016b\u016c\t\7\2\2\u016c\u016e\5\32\16\2\u016d")
        buf.write("\u016b\3\2\2\2\u016e\u0171\3\2\2\2\u016f\u016d\3\2\2\2")
        buf.write("\u016f\u0170\3\2\2\2\u0170\35\3\2\2\2\u0171\u016f\3\2")
        buf.write("\2\2\u0172\u0177\5\34\17\2\u0173\u0174\t\b\2\2\u0174\u0176")
        buf.write("\5\34\17\2\u0175\u0173\3\2\2\2\u0176\u0179\3\2\2\2\u0177")
        buf.write("\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\37\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u017a\u017f\5\36\20\2\u017b\u017c\t\t\2")
        buf.write("\2\u017c\u017e\5\36\20\2\u017d\u017b\3\2\2\2\u017e\u0181")
        buf.write("\3\2\2\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180")
        buf.write("!\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u0187\5 \21\2\u0183")
        buf.write("\u0184\t\n\2\2\u0184\u0186\5 \21\2\u0185\u0183\3\2\2\2")
        buf.write("\u0186\u0189\3\2\2\2\u0187\u0185\3\2\2\2\u0187\u0188\3")
        buf.write("\2\2\2\u0188#\3\2\2\2\u0189\u0187\3\2\2\2\u018a\u018f")
        buf.write("\5\"\22\2\u018b\u018c\t\13\2\2\u018c\u018e\5\"\22\2\u018d")
        buf.write("\u018b\3\2\2\2\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2")
        buf.write("\u018f\u0190\3\2\2\2\u0190%\3\2\2\2\u0191\u018f\3\2\2")
        buf.write("\2\u0192\u0197\5$\23\2\u0193\u0194\7Z\2\2\u0194\u0196")
        buf.write("\5$\23\2\u0195\u0193\3\2\2\2\u0196\u0199\3\2\2\2\u0197")
        buf.write("\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198\'\3\2\2\2\u0199")
        buf.write("\u0197\3\2\2\2\u019a\u019f\5&\24\2\u019b\u019c\7^\2\2")
        buf.write("\u019c\u019e\5&\24\2\u019d\u019b\3\2\2\2\u019e\u01a1\3")
        buf.write("\2\2\2\u019f\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0)")
        buf.write("\3\2\2\2\u01a1\u019f\3\2\2\2\u01a2\u01a7\5(\25\2\u01a3")
        buf.write("\u01a4\7[\2\2\u01a4\u01a6\5(\25\2\u01a5\u01a3\3\2\2\2")
        buf.write("\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3")
        buf.write("\2\2\2\u01a8+\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01af")
        buf.write("\5*\26\2\u01ab\u01ac\7\\\2\2\u01ac\u01ae\5*\26\2\u01ad")
        buf.write("\u01ab\3\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2")
        buf.write("\u01af\u01b0\3\2\2\2\u01b0-\3\2\2\2\u01b1\u01af\3\2\2")
        buf.write("\2\u01b2\u01b7\5,\27\2\u01b3\u01b4\7]\2\2\u01b4\u01b6")
        buf.write("\5,\27\2\u01b5\u01b3\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7")
        buf.write("\u01b5\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8/\3\2\2\2\u01b9")
        buf.write("\u01b7\3\2\2\2\u01ba\u01c0\5.\30\2\u01bb\u01bc\7c\2\2")
        buf.write("\u01bc\u01bd\5\66\34\2\u01bd\u01be\7d\2\2\u01be\u01bf")
        buf.write("\5\60\31\2\u01bf\u01c1\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0")
        buf.write("\u01c1\3\2\2\2\u01c1\61\3\2\2\2\u01c2\u01c9\5\60\31\2")
        buf.write("\u01c3\u01c4\5\26\f\2\u01c4\u01c5\5\64\33\2\u01c5\u01c6")
        buf.write("\5\62\32\2\u01c6\u01c9\3\2\2\2\u01c7\u01c9\7y\2\2\u01c8")
        buf.write("\u01c2\3\2\2\2\u01c8\u01c3\3\2\2\2\u01c8\u01c7\3\2\2\2")
        buf.write("\u01c9\63\3\2\2\2\u01ca\u01cb\t\f\2\2\u01cb\65\3\2\2\2")
        buf.write("\u01cc\u01d1\5\62\32\2\u01cd\u01ce\7f\2\2\u01ce\u01d0")
        buf.write("\5\62\32\2\u01cf\u01cd\3\2\2\2\u01d0\u01d3\3\2\2\2\u01d1")
        buf.write("\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\67\3\2\2\2\u01d3")
        buf.write("\u01d1\3\2\2\2\u01d4\u01d5\5\60\31\2\u01d59\3\2\2\2\u01d6")
        buf.write("\u01d8\5<\37\2\u01d7\u01d9\5@!\2\u01d8\u01d7\3\2\2\2\u01d8")
        buf.write("\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01db\7e\2\2")
        buf.write("\u01db\u01de\3\2\2\2\u01dc\u01de\5\u0094K\2\u01dd\u01d6")
        buf.write("\3\2\2\2\u01dd\u01dc\3\2\2\2\u01de;\3\2\2\2\u01df\u01e1")
        buf.write("\5> \2\u01e0\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3=\3\2\2\2\u01e4\u01eb")
        buf.write("\5F$\2\u01e5\u01eb\5D#\2\u01e6\u01eb\5H%\2\u01e7\u01eb")
        buf.write("\5b\62\2\u01e8\u01eb\5d\63\2\u01e9\u01eb\5f\64\2\u01ea")
        buf.write("\u01e4\3\2\2\2\u01ea\u01e5\3\2\2\2\u01ea\u01e6\3\2\2\2")
        buf.write("\u01ea\u01e7\3\2\2\2\u01ea\u01e8\3\2\2\2\u01ea\u01e9\3")
        buf.write("\2\2\2\u01eb?\3\2\2\2\u01ec\u01f1\5B\"\2\u01ed\u01ee\7")
        buf.write("f\2\2\u01ee\u01f0\5B\"\2\u01ef\u01ed\3\2\2\2\u01f0\u01f3")
        buf.write("\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2")
        buf.write("A\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f4\u01f7\5h\65\2\u01f5")
        buf.write("\u01f6\7g\2\2\u01f6\u01f8\5\u008aF\2\u01f7\u01f5\3\2\2")
        buf.write("\2\u01f7\u01f8\3\2\2\2\u01f8C\3\2\2\2\u01f9\u01fa\7 \2")
        buf.write("\2\u01faE\3\2\2\2\u01fb\u01fc\t\r\2\2\u01fcG\3\2\2\2\u01fd")
        buf.write("\u0212\b%\1\2\u01fe\u0213\7:\2\2\u01ff\u0213\7\30\2\2")
        buf.write("\u0200\u0213\7.\2\2\u0201\u0213\7(\2\2\u0202\u0213\7\63")
        buf.write("\2\2\u0203\u0213\7*\2\2\u0204\u0213\7#\2\2\u0205\u0213")
        buf.write("\7\35\2\2\u0206\u0213\7/\2\2\u0207\u0208\7)\2\2\u0208")
        buf.write("\u0209\7M\2\2\u0209\u020a\5z>\2\u020a\u020b\7O\2\2\u020b")
        buf.write("\u0213\3\2\2\2\u020c\u0213\79\2\2\u020d\u0213\7@\2\2\u020e")
        buf.write("\u0213\7A\2\2\u020f\u0213\7\6\2\2\u0210\u0213\7\7\2\2")
        buf.write("\u0211\u0213\7\b\2\2\u0212\u01fe\3\2\2\2\u0212\u01ff\3")
        buf.write("\2\2\2\u0212\u0200\3\2\2\2\u0212\u0201\3\2\2\2\u0212\u0202")
        buf.write("\3\2\2\2\u0212\u0203\3\2\2\2\u0212\u0204\3\2\2\2\u0212")
        buf.write("\u0205\3\2\2\2\u0212\u0206\3\2\2\2\u0212\u0207\3\2\2\2")
        buf.write("\u0212\u020c\3\2\2\2\u0212\u020d\3\2\2\2\u0212\u020e\3")
        buf.write("\2\2\2\u0212\u020f\3\2\2\2\u0212\u0210\3\2\2\2\u0212\u0211")
        buf.write("\3\2\2\2\u0213\u0222\3\2\2\2\u0214\u0215\7\3\2\2\u0215")
        buf.write("\u0216\7G\2\2\u0216\u0217\t\16\2\2\u0217\u0222\7H\2\2")
        buf.write("\u0218\u0222\5`\61\2\u0219\u0222\5J&\2\u021a\u0222\5X")
        buf.write("-\2\u021b\u0222\5\u0088E\2\u021c\u021d\t\17\2\2\u021d")
        buf.write("\u021e\7G\2\2\u021e\u021f\58\35\2\u021f\u0220\7H\2\2\u0220")
        buf.write("\u0222\3\2\2\2\u0221\u01fd\3\2\2\2\u0221\u0214\3\2\2\2")
        buf.write("\u0221\u0218\3\2\2\2\u0221\u0219\3\2\2\2\u0221\u021a\3")
        buf.write("\2\2\2\u0221\u021b\3\2\2\2\u0221\u021c\3\2\2\2\u0222\u0227")
        buf.write("\3\2\2\2\u0223\u0224\f\3\2\2\u0224\u0226\5v<\2\u0225\u0223")
        buf.write("\3\2\2\2\u0226\u0229\3\2\2\2\u0227\u0225\3\2\2\2\u0227")
        buf.write("\u0228\3\2\2\2\u0228I\3\2\2\2\u0229\u0227\3\2\2\2\u022a")
        buf.write("\u022c\5L\'\2\u022b\u022d\7w\2\2\u022c\u022b\3\2\2\2\u022c")
        buf.write("\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0232\7K\2\2")
        buf.write("\u022f\u0231\5N(\2\u0230\u022f\3\2\2\2\u0231\u0234\3\2")
        buf.write("\2\2\u0232\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0235")
        buf.write("\3\2\2\2\u0234\u0232\3\2\2\2\u0235\u0236\7L\2\2\u0236")
        buf.write("\u023b\3\2\2\2\u0237\u0238\5L\'\2\u0238\u0239\7w\2\2\u0239")
        buf.write("\u023b\3\2\2\2\u023a\u022a\3\2\2\2\u023a\u0237\3\2\2\2")
        buf.write("\u023bK\3\2\2\2\u023c\u023d\t\20\2\2\u023dM\3\2\2\2\u023e")
        buf.write("\u0240\5P)\2\u023f\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("\u023f\3\2\2\2\u0241\u0242\3\2\2\2\u0242O\3\2\2\2\u0243")
        buf.write("\u0245\5R*\2\u0244\u0246\5T+\2\u0245\u0244\3\2\2\2\u0245")
        buf.write("\u0246\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248\7e\2\2")
        buf.write("\u0248\u024b\3\2\2\2\u0249\u024b\5\u0094K\2\u024a\u0243")
        buf.write("\3\2\2\2\u024a\u0249\3\2\2\2\u024bQ\3\2\2\2\u024c\u024f")
        buf.write("\5H%\2\u024d\u024f\5b\62\2\u024e\u024c\3\2\2\2\u024e\u024d")
        buf.write("\3\2\2\2\u024f\u0251\3\2\2\2\u0250\u0252\5R*\2\u0251\u0250")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252S\3\2\2\2\u0253\u0258")
        buf.write("\5V,\2\u0254\u0255\7f\2\2\u0255\u0257\5V,\2\u0256\u0254")
        buf.write("\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258")
        buf.write("\u0259\3\2\2\2\u0259U\3\2\2\2\u025a\u0258\3\2\2\2\u025b")
        buf.write("\u0262\5h\65\2\u025c\u025e\5h\65\2\u025d\u025c\3\2\2\2")
        buf.write("\u025d\u025e\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260\7")
        buf.write("d\2\2\u0260\u0262\58\35\2\u0261\u025b\3\2\2\2\u0261\u025d")
        buf.write("\3\2\2\2\u0262W\3\2\2\2\u0263\u0265\7!\2\2\u0264\u0266")
        buf.write("\7w\2\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266")
        buf.write("\u0267\3\2\2\2\u0267\u0268\7K\2\2\u0268\u026a\5Z.\2\u0269")
        buf.write("\u026b\7f\2\2\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2")
        buf.write("\u026b\u026c\3\2\2\2\u026c\u026d\7L\2\2\u026d\u0271\3")
        buf.write("\2\2\2\u026e\u026f\7!\2\2\u026f\u0271\7w\2\2\u0270\u0263")
        buf.write("\3\2\2\2\u0270\u026e\3\2\2\2\u0271Y\3\2\2\2\u0272\u0277")
        buf.write("\5\\/\2\u0273\u0274\7f\2\2\u0274\u0276\5\\/\2\u0275\u0273")
        buf.write("\3\2\2\2\u0276\u0279\3\2\2\2\u0277\u0275\3\2\2\2\u0277")
        buf.write("\u0278\3\2\2\2\u0278[\3\2\2\2\u0279\u0277\3\2\2\2\u027a")
        buf.write("\u027d\5^\60\2\u027b\u027c\7g\2\2\u027c\u027e\58\35\2")
        buf.write("\u027d\u027b\3\2\2\2\u027d\u027e\3\2\2\2\u027e]\3\2\2")
        buf.write("\2\u027f\u0280\7w\2\2\u0280_\3\2\2\2\u0281\u0282\7?\2")
        buf.write("\2\u0282\u0283\7G\2\2\u0283\u0284\5\u0082B\2\u0284\u0285")
        buf.write("\7H\2\2\u0285a\3\2\2\2\u0286\u0287\t\21\2\2\u0287c\3\2")
        buf.write("\2\2\u0288\u0290\t\22\2\2\u0289\u0290\5n8\2\u028a\u028b")
        buf.write("\7\f\2\2\u028b\u028c\7G\2\2\u028c\u028d\7w\2\2\u028d\u0290")
        buf.write("\7H\2\2\u028e\u0290\5D#\2\u028f\u0288\3\2\2\2\u028f\u0289")
        buf.write("\3\2\2\2\u028f\u028a\3\2\2\2\u028f\u028e\3\2\2\2\u0290")
        buf.write("e\3\2\2\2\u0291\u0292\7=\2\2\u0292\u0295\7G\2\2\u0293")
        buf.write("\u0296\5\u0082B\2\u0294\u0296\58\35\2\u0295\u0293\3\2")
        buf.write("\2\2\u0295\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0298")
        buf.write("\7H\2\2\u0298g\3\2\2\2\u0299\u029b\5v<\2\u029a\u0299\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u02a0")
        buf.write("\5j\66\2\u029d\u029f\5l\67\2\u029e\u029d\3\2\2\2\u029f")
        buf.write("\u02a2\3\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2")
        buf.write("\u02a1i\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3\u02a4\b\66\1")
        buf.write("\2\u02a4\u02b5\7w\2\2\u02a5\u02a6\7G\2\2\u02a6\u02a7\5")
        buf.write("h\65\2\u02a7\u02a8\7H\2\2\u02a8\u02b5\3\2\2\2\u02a9\u02aa")
        buf.write("\7w\2\2\u02aa\u02ab\7d\2\2\u02ab\u02b5\7y\2\2\u02ac\u02ae")
        buf.write("\7G\2\2\u02ad\u02af\5H%\2\u02ae\u02ad\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\5v<\2\u02b1\u02b2")
        buf.write("\5j\66\2\u02b2\u02b3\7H\2\2\u02b3\u02b5\3\2\2\2\u02b4")
        buf.write("\u02a3\3\2\2\2\u02b4\u02a5\3\2\2\2\u02b4\u02a9\3\2\2\2")
        buf.write("\u02b4\u02ac\3\2\2\2\u02b5\u02e3\3\2\2\2\u02b6\u02b7\f")
        buf.write("\n\2\2\u02b7\u02b9\7I\2\2\u02b8\u02ba\5x=\2\u02b9\u02b8")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bc\3\2\2\2\u02bb")
        buf.write("\u02bd\5\62\32\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2")
        buf.write("\2\u02bd\u02be\3\2\2\2\u02be\u02e2\7J\2\2\u02bf\u02c0")
        buf.write("\f\t\2\2\u02c0\u02c1\7I\2\2\u02c1\u02c3\7\62\2\2\u02c2")
        buf.write("\u02c4\5x=\2\u02c3\u02c2\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4")
        buf.write("\u02c5\3\2\2\2\u02c5\u02c6\5\62\32\2\u02c6\u02c7\7J\2")
        buf.write("\2\u02c7\u02e2\3\2\2\2\u02c8\u02c9\f\b\2\2\u02c9\u02ca")
        buf.write("\7I\2\2\u02ca\u02cb\5x=\2\u02cb\u02cc\7\62\2\2\u02cc\u02cd")
        buf.write("\5\62\32\2\u02cd\u02ce\7J\2\2\u02ce\u02e2\3\2\2\2\u02cf")
        buf.write("\u02d0\f\7\2\2\u02d0\u02d2\7I\2\2\u02d1\u02d3\5x=\2\u02d2")
        buf.write("\u02d1\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4\3\2\2\2")
        buf.write("\u02d4\u02d5\7W\2\2\u02d5\u02e2\7J\2\2\u02d6\u02d7\f\6")
        buf.write("\2\2\u02d7\u02d8\7G\2\2\u02d8\u02d9\5z>\2\u02d9\u02da")
        buf.write("\7H\2\2\u02da\u02e2\3\2\2\2\u02db\u02dc\f\5\2\2\u02dc")
        buf.write("\u02de\7G\2\2\u02dd\u02df\5\u0080A\2\u02de\u02dd\3\2\2")
        buf.write("\2\u02de\u02df\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2")
        buf.write("\7H\2\2\u02e1\u02b6\3\2\2\2\u02e1\u02bf\3\2\2\2\u02e1")
        buf.write("\u02c8\3\2\2\2\u02e1\u02cf\3\2\2\2\u02e1\u02d6\3\2\2\2")
        buf.write("\u02e1\u02db\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3")
        buf.write("\2\2\2\u02e3\u02e4\3\2\2\2\u02e4k\3\2\2\2\u02e5\u02e3")
        buf.write("\3\2\2\2\u02e6\u02e7\7\r\2\2\u02e7\u02e9\7G\2\2\u02e8")
        buf.write("\u02ea\7z\2\2\u02e9\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2")
        buf.write("\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3")
        buf.write("\2\2\2\u02ed\u02f0\7H\2\2\u02ee\u02f0\5n8\2\u02ef\u02e6")
        buf.write("\3\2\2\2\u02ef\u02ee\3\2\2\2\u02f0m\3\2\2\2\u02f1\u02f2")
        buf.write("\7\16\2\2\u02f2\u02f3\7G\2\2\u02f3\u02f4\7G\2\2\u02f4")
        buf.write("\u02f5\5p9\2\u02f5\u02f6\7H\2\2\u02f6\u02f7\7H\2\2\u02f7")
        buf.write("o\3\2\2\2\u02f8\u02fa\5r:\2\u02f9\u02f8\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u0301\3\2\2\2\u02fb\u02fd\7f\2\2")
        buf.write("\u02fc\u02fe\5r:\2\u02fd\u02fc\3\2\2\2\u02fd\u02fe\3\2")
        buf.write("\2\2\u02fe\u0300\3\2\2\2\u02ff\u02fb\3\2\2\2\u0300\u0303")
        buf.write("\3\2\2\2\u0301\u02ff\3\2\2\2\u0301\u0302\3\2\2\2\u0302")
        buf.write("q\3\2\2\2\u0303\u0301\3\2\2\2\u0304\u030a\n\23\2\2\u0305")
        buf.write("\u0307\7G\2\2\u0306\u0308\5\24\13\2\u0307\u0306\3\2\2")
        buf.write("\2\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030b")
        buf.write("\7H\2\2\u030a\u0305\3\2\2\2\u030a\u030b\3\2\2\2\u030b")
        buf.write("s\3\2\2\2\u030c\u0312\n\24\2\2\u030d\u030e\7G\2\2\u030e")
        buf.write("\u030f\5t;\2\u030f\u0310\7H\2\2\u0310\u0312\3\2\2\2\u0311")
        buf.write("\u030c\3\2\2\2\u0311\u030d\3\2\2\2\u0312\u0315\3\2\2\2")
        buf.write("\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314u\3\2\2")
        buf.write("\2\u0315\u0313\3\2\2\2\u0316\u0318\t\25\2\2\u0317\u0319")
        buf.write("\5x=\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b")
        buf.write("\3\2\2\2\u031a\u0316\3\2\2\2\u031b\u031c\3\2\2\2\u031c")
        buf.write("\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031dw\3\2\2\2\u031e")
        buf.write("\u0320\5b\62\2\u031f\u031e\3\2\2\2\u0320\u0321\3\2\2\2")
        buf.write("\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322y\3\2\2")
        buf.write("\2\u0323\u0326\5|?\2\u0324\u0325\7f\2\2\u0325\u0327\7")
        buf.write("v\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327{\3")
        buf.write("\2\2\2\u0328\u032d\5~@\2\u0329\u032a\7f\2\2\u032a\u032c")
        buf.write("\5~@\2\u032b\u0329\3\2\2\2\u032c\u032f\3\2\2\2\u032d\u032b")
        buf.write("\3\2\2\2\u032d\u032e\3\2\2\2\u032e}\3\2\2\2\u032f\u032d")
        buf.write("\3\2\2\2\u0330\u0331\5<\37\2\u0331\u0332\5h\65\2\u0332")
        buf.write("\u0338\3\2\2\2\u0333\u0335\5<\37\2\u0334\u0336\5\u0084")
        buf.write("C\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338")
        buf.write("\3\2\2\2\u0337\u0330\3\2\2\2\u0337\u0333\3\2\2\2\u0338")
        buf.write("\177\3\2\2\2\u0339\u033e\7w\2\2\u033a\u033b\7f\2\2\u033b")
        buf.write("\u033d\7w\2\2\u033c\u033a\3\2\2\2\u033d\u0340\3\2\2\2")
        buf.write("\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0081\3")
        buf.write("\2\2\2\u0340\u033e\3\2\2\2\u0341\u0343\5R*\2\u0342\u0344")
        buf.write("\5\u0084C\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344")
        buf.write("\u0083\3\2\2\2\u0345\u0351\5v<\2\u0346\u0348\5v<\2\u0347")
        buf.write("\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2")
        buf.write("\u0349\u034d\5\u0086D\2\u034a\u034c\5l\67\2\u034b\u034a")
        buf.write("\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\u0351\3\2\2\2\u034f\u034d\3\2\2\2")
        buf.write("\u0350\u0345\3\2\2\2\u0350\u0347\3\2\2\2\u0351\u0085\3")
        buf.write("\2\2\2\u0352\u0353\bD\1\2\u0353\u0354\7G\2\2\u0354\u0355")
        buf.write("\5\u0084C\2\u0355\u0359\7H\2\2\u0356\u0358\5l\67\2\u0357")
        buf.write("\u0356\3\2\2\2\u0358\u035b\3\2\2\2\u0359\u0357\3\2\2\2")
        buf.write("\u0359\u035a\3\2\2\2\u035a\u0381\3\2\2\2\u035b\u0359\3")
        buf.write("\2\2\2\u035c\u035e\7I\2\2\u035d\u035f\5x=\2\u035e\u035d")
        buf.write("\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0361\3\2\2\2\u0360")
        buf.write("\u0362\5\62\32\2\u0361\u0360\3\2\2\2\u0361\u0362\3\2\2")
        buf.write("\2\u0362\u0363\3\2\2\2\u0363\u0381\7J\2\2\u0364\u0365")
        buf.write("\7I\2\2\u0365\u0367\7\62\2\2\u0366\u0368\5x=\2\u0367\u0366")
        buf.write("\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u0369\3\2\2\2\u0369")
        buf.write("\u036a\5\62\32\2\u036a\u036b\7J\2\2\u036b\u0381\3\2\2")
        buf.write("\2\u036c\u036d\7I\2\2\u036d\u036e\5x=\2\u036e\u036f\7")
        buf.write("\62\2\2\u036f\u0370\5\62\32\2\u0370\u0371\7J\2\2\u0371")
        buf.write("\u0381\3\2\2\2\u0372\u0373\7I\2\2\u0373\u0374\7W\2\2\u0374")
        buf.write("\u0381\7J\2\2\u0375\u0377\7G\2\2\u0376\u0378\5z>\2\u0377")
        buf.write("\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037d\7H\2\2\u037a\u037c\5l\67\2\u037b\u037a\3")
        buf.write("\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\u0381\3\2\2\2\u037f\u037d\3\2\2\2\u0380")
        buf.write("\u0352\3\2\2\2\u0380\u035c\3\2\2\2\u0380\u0364\3\2\2\2")
        buf.write("\u0380\u036c\3\2\2\2\u0380\u0372\3\2\2\2\u0380\u0375\3")
        buf.write("\2\2\2\u0381\u03ad\3\2\2\2\u0382\u0383\f\7\2\2\u0383\u0385")
        buf.write("\7I\2\2\u0384\u0386\5x=\2\u0385\u0384\3\2\2\2\u0385\u0386")
        buf.write("\3\2\2\2\u0386\u0388\3\2\2\2\u0387\u0389\5\62\32\2\u0388")
        buf.write("\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2\2")
        buf.write("\u038a\u03ac\7J\2\2\u038b\u038c\f\6\2\2\u038c\u038d\7")
        buf.write("I\2\2\u038d\u038f\7\62\2\2\u038e\u0390\5x=\2\u038f\u038e")
        buf.write("\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\3\2\2\2\u0391")
        buf.write("\u0392\5\62\32\2\u0392\u0393\7J\2\2\u0393\u03ac\3\2\2")
        buf.write("\2\u0394\u0395\f\5\2\2\u0395\u0396\7I\2\2\u0396\u0397")
        buf.write("\5x=\2\u0397\u0398\7\62\2\2\u0398\u0399\5\62\32\2\u0399")
        buf.write("\u039a\7J\2\2\u039a\u03ac\3\2\2\2\u039b\u039c\f\4\2\2")
        buf.write("\u039c\u039d\7I\2\2\u039d\u039e\7W\2\2\u039e\u03ac\7J")
        buf.write("\2\2\u039f\u03a0\f\3\2\2\u03a0\u03a2\7G\2\2\u03a1\u03a3")
        buf.write("\5z>\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4")
        buf.write("\3\2\2\2\u03a4\u03a8\7H\2\2\u03a5\u03a7\5l\67\2\u03a6")
        buf.write("\u03a5\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6\3\2\2\2")
        buf.write("\u03a8\u03a9\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa\u03a8\3")
        buf.write("\2\2\2\u03ab\u0382\3\2\2\2\u03ab\u038b\3\2\2\2\u03ab\u0394")
        buf.write("\3\2\2\2\u03ab\u039b\3\2\2\2\u03ab\u039f\3\2\2\2\u03ac")
        buf.write("\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2")
        buf.write("\u03ae\u0087\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b1\7")
        buf.write("w\2\2\u03b1\u0089\3\2\2\2\u03b2\u03bc\5\62\32\2\u03b3")
        buf.write("\u03b5\7K\2\2\u03b4\u03b6\5\u008cG\2\u03b5\u03b4\3\2\2")
        buf.write("\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2\u03b7\u03b9")
        buf.write("\7f\2\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\3\2\2\2\u03ba\u03bc\7L\2\2\u03bb\u03b2\3\2\2\2")
        buf.write("\u03bb\u03b3\3\2\2\2\u03bc\u008b\3\2\2\2\u03bd\u03bf\5")
        buf.write("\u008eH\2\u03be\u03bd\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03c8\5\u008aF\2\u03c1\u03c3\7f\2")
        buf.write("\2\u03c2\u03c4\5\u008eH\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4")
        buf.write("\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7\5\u008aF\2\u03c6")
        buf.write("\u03c1\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2")
        buf.write("\u03c8\u03c9\3\2\2\2\u03c9\u008d\3\2\2\2\u03ca\u03c8\3")
        buf.write("\2\2\2\u03cb\u03cc\5\u0090I\2\u03cc\u03cd\7g\2\2\u03cd")
        buf.write("\u008f\3\2\2\2\u03ce\u03d0\5\u0092J\2\u03cf\u03ce\3\2")
        buf.write("\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u0091\3\2\2\2\u03d3\u03d4\7I\2\2\u03d4")
        buf.write("\u03d5\58\35\2\u03d5\u03d6\7J\2\2\u03d6\u03da\3\2\2\2")
        buf.write("\u03d7\u03d8\7u\2\2\u03d8\u03da\7w\2\2\u03d9\u03d3\3\2")
        buf.write("\2\2\u03d9\u03d7\3\2\2\2\u03da\u0093\3\2\2\2\u03db\u03dc")
        buf.write("\7E\2\2\u03dc\u03dd\7G\2\2\u03dd\u03de\58\35\2\u03de\u03e0")
        buf.write("\7f\2\2\u03df\u03e1\7z\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("\u03e4\3\2\2\2\u03e4\u03e5\7H\2\2\u03e5\u03e6\7e\2\2\u03e6")
        buf.write("\u0095\3\2\2\2\u03e7\u040e\5\u0098M\2\u03e8\u040e\5\u009a")
        buf.write("N\2\u03e9\u040e\5\u00a0Q\2\u03ea\u040e\5\u00a2R\2\u03eb")
        buf.write("\u040e\5\u00aaV\2\u03ec\u040e\5\u00acW\2\u03ed\u040e\5")
        buf.write("\u00b4[\2\u03ee\u03ef\t\26\2\2\u03ef\u03f0\t\27\2\2\u03f0")
        buf.write("\u03f9\7G\2\2\u03f1\u03f6\5.\30\2\u03f2\u03f3\7f\2\2\u03f3")
        buf.write("\u03f5\5.\30\2\u03f4\u03f2\3\2\2\2\u03f5\u03f8\3\2\2\2")
        buf.write("\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03fa\3")
        buf.write("\2\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03f1\3\2\2\2\u03f9\u03fa")
        buf.write("\3\2\2\2\u03fa\u0408\3\2\2\2\u03fb\u0404\7d\2\2\u03fc")
        buf.write("\u0401\5.\30\2\u03fd\u03fe\7f\2\2\u03fe\u0400\5.\30\2")
        buf.write("\u03ff\u03fd\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff\3")
        buf.write("\2\2\2\u0401\u0402\3\2\2\2\u0402\u0405\3\2\2\2\u0403\u0401")
        buf.write("\3\2\2\2\u0404\u03fc\3\2\2\2\u0404\u0405\3\2\2\2\u0405")
        buf.write("\u0407\3\2\2\2\u0406\u03fb\3\2\2\2\u0407\u040a\3\2\2\2")
        buf.write("\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040b\3")
        buf.write("\2\2\2\u040a\u0408\3\2\2\2\u040b\u040c\7H\2\2\u040c\u040e")
        buf.write("\7e\2\2\u040d\u03e7\3\2\2\2\u040d\u03e8\3\2\2\2\u040d")
        buf.write("\u03e9\3\2\2\2\u040d\u03ea\3\2\2\2\u040d\u03eb\3\2\2\2")
        buf.write("\u040d\u03ec\3\2\2\2\u040d\u03ed\3\2\2\2\u040d\u03ee\3")
        buf.write("\2\2\2\u040e\u0097\3\2\2\2\u040f\u0410\7w\2\2\u0410\u0411")
        buf.write("\7d\2\2\u0411\u041b\5\u0096L\2\u0412\u0413\7\27\2\2\u0413")
        buf.write("\u0414\58\35\2\u0414\u0415\7d\2\2\u0415\u0416\5\u0096")
        buf.write("L\2\u0416\u041b\3\2\2\2\u0417\u0418\7\33\2\2\u0418\u0419")
        buf.write("\7d\2\2\u0419\u041b\5\u0096L\2\u041a\u040f\3\2\2\2\u041a")
        buf.write("\u0412\3\2\2\2\u041a\u0417\3\2\2\2\u041b\u0099\3\2\2\2")
        buf.write("\u041c\u041e\7K\2\2\u041d\u041f\5\u009cO\2\u041e\u041d")
        buf.write("\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2\u0420")
        buf.write("\u0421\7L\2\2\u0421\u009b\3\2\2\2\u0422\u0424\5\u009e")
        buf.write("P\2\u0423\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0423")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u009d\3\2\2\2\u0427")
        buf.write("\u042a\5\u0096L\2\u0428\u042a\5:\36\2\u0429\u0427\3\2")
        buf.write("\2\2\u0429\u0428\3\2\2\2\u042a\u009f\3\2\2\2\u042b\u042d")
        buf.write("\5\66\34\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d")
        buf.write("\u042e\3\2\2\2\u042e\u042f\7e\2\2\u042f\u00a1\3\2\2\2")
        buf.write("\u0430\u0431\7\21\2\2\u0431\u0433\5\u009aN\2\u0432\u0434")
        buf.write("\5\u00a4S\2\u0433\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435")
        buf.write("\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u043f\3\2\2\2")
        buf.write("\u0437\u0439\5\u00a6T\2\u0438\u043a\5\u00a8U\2\u0439\u0438")
        buf.write("\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u0440\3\2\2\2\u043b")
        buf.write("\u043d\5\u00a8U\2\u043c\u043e\5\u00a6T\2\u043d\u043c\3")
        buf.write("\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3\2\2\2\u043f\u0437")
        buf.write("\3\2\2\2\u043f\u043b\3\2\2\2\u043f\u0440\3\2\2\2\u0440")
        buf.write("\u00a3\3\2\2\2\u0441\u0442\7\22\2\2\u0442\u0445\7G\2\2")
        buf.write("\u0443\u0446\7w\2\2\u0444\u0446\5\u0080A\2\u0445\u0443")
        buf.write("\3\2\2\2\u0445\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write("\u044a\7H\2\2\u0448\u0449\7\24\2\2\u0449\u044b\7w\2\2")
        buf.write("\u044a\u0448\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3")
        buf.write("\2\2\2\u044c\u044d\5\u009aN\2\u044d\u00a5\3\2\2\2\u044e")
        buf.write("\u044f\7\23\2\2\u044f\u0450\5\u009aN\2\u0450\u00a7\3\2")
        buf.write("\2\2\u0451\u0452\7\36\2\2\u0452\u0453\5\u009aN\2\u0453")
        buf.write("\u00a9\3\2\2\2\u0454\u0455\7&\2\2\u0455\u0456\7G\2\2\u0456")
        buf.write("\u0457\5\66\34\2\u0457\u0458\7H\2\2\u0458\u045b\5\u0096")
        buf.write("L\2\u0459\u045a\7\36\2\2\u045a\u045c\5\u0096L\2\u045b")
        buf.write("\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u0464\3\2\2\2")
        buf.write("\u045d\u045e\7\65\2\2\u045e\u045f\7G\2\2\u045f\u0460\5")
        buf.write("\66\34\2\u0460\u0461\7H\2\2\u0461\u0462\5\u0096L\2\u0462")
        buf.write("\u0464\3\2\2\2\u0463\u0454\3\2\2\2\u0463\u045d\3\2\2\2")
        buf.write("\u0464\u00ab\3\2\2\2\u0465\u0466\7<\2\2\u0466\u0467\7")
        buf.write("G\2\2\u0467\u0468\5\66\34\2\u0468\u0469\7H\2\2\u0469\u046a")
        buf.write("\5\u0096L\2\u046a\u047a\3\2\2\2\u046b\u046c\7\34\2\2\u046c")
        buf.write("\u046d\5\u0096L\2\u046d\u046e\7<\2\2\u046e\u046f\7G\2")
        buf.write("\2\u046f\u0470\5\66\34\2\u0470\u0471\7H\2\2\u0471\u0472")
        buf.write("\7e\2\2\u0472\u047a\3\2\2\2\u0473\u0474\7$\2\2\u0474\u0475")
        buf.write("\7G\2\2\u0475\u0476\5\u00aeX\2\u0476\u0477\7H\2\2\u0477")
        buf.write("\u0478\5\u0096L\2\u0478\u047a\3\2\2\2\u0479\u0465\3\2")
        buf.write("\2\2\u0479\u046b\3\2\2\2\u0479\u0473\3\2\2\2\u047a\u00ad")
        buf.write("\3\2\2\2\u047b\u0480\5\u00b0Y\2\u047c\u047e\5\66\34\2")
        buf.write("\u047d\u047c\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0480\3")
        buf.write("\2\2\2\u047f\u047b\3\2\2\2\u047f\u047d\3\2\2\2\u0480\u0481")
        buf.write("\3\2\2\2\u0481\u0483\7e\2\2\u0482\u0484\5\u00b2Z\2\u0483")
        buf.write("\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0485\3\2\2\2")
        buf.write("\u0485\u0487\7e\2\2\u0486\u0488\5\u00b2Z\2\u0487\u0486")
        buf.write("\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u00af\3\2\2\2\u0489")
        buf.write("\u048b\5<\37\2\u048a\u048c\5@!\2\u048b\u048a\3\2\2\2\u048b")
        buf.write("\u048c\3\2\2\2\u048c\u00b1\3\2\2\2\u048d\u0492\5\62\32")
        buf.write("\2\u048e\u048f\7f\2\2\u048f\u0491\5\62\32\2\u0490\u048e")
        buf.write("\3\2\2\2\u0491\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492")
        buf.write("\u0493\3\2\2\2\u0493\u00b3\3\2\2\2\u0494\u0492\3\2\2\2")
        buf.write("\u0495\u0496\7%\2\2\u0496\u049f\7w\2\2\u0497\u049f\t\30")
        buf.write("\2\2\u0498\u049a\7-\2\2\u0499\u049b\5\66\34\2\u049a\u0499")
        buf.write("\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049f\3\2\2\2\u049c")
        buf.write("\u049d\7%\2\2\u049d\u049f\5\26\f\2\u049e\u0495\3\2\2\2")
        buf.write("\u049e\u0497\3\2\2\2\u049e\u0498\3\2\2\2\u049e\u049c\3")
        buf.write("\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\7e\2\2\u04a1\u00b5")
        buf.write("\3\2\2\2\u04a2\u04a4\5\u00b8]\2\u04a3\u04a2\3\2\2\2\u04a3")
        buf.write("\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\7\2\2\3")
        buf.write("\u04a6\u00b7\3\2\2\2\u04a7\u04aa\5\u00ba^\2\u04a8\u04aa")
        buf.write("\7e\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04a8\3\2\2\2\u04aa")
        buf.write("\u04ab\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2")
        buf.write("\u04ac\u00b9\3\2\2\2\u04ad\u04b1\5\u00bc_\2\u04ae\u04b1")
        buf.write("\5:\36\2\u04af\u04b1\5\u00c2b\2\u04b0\u04ad\3\2\2\2\u04b0")
        buf.write("\u04ae\3\2\2\2\u04b0\u04af\3\2\2\2\u04b1\u00bb\3\2\2\2")
        buf.write("\u04b2\u04b3\5\u00be`\2\u04b3\u04b5\5h\65\2\u04b4\u04b6")
        buf.write("\5\u00c8e\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6")
        buf.write("\u04b7\3\2\2\2\u04b7\u04b8\5\u009aN\2\u04b8\u04c2\3\2")
        buf.write("\2\2\u04b9\u04ba\5\u00be`\2\u04ba\u04bc\5h\65\2\u04bb")
        buf.write("\u04bd\5\u00c8e\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd\3\2")
        buf.write("\2\2\u04bd\u04be\3\2\2\2\u04be\u04bf\5\b\5\2\u04bf\u04c0")
        buf.write("\7e\2\2\u04c0\u04c2\3\2\2\2\u04c1\u04b2\3\2\2\2\u04c1")
        buf.write("\u04b9\3\2\2\2\u04c2\u00bd\3\2\2\2\u04c3\u04c5\5\u00c0")
        buf.write("a\2\u04c4\u04c3\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c4")
        buf.write("\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04ca\3\2\2\2\u04c8")
        buf.write("\u04c6\3\2\2\2\u04c9\u04cb\5<\37\2\u04ca\u04c9\3\2\2\2")
        buf.write("\u04ca\u04cb\3\2\2\2\u04cb\u00bf\3\2\2\2\u04cc\u04cd\7")
        buf.write("a\2\2\u04cd\u04ce\7w\2\2\u04ce\u00c1\3\2\2\2\u04cf\u04d0")
        buf.write("\7\37\2\2\u04d0\u04d1\7w\2\2\u04d1\u04d3\5j\66\2\u04d2")
        buf.write("\u04d4\5\u00c8e\2\u04d3\u04d2\3\2\2\2\u04d3\u04d4\3\2")
        buf.write("\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\5\u00c4c\2\u04d6")
        buf.write("\u00c3\3\2\2\2\u04d7\u04e0\7K\2\2\u04d8\u04dd\5\u00c6")
        buf.write("d\2\u04d9\u04da\7f\2\2\u04da\u04dc\5\u00c6d\2\u04db\u04d9")
        buf.write("\3\2\2\2\u04dc\u04df\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd")
        buf.write("\u04de\3\2\2\2\u04de\u04e1\3\2\2\2\u04df\u04dd\3\2\2\2")
        buf.write("\u04e0\u04d8\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3")
        buf.write("\2\2\2\u04e2\u04e3\7L\2\2\u04e3\u00c5\3\2\2\2\u04e4\u04e5")
        buf.write("\7w\2\2\u04e5\u04e6\7d\2\2\u04e6\u04e7\5\2\2\2\u04e7\u00c7")
        buf.write("\3\2\2\2\u04e8\u04ea\5:\36\2\u04e9\u04e8\3\2\2\2\u04ea")
        buf.write("\u04eb\3\2\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ec\3\2\2\2")
        buf.write("\u04ec\u00c9\3\2\2\2\u009d\u00d1\u00da\u00ee\u00f2\u00f9")
        buf.write("\u010d\u0112\u0119\u0121\u0125\u012d\u0133\u0135\u013d")
        buf.write("\u0143\u0151\u0157\u0160\u0167\u016f\u0177\u017f\u0187")
        buf.write("\u018f\u0197\u019f\u01a7\u01af\u01b7\u01c0\u01c8\u01d1")
        buf.write("\u01d8\u01dd\u01e2\u01ea\u01f1\u01f7\u0212\u0221\u0227")
        buf.write("\u022c\u0232\u023a\u0241\u0245\u024a\u024e\u0251\u0258")
        buf.write("\u025d\u0261\u0265\u026a\u0270\u0277\u027d\u028f\u0295")
        buf.write("\u029a\u02a0\u02ae\u02b4\u02b9\u02bc\u02c3\u02d2\u02de")
        buf.write("\u02e1\u02e3\u02eb\u02ef\u02f9\u02fd\u0301\u0307\u030a")
        buf.write("\u0311\u0313\u0318\u031c\u0321\u0326\u032d\u0335\u0337")
        buf.write("\u033e\u0343\u0347\u034d\u0350\u0359\u035e\u0361\u0367")
        buf.write("\u0377\u037d\u0380\u0385\u0388\u038f\u03a2\u03a8\u03ab")
        buf.write("\u03ad\u03b5\u03b8\u03bb\u03be\u03c3\u03c8\u03d1\u03d9")
        buf.write("\u03e2\u03f6\u03f9\u0401\u0404\u0408\u040d\u041a\u041e")
        buf.write("\u0425\u0429\u042c\u0435\u0439\u043d\u043f\u0445\u044a")
        buf.write("\u045b\u0463\u0479\u047d\u047f\u0483\u0487\u048b\u0492")
        buf.write("\u049a\u049e\u04a3\u04a9\u04ab\u04b0\u04b5\u04bc\u04c1")
        buf.write("\u04c6\u04ca\u04d3\u04dd\u04e0\u04eb")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'try'", "'except'", "'finally'", "'as'", "'auto'", 
                     "'break'", "'case'", "'char'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'exttask'", 
                     "'entry'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'lambda'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'spawn'", "'static'", "'status'", 
                     "'struct'", "'switch'", "'typeof'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
                     "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", 
                     "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'@'", "'=>'", "'?'", "':'", "';'", "','", "'='", "'*='", 
                     "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
                     "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "As", "Auto", "Break", "Case", 
                      "Char", "Const", "Continue", "Default", "Do", "Double", 
                      "Else", "ExtensionTask", "Entry", "Enum", "Extern", 
                      "Float", "For", "Goto", "If", "Inline", "Int", "Lambda", 
                      "Long", "Register", "Restrict", "Return", "Short", 
                      "Signed", "Sizeof", "Spawn", "Static", "Status", "Struct", 
                      "Switch", "Typeof", "Typedef", "Union", "Unsigned", 
                      "Void", "Volatile", "While", "Alignas", "Alignof", 
                      "Atomic", "Bool", "Complex", "Generic", "Imaginary", 
                      "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
                      "LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", 
                      "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", 
                      "OrOr", "Caret", "Not", "Tilde", "DecoratorSign", 
                      "LambdaStartBlock", "Question", "Colon", "Semi", "Comma", 
                      "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "AsmBlock", "Directive", 
                      "Whitespace", "Newline" ]

    RULE_primaryExpression = 0
    RULE_lambdaFunction = 1
    RULE_lambdaBody = 2
    RULE_expressionLambda = 3
    RULE_statementLambda = 4
    RULE_genericSelection = 5
    RULE_genericAssocList = 6
    RULE_genericAssociation = 7
    RULE_postfixExpression = 8
    RULE_argumentExpressionList = 9
    RULE_unaryExpression = 10
    RULE_unaryOperator = 11
    RULE_castOrConvertExpression = 12
    RULE_multiplicativeExpression = 13
    RULE_additiveExpression = 14
    RULE_shiftExpression = 15
    RULE_relationalExpression = 16
    RULE_equalityExpression = 17
    RULE_andExpression = 18
    RULE_exclusiveOrExpression = 19
    RULE_inclusiveOrExpression = 20
    RULE_logicalAndExpression = 21
    RULE_logicalOrExpression = 22
    RULE_conditionalExpression = 23
    RULE_assignmentExpression = 24
    RULE_assignmentOperator = 25
    RULE_expression = 26
    RULE_constantExpression = 27
    RULE_declaration = 28
    RULE_declarationSpecifiers = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_entryPointSpecifier = 33
    RULE_storageClassSpecifier = 34
    RULE_typeSpecifier = 35
    RULE_structOrUnionSpecifier = 36
    RULE_structOrUnion = 37
    RULE_structDeclarationList = 38
    RULE_structDeclaration = 39
    RULE_specifierQualifierList = 40
    RULE_structDeclaratorList = 41
    RULE_structDeclarator = 42
    RULE_enumSpecifier = 43
    RULE_enumeratorList = 44
    RULE_enumerator = 45
    RULE_enumerationConstant = 46
    RULE_atomicTypeSpecifier = 47
    RULE_typeQualifier = 48
    RULE_functionSpecifier = 49
    RULE_alignmentSpecifier = 50
    RULE_declarator = 51
    RULE_directDeclarator = 52
    RULE_gccDeclaratorExtension = 53
    RULE_gccAttributeSpecifier = 54
    RULE_gccAttributeList = 55
    RULE_gccAttribute = 56
    RULE_nestedParenthesesBlock = 57
    RULE_pointer = 58
    RULE_typeQualifierList = 59
    RULE_parameterTypeList = 60
    RULE_parameterList = 61
    RULE_parameterDeclaration = 62
    RULE_identifierList = 63
    RULE_typeName = 64
    RULE_abstractDeclarator = 65
    RULE_directAbstractDeclarator = 66
    RULE_typedefName = 67
    RULE_initializer = 68
    RULE_initializerList = 69
    RULE_designation = 70
    RULE_designatorList = 71
    RULE_designator = 72
    RULE_staticAssertDeclaration = 73
    RULE_statement = 74
    RULE_labeledStatement = 75
    RULE_compoundStatement = 76
    RULE_blockItemList = 77
    RULE_blockItem = 78
    RULE_expressionStatement = 79
    RULE_tryExceptStatement = 80
    RULE_exceptBlock = 81
    RULE_finallyBlock = 82
    RULE_elseBlock = 83
    RULE_selectionStatement = 84
    RULE_iterationStatement = 85
    RULE_forCondition = 86
    RULE_forDeclaration = 87
    RULE_forExpression = 88
    RULE_jumpStatement = 89
    RULE_compilationUnit = 90
    RULE_translationUnit = 91
    RULE_externalItem = 92
    RULE_functionDefinition = 93
    RULE_functionDeclarationSpecifiers = 94
    RULE_decoratorSpecifier = 95
    RULE_extensionTaskDefinition = 96
    RULE_extensionTaskParameterList = 97
    RULE_extensionTaskParameter = 98
    RULE_declarationList = 99

    ruleNames =  [ "primaryExpression", "lambdaFunction", "lambdaBody", 
                   "expressionLambda", "statementLambda", "genericSelection", 
                   "genericAssocList", "genericAssociation", "postfixExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castOrConvertExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "entryPointSpecifier", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "tryExceptStatement", "exceptBlock", "finallyBlock", 
                   "elseBlock", "selectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalItem", 
                   "functionDefinition", "functionDeclarationSpecifiers", 
                   "decoratorSpecifier", "extensionTaskDefinition", "extensionTaskParameterList", 
                   "extensionTaskParameter", "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    As=18
    Auto=19
    Break=20
    Case=21
    Char=22
    Const=23
    Continue=24
    Default=25
    Do=26
    Double=27
    Else=28
    ExtensionTask=29
    Entry=30
    Enum=31
    Extern=32
    Float=33
    For=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Lambda=39
    Long=40
    Register=41
    Restrict=42
    Return=43
    Short=44
    Signed=45
    Sizeof=46
    Spawn=47
    Static=48
    Status=49
    Struct=50
    Switch=51
    Typeof=52
    Typedef=53
    Union=54
    Unsigned=55
    Void=56
    Volatile=57
    While=58
    Alignas=59
    Alignof=60
    Atomic=61
    Bool=62
    Complex=63
    Generic=64
    Imaginary=65
    Noreturn=66
    StaticAssert=67
    ThreadLocal=68
    LeftParen=69
    RightParen=70
    LeftBracket=71
    RightBracket=72
    LeftBrace=73
    RightBrace=74
    Less=75
    LessEqual=76
    Greater=77
    GreaterEqual=78
    LeftShift=79
    RightShift=80
    Plus=81
    PlusPlus=82
    Minus=83
    MinusMinus=84
    Star=85
    Div=86
    Mod=87
    And=88
    Or=89
    AndAnd=90
    OrOr=91
    Caret=92
    Not=93
    Tilde=94
    DecoratorSign=95
    LambdaStartBlock=96
    Question=97
    Colon=98
    Semi=99
    Comma=100
    Assign=101
    StarAssign=102
    DivAssign=103
    ModAssign=104
    PlusAssign=105
    MinusAssign=106
    LeftShiftAssign=107
    RightShiftAssign=108
    AndAssign=109
    XorAssign=110
    OrAssign=111
    Equal=112
    NotEqual=113
    Arrow=114
    Dot=115
    Ellipsis=116
    Identifier=117
    Constant=118
    DigitSequence=119
    StringLiteral=120
    AsmBlock=121
    Directive=122
    Whitespace=123
    Newline=124

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Spawn(self):
            return self.getToken(ParaCParser.Spawn, 0)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(ParaCParser.GenericSelectionContext,0)


        def lambdaFunction(self):
            return self.getTypedRuleContext(ParaCParser.LambdaFunctionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 201
                self.match(ParaCParser.Spawn)
                self.state = 202
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 203
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 205 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 204
                        self.match(ParaCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 207 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 209
                self.match(ParaCParser.LeftParen)
                self.state = 210
                self.expression()
                self.state = 211
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 213
                self.genericSelection()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 214
                self.lambdaFunction()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 215
                    self.match(ParaCParser.T__0)


                self.state = 218
                self.match(ParaCParser.LeftParen)
                self.state = 219
                self.compoundStatement()
                self.state = 220
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 222
                self.match(ParaCParser.T__1)
                self.state = 223
                self.match(ParaCParser.LeftParen)
                self.state = 224
                self.unaryExpression()
                self.state = 225
                self.match(ParaCParser.Comma)
                self.state = 226
                self.typeName()
                self.state = 227
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 229
                self.match(ParaCParser.T__2)
                self.state = 230
                self.match(ParaCParser.LeftParen)
                self.state = 231
                self.typeName()
                self.state = 232
                self.match(ParaCParser.Comma)
                self.state = 233
                self.unaryExpression()
                self.state = 234
                self.match(ParaCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(ParaCParser.LambdaBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunction" ):
                listener.enterLambdaFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunction" ):
                listener.exitLambdaFunction(self)




    def lambdaFunction(self):

        localctx = ParaCParser.LambdaFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdaFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(ParaCParser.LeftParen)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                self.state = 239
                self.parameterList()


            self.state = 242
            self.match(ParaCParser.RightParen)
            self.state = 243
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)


        def statementLambda(self):
            return self.getTypedRuleContext(ParaCParser.StatementLambdaContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = ParaCParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_lambdaBody)
        try:
            self.state = 247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.expressionLambda()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.statementLambda()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)




    def expressionLambda(self):

        localctx = ParaCParser.ExpressionLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 250
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_statementLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLambda" ):
                listener.enterStatementLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLambda" ):
                listener.exitStatementLambda(self)




    def statementLambda(self):

        localctx = ParaCParser.StatementLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 253
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(ParaCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(ParaCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = ParaCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(ParaCParser.Generic)
            self.state = 256
            self.match(ParaCParser.LeftParen)
            self.state = 257
            self.assignmentExpression()
            self.state = 258
            self.match(ParaCParser.Comma)
            self.state = 259
            self.genericAssocList()
            self.state = 260
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = ParaCParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.genericAssociation()
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 263
                self.match(ParaCParser.Comma)
                self.state = 264
                self.genericAssociation()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = ParaCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.state = 270
                self.typeName()
                pass
            elif token in [ParaCParser.Default]:
                self.state = 271
                self.match(ParaCParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 274
            self.match(ParaCParser.Colon)
            self.state = 275
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 277
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 278
                    self.match(ParaCParser.T__0)


                self.state = 281
                self.match(ParaCParser.LeftParen)
                self.state = 282
                self.typeName()
                self.state = 283
                self.match(ParaCParser.RightParen)
                self.state = 284
                self.match(ParaCParser.LeftBrace)
                self.state = 285
                self.initializerList()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 286
                    self.match(ParaCParser.Comma)


                self.state = 289
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 307
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 305
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.LeftBracket]:
                        self.state = 293
                        self.match(ParaCParser.LeftBracket)
                        self.state = 294
                        self.expression()
                        self.state = 295
                        self.match(ParaCParser.RightBracket)
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 297
                        self.match(ParaCParser.LeftParen)
                        self.state = 299
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                            self.state = 298
                            self.argumentExpressionList()


                        self.state = 301
                        self.match(ParaCParser.RightParen)
                        pass
                    elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                        self.state = 302
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 303
                        self.match(ParaCParser.Identifier)
                        pass
                    elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                        self.state = 304
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.assignmentExpression()
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 311
                self.match(ParaCParser.Comma)
                self.state = 312
                self.assignmentExpression()
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 318
                    _la = self._input.LA(1)
                    if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (ParaCParser.Sizeof - 46)) | (1 << (ParaCParser.PlusPlus - 46)) | (1 << (ParaCParser.MinusMinus - 46)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Spawn, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral]:
                self.state = 324
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 325
                self.unaryOperator()
                self.state = 326
                self.castOrConvertExpression(0)
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 328
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 329
                self.match(ParaCParser.LeftParen)
                self.state = 330
                self.typeName()
                self.state = 331
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 333
                self.match(ParaCParser.AndAnd)
                self.state = 334
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            _la = self._input.LA(1)
            if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (ParaCParser.Plus - 81)) | (1 << (ParaCParser.Minus - 81)) | (1 << (ParaCParser.Star - 81)) | (1 << (ParaCParser.And - 81)) | (1 << (ParaCParser.Not - 81)) | (1 << (ParaCParser.Tilde - 81)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOrConvertExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castOrConvertExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOrConvertExpression" ):
                listener.enterCastOrConvertExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOrConvertExpression" ):
                listener.exitCastOrConvertExpression(self)



    def castOrConvertExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.CastOrConvertExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_castOrConvertExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 340
                    self.match(ParaCParser.T__0)


                self.state = 343
                self.match(ParaCParser.LeftParen)
                self.state = 344
                self.typeName()
                self.state = 345
                self.match(ParaCParser.RightParen)
                self.state = 346
                self.castOrConvertExpression(4)
                pass

            elif la_ == 2:
                self.state = 348
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 349
                self.match(ParaCParser.DigitSequence)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.CastOrConvertExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_castOrConvertExpression)
                    self.state = 352
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 353
                    self.match(ParaCParser.As)
                    self.state = 354
                    self.typeName() 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castOrConvertExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastOrConvertExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.castOrConvertExpression(0)
            self.state = 365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 361
                    _la = self._input.LA(1)
                    if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (ParaCParser.Star - 85)) | (1 << (ParaCParser.Div - 85)) | (1 << (ParaCParser.Mod - 85)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 362
                    self.castOrConvertExpression(0) 
                self.state = 367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.multiplicativeExpression()
            self.state = 373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 369
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 370
                    self.multiplicativeExpression() 
                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.additiveExpression()
            self.state = 381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 377
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 378
                    self.additiveExpression() 
                self.state = 383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.shiftExpression()
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 385
                    _la = self._input.LA(1)
                    if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (ParaCParser.Less - 75)) | (1 << (ParaCParser.LessEqual - 75)) | (1 << (ParaCParser.Greater - 75)) | (1 << (ParaCParser.GreaterEqual - 75)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 386
                    self.shiftExpression() 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.relationalExpression()
            self.state = 397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 394
                    self.relationalExpression() 
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.equalityExpression()
            self.state = 405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401
                    self.match(ParaCParser.And)
                    self.state = 402
                    self.equalityExpression() 
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_exclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.andExpression()
            self.state = 413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 409
                    self.match(ParaCParser.Caret)
                    self.state = 410
                    self.andExpression() 
                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_inclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.exclusiveOrExpression()
            self.state = 421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 417
                    self.match(ParaCParser.Or)
                    self.state = 418
                    self.exclusiveOrExpression() 
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.inclusiveOrExpression()
            self.state = 429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 425
                    self.match(ParaCParser.AndAnd)
                    self.state = 426
                    self.inclusiveOrExpression() 
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_logicalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.logicalAndExpression()
            self.state = 437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 433
                    self.match(ParaCParser.OrOr)
                    self.state = 434
                    self.logicalAndExpression() 
                self.state = 439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.logicalOrExpression()
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 441
                self.match(ParaCParser.Question)
                self.state = 442
                self.expression()
                self.state = 443
                self.match(ParaCParser.Colon)
                self.state = 444
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignmentExpression)
        try:
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.unaryExpression()
                self.state = 450
                self.assignmentOperator()
                self.state = 451
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 453
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (ParaCParser.Assign - 101)) | (1 << (ParaCParser.StarAssign - 101)) | (1 << (ParaCParser.DivAssign - 101)) | (1 << (ParaCParser.ModAssign - 101)) | (1 << (ParaCParser.PlusAssign - 101)) | (1 << (ParaCParser.MinusAssign - 101)) | (1 << (ParaCParser.LeftShiftAssign - 101)) | (1 << (ParaCParser.RightShiftAssign - 101)) | (1 << (ParaCParser.AndAssign - 101)) | (1 << (ParaCParser.XorAssign - 101)) | (1 << (ParaCParser.OrAssign - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.assignmentExpression()
            self.state = 463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459
                    self.match(ParaCParser.Comma)
                    self.state = 460
                    self.assignmentExpression() 
                self.state = 465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.declarationSpecifiers()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Identifier - 69)))) != 0):
                    self.state = 469
                    self.initDeclaratorList()


                self.state = 472
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 477
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 480 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.entryPointSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 484
                self.typeSpecifier(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 485
                self.typeQualifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 486
                self.functionSpecifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 487
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.initDeclarator()
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 491
                self.match(ParaCParser.Comma)
                self.state = 492
                self.initDeclarator()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.declarator()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 499
                self.match(ParaCParser.Assign)
                self.state = 500
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryPointSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_entryPointSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryPointSpecifier" ):
                listener.enterEntryPointSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryPointSpecifier" ):
                listener.exitEntryPointSpecifier(self)




    def entryPointSpecifier(self):

        localctx = ParaCParser.EntryPointSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_entryPointSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(ParaCParser.Entry)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            _la = self._input.LA(1)
            if not(((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ParaCParser.Auto - 19)) | (1 << (ParaCParser.Extern - 19)) | (1 << (ParaCParser.Register - 19)) | (1 << (ParaCParser.Static - 19)) | (1 << (ParaCParser.Typedef - 19)) | (1 << (ParaCParser.ThreadLocal - 19)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def Lambda(self):
            return self.getToken(ParaCParser.Lambda, 0)

        def Less(self):
            return self.getToken(ParaCParser.Less, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def Greater(self):
            return self.getToken(ParaCParser.Greater, 0)

        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def Complex(self):
            return self.getToken(ParaCParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Typeof(self):
            return self.getToken(ParaCParser.Typeof, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool, ParaCParser.Complex]:
                self.state = 528
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.Void]:
                    self.state = 508
                    self.match(ParaCParser.Void)
                    pass
                elif token in [ParaCParser.Char]:
                    self.state = 509
                    self.match(ParaCParser.Char)
                    pass
                elif token in [ParaCParser.Short]:
                    self.state = 510
                    self.match(ParaCParser.Short)
                    pass
                elif token in [ParaCParser.Int]:
                    self.state = 511
                    self.match(ParaCParser.Int)
                    pass
                elif token in [ParaCParser.Status]:
                    self.state = 512
                    self.match(ParaCParser.Status)
                    pass
                elif token in [ParaCParser.Long]:
                    self.state = 513
                    self.match(ParaCParser.Long)
                    pass
                elif token in [ParaCParser.Float]:
                    self.state = 514
                    self.match(ParaCParser.Float)
                    pass
                elif token in [ParaCParser.Double]:
                    self.state = 515
                    self.match(ParaCParser.Double)
                    pass
                elif token in [ParaCParser.Signed]:
                    self.state = 516
                    self.match(ParaCParser.Signed)
                    pass
                elif token in [ParaCParser.Lambda]:
                    self.state = 517
                    self.match(ParaCParser.Lambda)
                    self.state = 518
                    self.match(ParaCParser.Less)
                    self.state = 519
                    self.parameterTypeList()
                    self.state = 520
                    self.match(ParaCParser.Greater)
                    pass
                elif token in [ParaCParser.Unsigned]:
                    self.state = 522
                    self.match(ParaCParser.Unsigned)
                    pass
                elif token in [ParaCParser.Bool]:
                    self.state = 523
                    self.match(ParaCParser.Bool)
                    pass
                elif token in [ParaCParser.Complex]:
                    self.state = 524
                    self.match(ParaCParser.Complex)
                    pass
                elif token in [ParaCParser.T__3]:
                    self.state = 525
                    self.match(ParaCParser.T__3)
                    pass
                elif token in [ParaCParser.T__4]:
                    self.state = 526
                    self.match(ParaCParser.T__4)
                    pass
                elif token in [ParaCParser.T__5]:
                    self.state = 527
                    self.match(ParaCParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ParaCParser.T__0]:
                self.state = 530
                self.match(ParaCParser.T__0)
                self.state = 531
                self.match(ParaCParser.LeftParen)
                self.state = 532
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 533
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 534
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 535
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 536
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 537
                self.typedefName()
                pass
            elif token in [ParaCParser.T__6, ParaCParser.Typeof]:
                self.state = 538
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__6 or _la==ParaCParser.Typeof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 539
                self.match(ParaCParser.LeftParen)
                self.state = 540
                self.constantExpression()
                self.state = 541
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 545
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 546
                    self.pointer() 
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def structDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 552
                self.structOrUnion()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 553
                    self.match(ParaCParser.Identifier)


                self.state = 556
                self.match(ParaCParser.LeftBrace)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or _la==ParaCParser.StaticAssert or _la==ParaCParser.Identifier:
                    self.state = 557
                    self.structDeclarationList()
                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 563
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.structOrUnion()
                self.state = 566
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 572
                    self.structDeclaration()

                else:
                    raise NoViableAltException(self)
                self.state = 575 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.specifierQualifierList()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Colon - 69)) | (1 << (ParaCParser.Identifier - 69)))) != 0):
                    self.state = 578
                    self.structDeclaratorList()


                self.state = 581
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 586
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 587
                self.typeQualifier()
                pass


            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 590
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.structDeclarator()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 594
                self.match(ParaCParser.Comma)
                self.state = 595
                self.structDeclarator()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Identifier - 69)))) != 0):
                    self.state = 602
                    self.declarator()


                self.state = 605
                self.match(ParaCParser.Colon)
                self.state = 606
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(ParaCParser.Enum)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 610
                    self.match(ParaCParser.Identifier)


                self.state = 613
                self.match(ParaCParser.LeftBrace)
                self.state = 614
                self.enumeratorList()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 615
                    self.match(ParaCParser.Comma)


                self.state = 618
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.match(ParaCParser.Enum)
                self.state = 621
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.enumerator()
            self.state = 629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 625
                    self.match(ParaCParser.Comma)
                    self.state = 626
                    self.enumerator() 
                self.state = 631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.enumerationConstant()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 633
                self.match(ParaCParser.Assign)
                self.state = 634
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(ParaCParser.Atomic)
            self.state = 640
            self.match(ParaCParser.LeftParen)
            self.state = 641
            self.typeName()
            self.state = 642
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ParaCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__7, ParaCParser.T__8, ParaCParser.Inline, ParaCParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                _la = self._input.LA(1)
                if not(((((_la - 8)) & ~0x3f) == 0 and ((1 << (_la - 8)) & ((1 << (ParaCParser.T__7 - 8)) | (1 << (ParaCParser.T__8 - 8)) | (1 << (ParaCParser.Inline - 8)) | (1 << (ParaCParser.Noreturn - 8)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.gccAttributeSpecifier()
                pass
            elif token in [ParaCParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 648
                self.match(ParaCParser.T__9)
                self.state = 649
                self.match(ParaCParser.LeftParen)
                self.state = 650
                self.match(ParaCParser.Identifier)
                self.state = 651
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Entry]:
                self.enterOuterAlt(localctx, 4)
                self.state = 652
                self.entryPointSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(ParaCParser.Alignas)
            self.state = 656
            self.match(ParaCParser.LeftParen)
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 657
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 658
                self.constantExpression()
                pass


            self.state = 661
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 663
                self.pointer()


            self.state = 666
            self.directDeclarator(0)
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 667
                    self.gccDeclaratorExtension() 
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 674
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 675
                self.match(ParaCParser.LeftParen)
                self.state = 676
                self.declarator()
                self.state = 677
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 679
                self.match(ParaCParser.Identifier)
                self.state = 680
                self.match(ParaCParser.Colon)
                self.state = 681
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 682
                self.match(ParaCParser.LeftParen)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 683
                    self.typeSpecifier(0)


                self.state = 686
                self.pointer()
                self.state = 687
                self.directDeclarator(0)
                self.state = 688
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 735
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 692
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 693
                        self.match(ParaCParser.LeftBracket)
                        self.state = 695
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 694
                            self.typeQualifierList()


                        self.state = 698
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                            self.state = 697
                            self.assignmentExpression()


                        self.state = 700
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 701
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 702
                        self.match(ParaCParser.LeftBracket)
                        self.state = 703
                        self.match(ParaCParser.Static)
                        self.state = 705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 704
                            self.typeQualifierList()


                        self.state = 707
                        self.assignmentExpression()
                        self.state = 708
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 710
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 711
                        self.match(ParaCParser.LeftBracket)
                        self.state = 712
                        self.typeQualifierList()
                        self.state = 713
                        self.match(ParaCParser.Static)
                        self.state = 714
                        self.assignmentExpression()
                        self.state = 715
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 717
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 718
                        self.match(ParaCParser.LeftBracket)
                        self.state = 720
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 719
                            self.typeQualifierList()


                        self.state = 722
                        self.match(ParaCParser.Star)
                        self.state = 723
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 724
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 725
                        self.match(ParaCParser.LeftParen)
                        self.state = 726
                        self.parameterTypeList()
                        self.state = 727
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 729
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 730
                        self.match(ParaCParser.LeftParen)
                        self.state = 732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 731
                            self.identifierList()


                        self.state = 734
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = ParaCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.match(ParaCParser.T__10)
                self.state = 741
                self.match(ParaCParser.LeftParen)
                self.state = 743 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 742
                    self.match(ParaCParser.StringLiteral)
                    self.state = 745 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ParaCParser.StringLiteral):
                        break

                self.state = 747
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = ParaCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(ParaCParser.T__11)
            self.state = 752
            self.match(ParaCParser.LeftParen)
            self.state = 753
            self.match(ParaCParser.LeftParen)
            self.state = 754
            self.gccAttributeList()
            self.state = 755
            self.match(ParaCParser.RightParen)
            self.state = 756
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = ParaCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.T__14) | (1 << ParaCParser.T__15) | (1 << ParaCParser.T__16) | (1 << ParaCParser.As) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Imaginary - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.LambdaStartBlock - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.Directive - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)))) != 0):
                self.state = 758
                self.gccAttribute()


            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 761
                self.match(ParaCParser.Comma)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.T__14) | (1 << ParaCParser.T__15) | (1 << ParaCParser.T__16) | (1 << ParaCParser.As) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Imaginary - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.LambdaStartBlock - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.Directive - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)))) != 0):
                    self.state = 762
                    self.gccAttribute()


                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = ParaCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.RightParen - 69)) | (1 << (ParaCParser.Comma - 69)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftParen:
                self.state = 771
                self.match(ParaCParser.LeftParen)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                    self.state = 772
                    self.argumentExpressionList()


                self.state = 775
                self.match(ParaCParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.T__14) | (1 << ParaCParser.T__15) | (1 << ParaCParser.T__16) | (1 << ParaCParser.As) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Imaginary - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.LambdaStartBlock - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Comma - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.Directive - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)))) != 0):
                self.state = 783
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__10, ParaCParser.T__11, ParaCParser.T__12, ParaCParser.T__13, ParaCParser.T__14, ParaCParser.T__15, ParaCParser.T__16, ParaCParser.As, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Generic, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.DecoratorSign, ParaCParser.LambdaStartBlock, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.AsmBlock, ParaCParser.Directive, ParaCParser.Whitespace, ParaCParser.Newline]:
                    self.state = 778
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [ParaCParser.LeftParen]:
                    self.state = 779
                    self.match(ParaCParser.LeftParen)
                    self.state = 780
                    self.nestedParenthesesBlock()
                    self.state = 781
                    self.match(ParaCParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 788
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 790
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 789
                        self.typeQualifierList()



                else:
                    raise NoViableAltException(self)
                self.state = 794 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 796
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 799 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.parameterList()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 802
                self.match(ParaCParser.Comma)
                self.state = 803
                self.match(ParaCParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.parameterDeclaration()
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 807
                    self.match(ParaCParser.Comma)
                    self.state = 808
                    self.parameterDeclaration() 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AbstractParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractParameterDeclaration" ):
                listener.enterAbstractParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractParameterDeclaration" ):
                listener.exitAbstractParameterDeclaration(self)


    class RegularParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularParameterDeclaration" ):
                listener.enterRegularParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularParameterDeclaration" ):
                listener.exitRegularParameterDeclaration(self)



    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.RegularParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.declarationSpecifiers()
                self.state = 815
                self.declarator()
                pass

            elif la_ == 2:
                localctx = ParaCParser.AbstractParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.declarationSpecifiers()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.LeftBracket - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)))) != 0):
                    self.state = 818
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(ParaCParser.Identifier)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 824
                self.match(ParaCParser.Comma)
                self.state = 825
                self.match(ParaCParser.Identifier)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.specifierQualifierList()
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 832
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 836
                    self.pointer()


                self.state = 839
                self.directAbstractDeclarator(0)
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 840
                        self.gccDeclaratorExtension() 
                    self.state = 845
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 849
                self.match(ParaCParser.LeftParen)
                self.state = 850
                self.abstractDeclarator()
                self.state = 851
                self.match(ParaCParser.RightParen)
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 852
                        self.gccDeclaratorExtension() 
                    self.state = 857
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass

            elif la_ == 2:
                self.state = 858
                self.match(ParaCParser.LeftBracket)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 859
                    self.typeQualifierList()


                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                    self.state = 862
                    self.assignmentExpression()


                self.state = 865
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 866
                self.match(ParaCParser.LeftBracket)
                self.state = 867
                self.match(ParaCParser.Static)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 868
                    self.typeQualifierList()


                self.state = 871
                self.assignmentExpression()
                self.state = 872
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 874
                self.match(ParaCParser.LeftBracket)
                self.state = 875
                self.typeQualifierList()
                self.state = 876
                self.match(ParaCParser.Static)
                self.state = 877
                self.assignmentExpression()
                self.state = 878
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 880
                self.match(ParaCParser.LeftBracket)
                self.state = 881
                self.match(ParaCParser.Star)
                self.state = 882
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 883
                self.match(ParaCParser.LeftParen)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                    self.state = 884
                    self.parameterTypeList()


                self.state = 887
                self.match(ParaCParser.RightParen)
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 888
                        self.gccDeclaratorExtension() 
                    self.state = 893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 937
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 896
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 897
                        self.match(ParaCParser.LeftBracket)
                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 898
                            self.typeQualifierList()


                        self.state = 902
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                            self.state = 901
                            self.assignmentExpression()


                        self.state = 904
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 905
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 906
                        self.match(ParaCParser.LeftBracket)
                        self.state = 907
                        self.match(ParaCParser.Static)
                        self.state = 909
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 908
                            self.typeQualifierList()


                        self.state = 911
                        self.assignmentExpression()
                        self.state = 912
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 914
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 915
                        self.match(ParaCParser.LeftBracket)
                        self.state = 916
                        self.typeQualifierList()
                        self.state = 917
                        self.match(ParaCParser.Static)
                        self.state = 918
                        self.assignmentExpression()
                        self.state = 919
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 921
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 922
                        self.match(ParaCParser.LeftBracket)
                        self.state = 923
                        self.match(ParaCParser.Star)
                        self.state = 924
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 925
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 926
                        self.match(ParaCParser.LeftParen)
                        self.state = 928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                            self.state = 927
                            self.parameterTypeList()


                        self.state = 930
                        self.match(ParaCParser.RightParen)
                        self.state = 934
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 931
                                self.gccDeclaratorExtension() 
                            self.state = 936
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                        pass

             
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Alignof, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(ParaCParser.LeftBrace)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                    self.state = 946
                    self.initializerList()


                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 949
                    self.match(ParaCParser.Comma)


                self.state = 952
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 955
                self.designation()


            self.state = 958
            self.initializer()
            self.state = 966
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self.match(ParaCParser.Comma)
                    self.state = 961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 960
                        self.designation()


                    self.state = 963
                    self.initializer() 
                self.state = 968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.designatorList()
            self.state = 970
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 972
                self.designator()
                self.state = 975 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_designator)
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.match(ParaCParser.LeftBracket)
                self.state = 978
                self.constantExpression()
                self.state = 979
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 981
                self.match(ParaCParser.Dot)
                self.state = 982
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(ParaCParser.StaticAssert)
            self.state = 986
            self.match(ParaCParser.LeftParen)
            self.state = 987
            self.constantExpression()
            self.state = 988
            self.match(ParaCParser.Comma)
            self.state = 990 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 989
                self.match(ParaCParser.StringLiteral)
                self.state = 992 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 994
            self.match(ParaCParser.RightParen)
            self.state = 995
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def tryExceptStatement(self):
            return self.getTypedRuleContext(ParaCParser.TryExceptStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 999
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1000
                self.tryExceptStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1001
                self.selectionStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1002
                self.iterationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1003
                self.jumpStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1004
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__10 or _la==ParaCParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1005
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__13 or _la==ParaCParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1006
                self.match(ParaCParser.LeftParen)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                    self.state = 1007
                    self.logicalOrExpression()
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 1008
                        self.match(ParaCParser.Comma)
                        self.state = 1009
                        self.logicalOrExpression()
                        self.state = 1014
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 1017
                    self.match(ParaCParser.Colon)
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                        self.state = 1018
                        self.logicalOrExpression()
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 1019
                            self.match(ParaCParser.Comma)
                            self.state = 1020
                            self.logicalOrExpression()
                            self.state = 1025
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1033
                self.match(ParaCParser.RightParen)
                self.state = 1034
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_labeledStatement)
        try:
            self.state = 1048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.match(ParaCParser.Identifier)
                self.state = 1038
                self.match(ParaCParser.Colon)
                self.state = 1039
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.match(ParaCParser.Case)
                self.state = 1041
                self.constantExpression()
                self.state = 1042
                self.match(ParaCParser.Colon)
                self.state = 1043
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1045
                self.match(ParaCParser.Default)
                self.state = 1046
                self.match(ParaCParser.Colon)
                self.state = 1047
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(ParaCParser.LeftBrace)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__14) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                self.state = 1051
                self.blockItemList()


            self.state = 1054
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1056
                self.blockItem()
                self.state = 1059 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__14) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockItem)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                self.state = 1065
                self.expression()


            self.state = 1068
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def exceptBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExceptBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExceptBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(ParaCParser.FinallyBlockContext,0)


        def elseBlock(self):
            return self.getTypedRuleContext(ParaCParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_tryExceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExceptStatement" ):
                listener.enterTryExceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExceptStatement" ):
                listener.exitTryExceptStatement(self)




    def tryExceptStatement(self):

        localctx = ParaCParser.TryExceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tryExceptStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(ParaCParser.T__14)
            self.state = 1071
            self.compoundStatement()
            self.state = 1073 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1072
                self.exceptBlock()
                self.state = 1075 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.T__15):
                    break

            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1077
                self.finallyBlock()
                self.state = 1079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1078
                    self.elseBlock()



            elif la_ == 2:
                self.state = 1081
                self.elseBlock()
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__16:
                    self.state = 1082
                    self.finallyBlock()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = ParaCParser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exceptBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(ParaCParser.T__15)
            self.state = 1088
            self.match(ParaCParser.LeftParen)
            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1089
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1090
                self.identifierList()
                pass


            self.state = 1093
            self.match(ParaCParser.RightParen)
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.As:
                self.state = 1094
                self.match(ParaCParser.As)
                self.state = 1095
                self.match(ParaCParser.Identifier)


            self.state = 1098
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = ParaCParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(ParaCParser.T__16)
            self.state = 1101
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)




    def elseBlock(self):

        localctx = ParaCParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elseBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(ParaCParser.Else)
            self.state = 1104
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selectionStatement)
        try:
            self.state = 1121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.match(ParaCParser.If)
                self.state = 1107
                self.match(ParaCParser.LeftParen)
                self.state = 1108
                self.expression()
                self.state = 1109
                self.match(ParaCParser.RightParen)
                self.state = 1110
                self.statement()
                self.state = 1113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1111
                    self.match(ParaCParser.Else)
                    self.state = 1112
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.match(ParaCParser.Switch)
                self.state = 1116
                self.match(ParaCParser.LeftParen)
                self.state = 1117
                self.expression()
                self.state = 1118
                self.match(ParaCParser.RightParen)
                self.state = 1119
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iterationStatement)
        try:
            self.state = 1143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.match(ParaCParser.While)
                self.state = 1124
                self.match(ParaCParser.LeftParen)
                self.state = 1125
                self.expression()
                self.state = 1126
                self.match(ParaCParser.RightParen)
                self.state = 1127
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.match(ParaCParser.Do)
                self.state = 1130
                self.statement()
                self.state = 1131
                self.match(ParaCParser.While)
                self.state = 1132
                self.match(ParaCParser.LeftParen)
                self.state = 1133
                self.expression()
                self.state = 1134
                self.match(ParaCParser.RightParen)
                self.state = 1135
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1137
                self.match(ParaCParser.For)
                self.state = 1138
                self.match(ParaCParser.LeftParen)
                self.state = 1139
                self.forCondition()
                self.state = 1140
                self.match(ParaCParser.RightParen)
                self.state = 1141
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Semi)
            else:
                return self.getToken(ParaCParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1145
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                    self.state = 1146
                    self.expression()


                pass


            self.state = 1151
            self.match(ParaCParser.Semi)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                self.state = 1152
                self.forExpression()


            self.state = 1155
            self.match(ParaCParser.Semi)
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                self.state = 1156
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.declarationSpecifiers()
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Identifier - 69)))) != 0):
                self.state = 1160
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.assignmentExpression()
            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1164
                self.match(ParaCParser.Comma)
                self.state = 1165
                self.assignmentExpression()
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1171
                self.match(ParaCParser.Goto)
                self.state = 1172
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1173
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1174
                self.match(ParaCParser.Return)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                    self.state = 1175
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1178
                self.match(ParaCParser.Goto)
                self.state = 1179
                self.unaryExpression()
                pass


            self.state = 1182
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.LeftParen - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.Caret - 66)) | (1 << (ParaCParser.DecoratorSign - 66)) | (1 << (ParaCParser.Semi - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                self.state = 1184
                self.translationUnit()


            self.state = 1187
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalItemContext,i)


        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Semi)
            else:
                return self.getToken(ParaCParser.Semi, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftParen, ParaCParser.Star, ParaCParser.Caret, ParaCParser.DecoratorSign, ParaCParser.Identifier]:
                    self.state = 1189
                    self.externalItem()
                    pass
                elif token in [ParaCParser.Semi]:
                    self.state = 1190
                    self.match(ParaCParser.Semi)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.LeftParen - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.Caret - 66)) | (1 << (ParaCParser.DecoratorSign - 66)) | (1 << (ParaCParser.Semi - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_externalItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalFunctionDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunctionDefinition" ):
                listener.enterExternalFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunctionDefinition" ):
                listener.exitExternalFunctionDefinition(self)


    class ExternalDeclarationContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)


    class ExternalExtTaskDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionTaskDefinition(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalExtTaskDefinition" ):
                listener.enterExternalExtTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalExtTaskDefinition" ):
                listener.exitExternalExtTaskDefinition(self)



    def externalItem(self):

        localctx = ParaCParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalItem)
        try:
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.ExternalFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.functionDefinition()
                pass

            elif la_ == 2:
                localctx = ParaCParser.ExternalDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.declaration()
                pass

            elif la_ == 3:
                localctx = ParaCParser.ExternalExtTaskDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1197
                self.extensionTaskDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StandardFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)

        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFunctionDefinition" ):
                listener.enterStandardFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFunctionDefinition" ):
                listener.exitStandardFunctionDefinition(self)


    class SimpleFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionDefinition" ):
                listener.enterSimpleFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionDefinition" ):
                listener.exitSimpleFunctionDefinition(self)



    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.StandardFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1200
                self.functionDeclarationSpecifiers()
                self.state = 1201
                self.declarator()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                    self.state = 1202
                    self.declarationList()


                self.state = 1205
                self.compoundStatement()
                pass

            elif la_ == 2:
                localctx = ParaCParser.SimpleFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.functionDeclarationSpecifiers()
                self.state = 1208
                self.declarator()
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                    self.state = 1209
                    self.declarationList()


                self.state = 1212
                self.expressionLambda()
                self.state = 1213
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decoratorSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DecoratorSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DecoratorSpecifierContext,i)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationSpecifiers" ):
                listener.enterFunctionDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationSpecifiers" ):
                listener.exitFunctionDeclarationSpecifiers(self)




    def functionDeclarationSpecifiers(self):

        localctx = ParaCParser.FunctionDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_functionDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.DecoratorSign:
                self.state = 1217
                self.decoratorSpecifier()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1223
                self.declarationSpecifiers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecoratorSign(self):
            return self.getToken(ParaCParser.DecoratorSign, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_decoratorSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorSpecifier" ):
                listener.enterDecoratorSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorSpecifier" ):
                listener.exitDecoratorSpecifier(self)




    def decoratorSpecifier(self):

        localctx = ParaCParser.DecoratorSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_decoratorSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(ParaCParser.DecoratorSign)
            self.state = 1227
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExtensionTask(self):
            return self.getToken(ParaCParser.ExtensionTask, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def extensionTaskParameterList(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterListContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskDefinition" ):
                listener.enterExtensionTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskDefinition" ):
                listener.exitExtensionTaskDefinition(self)




    def extensionTaskDefinition(self):

        localctx = ParaCParser.ExtensionTaskDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionTaskDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(ParaCParser.ExtensionTask)
            self.state = 1230
            self.match(ParaCParser.Identifier)
            self.state = 1231
            self.directDeclarator(0)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                self.state = 1232
                self.declarationList()


            self.state = 1235
            self.extensionTaskParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def extensionTaskParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExtensionTaskParameterContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameterList" ):
                listener.enterExtensionTaskParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameterList" ):
                listener.exitExtensionTaskParameterList(self)




    def extensionTaskParameterList(self):

        localctx = ParaCParser.ExtensionTaskParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_extensionTaskParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(ParaCParser.LeftBrace)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Identifier:
                self.state = 1238
                self.extensionTaskParameter()
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Comma:
                    self.state = 1239
                    self.match(ParaCParser.Comma)
                    self.state = 1240
                    self.extensionTaskParameter()
                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1248
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameter" ):
                listener.enterExtensionTaskParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameter" ):
                listener.exitExtensionTaskParameter(self)




    def extensionTaskParameter(self):

        localctx = ParaCParser.ExtensionTaskParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_extensionTaskParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(ParaCParser.Identifier)
            self.state = 1251
            self.match(ParaCParser.Colon)
            self.state = 1252
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1254
                self.declaration()
                self.state = 1257 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.castOrConvertExpression_sempred
        self._predicates[35] = self.typeSpecifier_sempred
        self._predicates[52] = self.directDeclarator_sempred
        self._predicates[66] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def castOrConvertExpression_sempred(self, localctx:CastOrConvertExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




