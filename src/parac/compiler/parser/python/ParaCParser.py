# Generated from ./grammar/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\177")
        buf.write("\u0d5e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\3\2")
        buf.write("\3\2\7\2\u00d0\n\2\f\2\16\2\u00d3\13\2\3\2\3\2\3\2\6\2")
        buf.write("\u00d8\n\2\r\2\16\2\u00d9\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\5\2\u00e3\n\2\3\2\7\2\u00e6\n\2\f\2\16\2\u00e9\13\2\3")
        buf.write("\2\3\2\7\2\u00ed\n\2\f\2\16\2\u00f0\13\2\3\2\3\2\7\2\u00f4")
        buf.write("\n\2\f\2\16\2\u00f7\13\2\3\2\3\2\3\2\3\2\7\2\u00fd\n\2")
        buf.write("\f\2\16\2\u0100\13\2\3\2\3\2\7\2\u0104\n\2\f\2\16\2\u0107")
        buf.write("\13\2\3\2\3\2\7\2\u010b\n\2\f\2\16\2\u010e\13\2\3\2\3")
        buf.write("\2\7\2\u0112\n\2\f\2\16\2\u0115\13\2\3\2\3\2\7\2\u0119")
        buf.write("\n\2\f\2\16\2\u011c\13\2\3\2\3\2\3\2\3\2\7\2\u0122\n\2")
        buf.write("\f\2\16\2\u0125\13\2\3\2\3\2\7\2\u0129\n\2\f\2\16\2\u012c")
        buf.write("\13\2\3\2\3\2\7\2\u0130\n\2\f\2\16\2\u0133\13\2\3\2\3")
        buf.write("\2\7\2\u0137\n\2\f\2\16\2\u013a\13\2\3\2\3\2\7\2\u013e")
        buf.write("\n\2\f\2\16\2\u0141\13\2\3\2\3\2\5\2\u0145\n\2\3\3\3\3")
        buf.write("\7\3\u0149\n\3\f\3\16\3\u014c\13\3\3\3\5\3\u014f\n\3\3")
        buf.write("\3\7\3\u0152\n\3\f\3\16\3\u0155\13\3\3\3\3\3\7\3\u0159")
        buf.write("\n\3\f\3\16\3\u015c\13\3\3\3\3\3\3\4\3\4\5\4\u0162\n\4")
        buf.write("\3\5\3\5\7\5\u0166\n\5\f\5\16\5\u0169\13\5\3\5\3\5\3\6")
        buf.write("\3\6\7\6\u016f\n\6\f\6\16\6\u0172\13\6\3\6\3\6\3\7\3\7")
        buf.write("\7\7\u0178\n\7\f\7\16\7\u017b\13\7\3\7\3\7\7\7\u017f\n")
        buf.write("\7\f\7\16\7\u0182\13\7\3\7\3\7\7\7\u0186\n\7\f\7\16\7")
        buf.write("\u0189\13\7\3\7\3\7\7\7\u018d\n\7\f\7\16\7\u0190\13\7")
        buf.write("\3\7\3\7\7\7\u0194\n\7\f\7\16\7\u0197\13\7\3\7\3\7\3\b")
        buf.write("\3\b\7\b\u019d\n\b\f\b\16\b\u01a0\13\b\3\b\3\b\7\b\u01a4")
        buf.write("\n\b\f\b\16\b\u01a7\13\b\3\b\3\b\7\b\u01ab\n\b\f\b\16")
        buf.write("\b\u01ae\13\b\7\b\u01b0\n\b\f\b\16\b\u01b3\13\b\3\t\3")
        buf.write("\t\5\t\u01b7\n\t\3\t\7\t\u01ba\n\t\f\t\16\t\u01bd\13\t")
        buf.write("\3\t\3\t\7\t\u01c1\n\t\f\t\16\t\u01c4\13\t\3\t\3\t\3\n")
        buf.write("\3\n\5\n\u01ca\n\n\3\n\7\n\u01cd\n\n\f\n\16\n\u01d0\13")
        buf.write("\n\3\n\3\n\7\n\u01d4\n\n\f\n\16\n\u01d7\13\n\3\n\3\n\7")
        buf.write("\n\u01db\n\n\f\n\16\n\u01de\13\n\3\n\3\n\7\n\u01e2\n\n")
        buf.write("\f\n\16\n\u01e5\13\n\3\n\3\n\7\n\u01e9\n\n\f\n\16\n\u01ec")
        buf.write("\13\n\3\n\3\n\7\n\u01f0\n\n\f\n\16\n\u01f3\13\n\3\n\5")
        buf.write("\n\u01f6\n\n\3\n\7\n\u01f9\n\n\f\n\16\n\u01fc\13\n\3\n")
        buf.write("\3\n\5\n\u0200\n\n\3\n\7\n\u0203\n\n\f\n\16\n\u0206\13")
        buf.write("\n\3\n\3\n\7\n\u020a\n\n\f\n\16\n\u020d\13\n\3\n\3\n\7")
        buf.write("\n\u0211\n\n\f\n\16\n\u0214\13\n\3\n\3\n\3\n\3\n\7\n\u021a")
        buf.write("\n\n\f\n\16\n\u021d\13\n\3\n\5\n\u0220\n\n\3\n\7\n\u0223")
        buf.write("\n\n\f\n\16\n\u0226\13\n\3\n\3\n\3\n\7\n\u022b\n\n\f\n")
        buf.write("\16\n\u022e\13\n\3\n\3\n\7\n\u0232\n\n\f\n\16\n\u0235")
        buf.write("\13\n\3\13\3\13\7\13\u0239\n\13\f\13\16\13\u023c\13\13")
        buf.write("\3\13\3\13\7\13\u0240\n\13\f\13\16\13\u0243\13\13\3\13")
        buf.write("\3\13\7\13\u0247\n\13\f\13\16\13\u024a\13\13\7\13\u024c")
        buf.write("\n\13\f\13\16\13\u024f\13\13\3\f\7\f\u0252\n\f\f\f\16")
        buf.write("\f\u0255\13\f\3\f\7\f\u0258\n\f\f\f\16\f\u025b\13\f\3")
        buf.write("\f\3\f\3\f\7\f\u0260\n\f\f\f\16\f\u0263\13\f\3\f\3\f\3")
        buf.write("\f\3\f\7\f\u0269\n\f\f\f\16\f\u026c\13\f\3\f\3\f\7\f\u0270")
        buf.write("\n\f\f\f\16\f\u0273\13\f\3\f\3\f\7\f\u0277\n\f\f\f\16")
        buf.write("\f\u027a\13\f\3\f\3\f\3\f\3\f\7\f\u0280\n\f\f\f\16\f\u0283")
        buf.write("\13\f\3\f\5\f\u0286\n\f\3\r\3\r\3\16\3\16\5\16\u028c\n")
        buf.write("\16\3\16\7\16\u028f\n\16\f\16\16\16\u0292\13\16\3\16\3")
        buf.write("\16\7\16\u0296\n\16\f\16\16\16\u0299\13\16\3\16\3\16\7")
        buf.write("\16\u029d\n\16\f\16\16\16\u02a0\13\16\3\16\3\16\7\16\u02a4")
        buf.write("\n\16\f\16\16\16\u02a7\13\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u02ad\n\16\3\16\3\16\7\16\u02b1\n\16\f\16\16\16\u02b4")
        buf.write("\13\16\3\16\3\16\7\16\u02b8\n\16\f\16\16\16\u02bb\13\16")
        buf.write("\3\16\7\16\u02be\n\16\f\16\16\16\u02c1\13\16\3\17\3\17")
        buf.write("\7\17\u02c5\n\17\f\17\16\17\u02c8\13\17\3\17\3\17\7\17")
        buf.write("\u02cc\n\17\f\17\16\17\u02cf\13\17\3\17\3\17\7\17\u02d3")
        buf.write("\n\17\f\17\16\17\u02d6\13\17\7\17\u02d8\n\17\f\17\16\17")
        buf.write("\u02db\13\17\3\20\3\20\7\20\u02df\n\20\f\20\16\20\u02e2")
        buf.write("\13\20\3\20\3\20\7\20\u02e6\n\20\f\20\16\20\u02e9\13\20")
        buf.write("\3\20\3\20\7\20\u02ed\n\20\f\20\16\20\u02f0\13\20\7\20")
        buf.write("\u02f2\n\20\f\20\16\20\u02f5\13\20\3\21\3\21\7\21\u02f9")
        buf.write("\n\21\f\21\16\21\u02fc\13\21\3\21\3\21\7\21\u0300\n\21")
        buf.write("\f\21\16\21\u0303\13\21\3\21\3\21\7\21\u0307\n\21\f\21")
        buf.write("\16\21\u030a\13\21\7\21\u030c\n\21\f\21\16\21\u030f\13")
        buf.write("\21\3\22\3\22\7\22\u0313\n\22\f\22\16\22\u0316\13\22\3")
        buf.write("\22\3\22\7\22\u031a\n\22\f\22\16\22\u031d\13\22\3\22\3")
        buf.write("\22\7\22\u0321\n\22\f\22\16\22\u0324\13\22\7\22\u0326")
        buf.write("\n\22\f\22\16\22\u0329\13\22\3\23\3\23\7\23\u032d\n\23")
        buf.write("\f\23\16\23\u0330\13\23\3\23\3\23\7\23\u0334\n\23\f\23")
        buf.write("\16\23\u0337\13\23\3\23\3\23\7\23\u033b\n\23\f\23\16\23")
        buf.write("\u033e\13\23\7\23\u0340\n\23\f\23\16\23\u0343\13\23\3")
        buf.write("\24\3\24\7\24\u0347\n\24\f\24\16\24\u034a\13\24\3\24\3")
        buf.write("\24\7\24\u034e\n\24\f\24\16\24\u0351\13\24\3\24\3\24\7")
        buf.write("\24\u0355\n\24\f\24\16\24\u0358\13\24\7\24\u035a\n\24")
        buf.write("\f\24\16\24\u035d\13\24\3\25\3\25\7\25\u0361\n\25\f\25")
        buf.write("\16\25\u0364\13\25\3\25\3\25\7\25\u0368\n\25\f\25\16\25")
        buf.write("\u036b\13\25\3\25\3\25\7\25\u036f\n\25\f\25\16\25\u0372")
        buf.write("\13\25\7\25\u0374\n\25\f\25\16\25\u0377\13\25\3\26\3\26")
        buf.write("\7\26\u037b\n\26\f\26\16\26\u037e\13\26\3\26\3\26\7\26")
        buf.write("\u0382\n\26\f\26\16\26\u0385\13\26\3\26\3\26\7\26\u0389")
        buf.write("\n\26\f\26\16\26\u038c\13\26\7\26\u038e\n\26\f\26\16\26")
        buf.write("\u0391\13\26\3\27\3\27\7\27\u0395\n\27\f\27\16\27\u0398")
        buf.write("\13\27\3\27\3\27\7\27\u039c\n\27\f\27\16\27\u039f\13\27")
        buf.write("\3\27\3\27\7\27\u03a3\n\27\f\27\16\27\u03a6\13\27\7\27")
        buf.write("\u03a8\n\27\f\27\16\27\u03ab\13\27\3\30\3\30\7\30\u03af")
        buf.write("\n\30\f\30\16\30\u03b2\13\30\3\30\3\30\7\30\u03b6\n\30")
        buf.write("\f\30\16\30\u03b9\13\30\3\30\3\30\7\30\u03bd\n\30\f\30")
        buf.write("\16\30\u03c0\13\30\7\30\u03c2\n\30\f\30\16\30\u03c5\13")
        buf.write("\30\3\31\3\31\7\31\u03c9\n\31\f\31\16\31\u03cc\13\31\3")
        buf.write("\31\3\31\7\31\u03d0\n\31\f\31\16\31\u03d3\13\31\3\31\3")
        buf.write("\31\7\31\u03d7\n\31\f\31\16\31\u03da\13\31\3\31\3\31\7")
        buf.write("\31\u03de\n\31\f\31\16\31\u03e1\13\31\3\31\3\31\7\31\u03e5")
        buf.write("\n\31\f\31\16\31\u03e8\13\31\5\31\u03ea\n\31\3\32\3\32")
        buf.write("\3\32\7\32\u03ef\n\32\f\32\16\32\u03f2\13\32\3\32\3\32")
        buf.write("\7\32\u03f6\n\32\f\32\16\32\u03f9\13\32\3\32\3\32\3\32")
        buf.write("\5\32\u03fe\n\32\3\33\3\33\3\34\3\34\7\34\u0404\n\34\f")
        buf.write("\34\16\34\u0407\13\34\3\34\3\34\7\34\u040b\n\34\f\34\16")
        buf.write("\34\u040e\13\34\3\34\3\34\7\34\u0412\n\34\f\34\16\34\u0415")
        buf.write("\13\34\7\34\u0417\n\34\f\34\16\34\u041a\13\34\3\35\3\35")
        buf.write("\3\36\3\36\7\36\u0420\n\36\f\36\16\36\u0423\13\36\3\36")
        buf.write("\5\36\u0426\n\36\3\36\3\36\3\36\5\36\u042b\n\36\3\37\3")
        buf.write("\37\7\37\u042f\n\37\f\37\16\37\u0432\13\37\6\37\u0434")
        buf.write("\n\37\r\37\16\37\u0435\3 \3 \3 \3 \3 \3 \5 \u043e\n \3")
        buf.write("!\3!\7!\u0442\n!\f!\16!\u0445\13!\3!\3!\7!\u0449\n!\f")
        buf.write("!\16!\u044c\13!\3!\3!\7!\u0450\n!\f!\16!\u0453\13!\7!")
        buf.write("\u0455\n!\f!\16!\u0458\13!\3\"\3\"\7\"\u045c\n\"\f\"\16")
        buf.write("\"\u045f\13\"\3\"\3\"\7\"\u0463\n\"\f\"\16\"\u0466\13")
        buf.write("\"\3\"\3\"\7\"\u046a\n\"\f\"\16\"\u046d\13\"\5\"\u046f")
        buf.write("\n\"\3#\3#\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\7")
        buf.write("%\u0481\n%\f%\16%\u0484\13%\3%\3%\7%\u0488\n%\f%\16%\u048b")
        buf.write("\13%\3%\3%\7%\u048f\n%\f%\16%\u0492\13%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\5%\u049c\n%\3%\3%\7%\u04a0\n%\f%\16%\u04a3")
        buf.write("\13%\3%\3%\7%\u04a7\n%\f%\16%\u04aa\13%\3%\3%\7%\u04ae")
        buf.write("\n%\f%\16%\u04b1\13%\3%\3%\3%\3%\3%\3%\3%\7%\u04ba\n%")
        buf.write("\f%\16%\u04bd\13%\3%\3%\7%\u04c1\n%\f%\16%\u04c4\13%\3")
        buf.write("%\3%\7%\u04c8\n%\f%\16%\u04cb\13%\3%\3%\5%\u04cf\n%\3")
        buf.write("%\3%\7%\u04d3\n%\f%\16%\u04d6\13%\3%\7%\u04d9\n%\f%\16")
        buf.write("%\u04dc\13%\3&\3&\7&\u04e0\n&\f&\16&\u04e3\13&\3&\3&\7")
        buf.write("&\u04e7\n&\f&\16&\u04ea\13&\5&\u04ec\n&\3&\3&\7&\u04f0")
        buf.write("\n&\f&\16&\u04f3\13&\3&\7&\u04f6\n&\f&\16&\u04f9\13&\3")
        buf.write("&\7&\u04fc\n&\f&\16&\u04ff\13&\3&\3&\3&\3&\7&\u0505\n")
        buf.write("&\f&\16&\u0508\13&\3&\3&\5&\u050c\n&\3\'\3\'\3(\7(\u0511")
        buf.write("\n(\f(\16(\u0514\13(\3(\3(\7(\u0518\n(\f(\16(\u051b\13")
        buf.write("(\6(\u051d\n(\r(\16(\u051e\3)\3)\7)\u0523\n)\f)\16)\u0526")
        buf.write("\13)\3)\5)\u0529\n)\3)\3)\3)\5)\u052e\n)\3*\3*\5*\u0532")
        buf.write("\n*\3*\7*\u0535\n*\f*\16*\u0538\13*\3*\5*\u053b\n*\3+")
        buf.write("\3+\7+\u053f\n+\f+\16+\u0542\13+\3+\3+\7+\u0546\n+\f+")
        buf.write("\16+\u0549\13+\3+\7+\u054c\n+\f+\16+\u054f\13+\3,\3,\5")
        buf.write(",\u0553\n,\3,\7,\u0556\n,\f,\16,\u0559\13,\3,\3,\7,\u055d")
        buf.write("\n,\f,\16,\u0560\13,\3,\5,\u0563\n,\3-\3-\7-\u0567\n-")
        buf.write("\f-\16-\u056a\13-\3-\5-\u056d\n-\3-\7-\u0570\n-\f-\16")
        buf.write("-\u0573\13-\3-\3-\7-\u0577\n-\f-\16-\u057a\13-\3-\3-\7")
        buf.write("-\u057e\n-\f-\16-\u0581\13-\3-\5-\u0584\n-\3-\7-\u0587")
        buf.write("\n-\f-\16-\u058a\13-\3-\3-\3-\3-\7-\u0590\n-\f-\16-\u0593")
        buf.write("\13-\3-\5-\u0596\n-\3.\3.\7.\u059a\n.\f.\16.\u059d\13")
        buf.write(".\3.\3.\7.\u05a1\n.\f.\16.\u05a4\13.\3.\3.\7.\u05a8\n")
        buf.write(".\f.\16.\u05ab\13.\7.\u05ad\n.\f.\16.\u05b0\13.\3/\3/")
        buf.write("\7/\u05b4\n/\f/\16/\u05b7\13/\3/\3/\7/\u05bb\n/\f/\16")
        buf.write("/\u05be\13/\3/\3/\7/\u05c2\n/\f/\16/\u05c5\13/\5/\u05c7")
        buf.write("\n/\3\60\3\60\3\61\3\61\7\61\u05cd\n\61\f\61\16\61\u05d0")
        buf.write("\13\61\3\61\3\61\7\61\u05d4\n\61\f\61\16\61\u05d7\13\61")
        buf.write("\3\61\3\61\7\61\u05db\n\61\f\61\16\61\u05de\13\61\3\61")
        buf.write("\3\61\7\61\u05e2\n\61\f\61\16\61\u05e5\13\61\3\62\3\62")
        buf.write("\3\63\3\63\3\63\3\63\7\63\u05ed\n\63\f\63\16\63\u05f0")
        buf.write("\13\63\3\63\3\63\7\63\u05f4\n\63\f\63\16\63\u05f7\13\63")
        buf.write("\3\63\3\63\7\63\u05fb\n\63\f\63\16\63\u05fe\13\63\3\63")
        buf.write("\3\63\5\63\u0602\n\63\3\64\3\64\7\64\u0606\n\64\f\64\16")
        buf.write("\64\u0609\13\64\3\64\3\64\7\64\u060d\n\64\f\64\16\64\u0610")
        buf.write("\13\64\3\64\3\64\5\64\u0614\n\64\3\64\7\64\u0617\n\64")
        buf.write("\f\64\16\64\u061a\13\64\3\64\3\64\3\65\5\65\u061f\n\65")
        buf.write("\3\65\7\65\u0622\n\65\f\65\16\65\u0625\13\65\3\65\3\65")
        buf.write("\7\65\u0629\n\65\f\65\16\65\u062c\13\65\3\65\7\65\u062f")
        buf.write("\n\65\f\65\16\65\u0632\13\65\3\66\3\66\3\66\3\66\7\66")
        buf.write("\u0638\n\66\f\66\16\66\u063b\13\66\3\66\3\66\7\66\u063f")
        buf.write("\n\66\f\66\16\66\u0642\13\66\3\66\3\66\3\66\3\66\7\66")
        buf.write("\u0648\n\66\f\66\16\66\u064b\13\66\3\66\3\66\7\66\u064f")
        buf.write("\n\66\f\66\16\66\u0652\13\66\3\66\3\66\3\66\7\66\u0657")
        buf.write("\n\66\f\66\16\66\u065a\13\66\3\66\5\66\u065d\n\66\3\66")
        buf.write("\7\66\u0660\n\66\f\66\16\66\u0663\13\66\3\66\3\66\7\66")
        buf.write("\u0667\n\66\f\66\16\66\u066a\13\66\3\66\3\66\7\66\u066e")
        buf.write("\n\66\f\66\16\66\u0671\13\66\3\66\3\66\5\66\u0675\n\66")
        buf.write("\3\66\3\66\7\66\u0679\n\66\f\66\16\66\u067c\13\66\3\66")
        buf.write("\3\66\7\66\u0680\n\66\f\66\16\66\u0683\13\66\3\66\5\66")
        buf.write("\u0686\n\66\3\66\7\66\u0689\n\66\f\66\16\66\u068c\13\66")
        buf.write("\3\66\5\66\u068f\n\66\3\66\7\66\u0692\n\66\f\66\16\66")
        buf.write("\u0695\13\66\3\66\3\66\3\66\7\66\u069a\n\66\f\66\16\66")
        buf.write("\u069d\13\66\3\66\3\66\7\66\u06a1\n\66\f\66\16\66\u06a4")
        buf.write("\13\66\3\66\3\66\7\66\u06a8\n\66\f\66\16\66\u06ab\13\66")
        buf.write("\3\66\5\66\u06ae\n\66\3\66\7\66\u06b1\n\66\f\66\16\66")
        buf.write("\u06b4\13\66\3\66\3\66\7\66\u06b8\n\66\f\66\16\66\u06bb")
        buf.write("\13\66\3\66\3\66\3\66\3\66\7\66\u06c1\n\66\f\66\16\66")
        buf.write("\u06c4\13\66\3\66\3\66\7\66\u06c8\n\66\f\66\16\66\u06cb")
        buf.write("\13\66\3\66\3\66\7\66\u06cf\n\66\f\66\16\66\u06d2\13\66")
        buf.write("\3\66\3\66\3\66\7\66\u06d7\n\66\f\66\16\66\u06da\13\66")
        buf.write("\3\66\3\66\3\66\3\66\7\66\u06e0\n\66\f\66\16\66\u06e3")
        buf.write("\13\66\3\66\3\66\7\66\u06e7\n\66\f\66\16\66\u06ea\13\66")
        buf.write("\3\66\5\66\u06ed\n\66\3\66\7\66\u06f0\n\66\f\66\16\66")
        buf.write("\u06f3\13\66\3\66\3\66\7\66\u06f7\n\66\f\66\16\66\u06fa")
        buf.write("\13\66\3\66\3\66\3\66\7\66\u06ff\n\66\f\66\16\66\u0702")
        buf.write("\13\66\3\66\3\66\7\66\u0706\n\66\f\66\16\66\u0709\13\66")
        buf.write("\3\66\3\66\7\66\u070d\n\66\f\66\16\66\u0710\13\66\3\66")
        buf.write("\3\66\3\66\3\66\7\66\u0716\n\66\f\66\16\66\u0719\13\66")
        buf.write("\3\66\3\66\7\66\u071d\n\66\f\66\16\66\u0720\13\66\3\66")
        buf.write("\5\66\u0723\n\66\3\66\7\66\u0726\n\66\f\66\16\66\u0729")
        buf.write("\13\66\3\66\7\66\u072c\n\66\f\66\16\66\u072f\13\66\3\67")
        buf.write("\3\67\7\67\u0733\n\67\f\67\16\67\u0736\13\67\3\67\3\67")
        buf.write("\7\67\u073a\n\67\f\67\16\67\u073d\13\67\3\67\6\67\u0740")
        buf.write("\n\67\r\67\16\67\u0741\3\67\7\67\u0745\n\67\f\67\16\67")
        buf.write("\u0748\13\67\3\67\3\67\5\67\u074c\n\67\38\38\78\u0750")
        buf.write("\n8\f8\168\u0753\138\38\38\78\u0757\n8\f8\168\u075a\13")
        buf.write("8\38\38\78\u075e\n8\f8\168\u0761\138\38\38\78\u0765\n")
        buf.write("8\f8\168\u0768\138\38\38\78\u076c\n8\f8\168\u076f\138")
        buf.write("\38\38\39\59\u0774\n9\39\79\u0777\n9\f9\169\u077a\139")
        buf.write("\39\39\79\u077e\n9\f9\169\u0781\139\39\59\u0784\n9\39")
        buf.write("\79\u0787\n9\f9\169\u078a\139\79\u078c\n9\f9\169\u078f")
        buf.write("\139\3:\3:\3:\7:\u0794\n:\f:\16:\u0797\13:\3:\5:\u079a")
        buf.write("\n:\3:\7:\u079d\n:\f:\16:\u07a0\13:\3:\3:\7:\u07a4\n:")
        buf.write("\f:\16:\u07a7\13:\5:\u07a9\n:\3;\3;\3;\7;\u07ae\n;\f;")
        buf.write("\16;\u07b1\13;\3;\3;\7;\u07b5\n;\f;\16;\u07b8\13;\3;\3")
        buf.write(";\7;\u07bc\n;\f;\16;\u07bf\13;\3<\3<\7<\u07c3\n<\f<\16")
        buf.write("<\u07c6\13<\3<\5<\u07c9\n<\3<\7<\u07cc\n<\f<\16<\u07cf")
        buf.write("\13<\6<\u07d1\n<\r<\16<\u07d2\3=\6=\u07d6\n=\r=\16=\u07d7")
        buf.write("\3>\3>\7>\u07dc\n>\f>\16>\u07df\13>\3>\3>\7>\u07e3\n>")
        buf.write("\f>\16>\u07e6\13>\3>\3>\7>\u07ea\n>\f>\16>\u07ed\13>\5")
        buf.write(">\u07ef\n>\3?\3?\7?\u07f3\n?\f?\16?\u07f6\13?\3?\3?\7")
        buf.write("?\u07fa\n?\f?\16?\u07fd\13?\3?\3?\7?\u0801\n?\f?\16?\u0804")
        buf.write("\13?\7?\u0806\n?\f?\16?\u0809\13?\3@\3@\7@\u080d\n@\f")
        buf.write("@\16@\u0810\13@\3@\3@\3@\3@\7@\u0816\n@\f@\16@\u0819\13")
        buf.write("@\3@\5@\u081c\n@\5@\u081e\n@\3A\3A\7A\u0822\nA\fA\16A")
        buf.write("\u0825\13A\3A\3A\7A\u0829\nA\fA\16A\u082c\13A\3A\3A\7")
        buf.write("A\u0830\nA\fA\16A\u0833\13A\7A\u0835\nA\fA\16A\u0838\13")
        buf.write("A\3B\3B\7B\u083c\nB\fB\16B\u083f\13B\3B\5B\u0842\nB\3")
        buf.write("C\3C\5C\u0846\nC\3C\7C\u0849\nC\fC\16C\u084c\13C\3C\3")
        buf.write("C\7C\u0850\nC\fC\16C\u0853\13C\3C\7C\u0856\nC\fC\16C\u0859")
        buf.write("\13C\5C\u085b\nC\3D\3D\3D\7D\u0860\nD\fD\16D\u0863\13")
        buf.write("D\3D\3D\7D\u0867\nD\fD\16D\u086a\13D\3D\3D\7D\u086e\n")
        buf.write("D\fD\16D\u0871\13D\3D\7D\u0874\nD\fD\16D\u0877\13D\3D")
        buf.write("\3D\7D\u087b\nD\fD\16D\u087e\13D\3D\5D\u0881\nD\3D\7D")
        buf.write("\u0884\nD\fD\16D\u0887\13D\3D\5D\u088a\nD\3D\7D\u088d")
        buf.write("\nD\fD\16D\u0890\13D\3D\3D\3D\7D\u0895\nD\fD\16D\u0898")
        buf.write("\13D\3D\3D\7D\u089c\nD\fD\16D\u089f\13D\3D\5D\u08a2\n")
        buf.write("D\3D\7D\u08a5\nD\fD\16D\u08a8\13D\3D\3D\7D\u08ac\nD\f")
        buf.write("D\16D\u08af\13D\3D\3D\3D\3D\7D\u08b5\nD\fD\16D\u08b8\13")
        buf.write("D\3D\3D\7D\u08bc\nD\fD\16D\u08bf\13D\3D\3D\7D\u08c3\n")
        buf.write("D\fD\16D\u08c6\13D\3D\3D\7D\u08ca\nD\fD\16D\u08cd\13D")
        buf.write("\3D\3D\3D\3D\7D\u08d3\nD\fD\16D\u08d6\13D\3D\3D\7D\u08da")
        buf.write("\nD\fD\16D\u08dd\13D\3D\3D\3D\7D\u08e2\nD\fD\16D\u08e5")
        buf.write("\13D\3D\5D\u08e8\nD\3D\7D\u08eb\nD\fD\16D\u08ee\13D\3")
        buf.write("D\3D\7D\u08f2\nD\fD\16D\u08f5\13D\3D\7D\u08f8\nD\fD\16")
        buf.write("D\u08fb\13D\5D\u08fd\nD\3D\3D\7D\u0901\nD\fD\16D\u0904")
        buf.write("\13D\3D\3D\7D\u0908\nD\fD\16D\u090b\13D\3D\5D\u090e\n")
        buf.write("D\3D\7D\u0911\nD\fD\16D\u0914\13D\3D\5D\u0917\nD\3D\7")
        buf.write("D\u091a\nD\fD\16D\u091d\13D\3D\3D\3D\7D\u0922\nD\fD\16")
        buf.write("D\u0925\13D\3D\3D\7D\u0929\nD\fD\16D\u092c\13D\3D\3D\7")
        buf.write("D\u0930\nD\fD\16D\u0933\13D\3D\5D\u0936\nD\3D\7D\u0939")
        buf.write("\nD\fD\16D\u093c\13D\3D\3D\7D\u0940\nD\fD\16D\u0943\13")
        buf.write("D\3D\3D\3D\3D\7D\u0949\nD\fD\16D\u094c\13D\3D\3D\7D\u0950")
        buf.write("\nD\fD\16D\u0953\13D\3D\3D\7D\u0957\nD\fD\16D\u095a\13")
        buf.write("D\3D\3D\7D\u095e\nD\fD\16D\u0961\13D\3D\3D\7D\u0965\n")
        buf.write("D\fD\16D\u0968\13D\3D\3D\3D\3D\7D\u096e\nD\fD\16D\u0971")
        buf.write("\13D\3D\3D\7D\u0975\nD\fD\16D\u0978\13D\3D\3D\7D\u097c")
        buf.write("\nD\fD\16D\u097f\13D\3D\3D\3D\7D\u0984\nD\fD\16D\u0987")
        buf.write("\13D\3D\3D\7D\u098b\nD\fD\16D\u098e\13D\3D\5D\u0991\n")
        buf.write("D\3D\7D\u0994\nD\fD\16D\u0997\13D\3D\3D\7D\u099b\nD\f")
        buf.write("D\16D\u099e\13D\3D\7D\u09a1\nD\fD\16D\u09a4\13D\7D\u09a6")
        buf.write("\nD\fD\16D\u09a9\13D\3E\3E\3F\3F\3F\7F\u09b0\nF\fF\16")
        buf.write("F\u09b3\13F\3F\5F\u09b6\nF\3F\7F\u09b9\nF\fF\16F\u09bc")
        buf.write("\13F\3F\5F\u09bf\nF\3F\7F\u09c2\nF\fF\16F\u09c5\13F\3")
        buf.write("F\5F\u09c8\nF\3G\5G\u09cb\nG\3G\7G\u09ce\nG\fG\16G\u09d1")
        buf.write("\13G\3G\3G\7G\u09d5\nG\fG\16G\u09d8\13G\3G\3G\7G\u09dc")
        buf.write("\nG\fG\16G\u09df\13G\3G\5G\u09e2\nG\3G\7G\u09e5\nG\fG")
        buf.write("\16G\u09e8\13G\3G\3G\7G\u09ec\nG\fG\16G\u09ef\13G\7G\u09f1")
        buf.write("\nG\fG\16G\u09f4\13G\3H\3H\7H\u09f8\nH\fH\16H\u09fb\13")
        buf.write("H\3H\3H\3I\6I\u0a00\nI\rI\16I\u0a01\3J\3J\7J\u0a06\nJ")
        buf.write("\fJ\16J\u0a09\13J\3J\3J\7J\u0a0d\nJ\fJ\16J\u0a10\13J\3")
        buf.write("J\3J\3J\3J\7J\u0a16\nJ\fJ\16J\u0a19\13J\3J\5J\u0a1c\n")
        buf.write("J\3K\3K\7K\u0a20\nK\fK\16K\u0a23\13K\3K\3K\7K\u0a27\n")
        buf.write("K\fK\16K\u0a2a\13K\3K\3K\7K\u0a2e\nK\fK\16K\u0a31\13K")
        buf.write("\3K\3K\7K\u0a35\nK\fK\16K\u0a38\13K\3K\6K\u0a3b\nK\rK")
        buf.write("\16K\u0a3c\3K\7K\u0a40\nK\fK\16K\u0a43\13K\3K\3K\3K\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\7L\u0a51\nL\fL\16L\u0a54\13")
        buf.write("L\3L\3L\7L\u0a58\nL\fL\16L\u0a5b\13L\3L\3L\7L\u0a5f\n")
        buf.write("L\fL\16L\u0a62\13L\3L\3L\7L\u0a66\nL\fL\16L\u0a69\13L")
        buf.write("\3L\3L\7L\u0a6d\nL\fL\16L\u0a70\13L\3L\3L\7L\u0a74\nL")
        buf.write("\fL\16L\u0a77\13L\7L\u0a79\nL\fL\16L\u0a7c\13L\5L\u0a7e")
        buf.write("\nL\3L\7L\u0a81\nL\fL\16L\u0a84\13L\3L\3L\7L\u0a88\nL")
        buf.write("\fL\16L\u0a8b\13L\3L\3L\7L\u0a8f\nL\fL\16L\u0a92\13L\3")
        buf.write("L\3L\7L\u0a96\nL\fL\16L\u0a99\13L\3L\7L\u0a9c\nL\fL\16")
        buf.write("L\u0a9f\13L\5L\u0aa1\nL\7L\u0aa3\nL\fL\16L\u0aa6\13L\3")
        buf.write("L\7L\u0aa9\nL\fL\16L\u0aac\13L\3L\3L\5L\u0ab0\nL\3M\3")
        buf.write("M\7M\u0ab4\nM\fM\16M\u0ab7\13M\3M\3M\7M\u0abb\nM\fM\16")
        buf.write("M\u0abe\13M\3M\3M\3M\7M\u0ac3\nM\fM\16M\u0ac6\13M\3M\3")
        buf.write("M\7M\u0aca\nM\fM\16M\u0acd\13M\3M\3M\7M\u0ad1\nM\fM\16")
        buf.write("M\u0ad4\13M\3M\3M\3M\3M\7M\u0ada\nM\fM\16M\u0add\13M\3")
        buf.write("M\3M\7M\u0ae1\nM\fM\16M\u0ae4\13M\3M\5M\u0ae7\nM\3N\3")
        buf.write("N\7N\u0aeb\nN\fN\16N\u0aee\13N\3N\5N\u0af1\nN\3N\7N\u0af4")
        buf.write("\nN\fN\16N\u0af7\13N\3N\3N\3O\6O\u0afc\nO\rO\16O\u0afd")
        buf.write("\3P\7P\u0b01\nP\fP\16P\u0b04\13P\3P\3P\5P\u0b08\nP\3P")
        buf.write("\7P\u0b0b\nP\fP\16P\u0b0e\13P\3Q\5Q\u0b11\nQ\3Q\3Q\3R")
        buf.write("\3R\7R\u0b17\nR\fR\16R\u0b1a\13R\3R\3R\7R\u0b1e\nR\fR")
        buf.write("\16R\u0b21\13R\3R\6R\u0b24\nR\rR\16R\u0b25\3R\7R\u0b29")
        buf.write("\nR\fR\16R\u0b2c\13R\3R\3R\7R\u0b30\nR\fR\16R\u0b33\13")
        buf.write("R\3R\5R\u0b36\nR\3R\7R\u0b39\nR\fR\16R\u0b3c\13R\3R\3")
        buf.write("R\7R\u0b40\nR\fR\16R\u0b43\13R\3R\5R\u0b46\nR\3R\7R\u0b49")
        buf.write("\nR\fR\16R\u0b4c\13R\5R\u0b4e\nR\3S\3S\7S\u0b52\nS\fS")
        buf.write("\16S\u0b55\13S\3S\3S\7S\u0b59\nS\fS\16S\u0b5c\13S\3S\3")
        buf.write("S\5S\u0b60\nS\3S\7S\u0b63\nS\fS\16S\u0b66\13S\3S\3S\7")
        buf.write("S\u0b6a\nS\fS\16S\u0b6d\13S\3S\3S\7S\u0b71\nS\fS\16S\u0b74")
        buf.write("\13S\3S\5S\u0b77\nS\3S\7S\u0b7a\nS\fS\16S\u0b7d\13S\3")
        buf.write("S\3S\3T\3T\7T\u0b83\nT\fT\16T\u0b86\13T\3T\3T\3U\3U\7")
        buf.write("U\u0b8c\nU\fU\16U\u0b8f\13U\3U\3U\3V\3V\7V\u0b95\nV\f")
        buf.write("V\16V\u0b98\13V\3V\3V\7V\u0b9c\nV\fV\16V\u0b9f\13V\3V")
        buf.write("\3V\7V\u0ba3\nV\fV\16V\u0ba6\13V\3V\3V\7V\u0baa\nV\fV")
        buf.write("\16V\u0bad\13V\3V\3V\7V\u0bb1\nV\fV\16V\u0bb4\13V\3V\3")
        buf.write("V\7V\u0bb8\nV\fV\16V\u0bbb\13V\3V\5V\u0bbe\nV\3V\3V\7")
        buf.write("V\u0bc2\nV\fV\16V\u0bc5\13V\3V\3V\7V\u0bc9\nV\fV\16V\u0bcc")
        buf.write("\13V\3V\3V\7V\u0bd0\nV\fV\16V\u0bd3\13V\3V\3V\7V\u0bd7")
        buf.write("\nV\fV\16V\u0bda\13V\3V\3V\5V\u0bde\nV\3W\3W\7W\u0be2")
        buf.write("\nW\fW\16W\u0be5\13W\3W\3W\7W\u0be9\nW\fW\16W\u0bec\13")
        buf.write("W\3W\3W\7W\u0bf0\nW\fW\16W\u0bf3\13W\3W\3W\7W\u0bf7\n")
        buf.write("W\fW\16W\u0bfa\13W\3W\3W\3W\3W\7W\u0c00\nW\fW\16W\u0c03")
        buf.write("\13W\3W\3W\7W\u0c07\nW\fW\16W\u0c0a\13W\3W\3W\7W\u0c0e")
        buf.write("\nW\fW\16W\u0c11\13W\3W\3W\7W\u0c15\nW\fW\16W\u0c18\13")
        buf.write("W\3W\3W\7W\u0c1c\nW\fW\16W\u0c1f\13W\3W\3W\3W\3W\3W\7")
        buf.write("W\u0c26\nW\fW\16W\u0c29\13W\3W\3W\7W\u0c2d\nW\fW\16W\u0c30")
        buf.write("\13W\3W\3W\7W\u0c34\nW\fW\16W\u0c37\13W\3W\3W\7W\u0c3b")
        buf.write("\nW\fW\16W\u0c3e\13W\3W\3W\5W\u0c42\nW\3X\3X\5X\u0c46")
        buf.write("\nX\5X\u0c48\nX\3X\3X\5X\u0c4c\nX\3X\3X\5X\u0c50\nX\3")
        buf.write("Y\3Y\7Y\u0c54\nY\fY\16Y\u0c57\13Y\3Y\5Y\u0c5a\nY\3Z\3")
        buf.write("Z\7Z\u0c5e\nZ\fZ\16Z\u0c61\13Z\3Z\3Z\7Z\u0c65\nZ\fZ\16")
        buf.write("Z\u0c68\13Z\3Z\3Z\7Z\u0c6c\nZ\fZ\16Z\u0c6f\13Z\7Z\u0c71")
        buf.write("\nZ\fZ\16Z\u0c74\13Z\3[\3[\7[\u0c78\n[\f[\16[\u0c7b\13")
        buf.write("[\3[\3[\3[\3[\7[\u0c81\n[\f[\16[\u0c84\13[\3[\5[\u0c87")
        buf.write("\n[\3[\3[\7[\u0c8b\n[\f[\16[\u0c8e\13[\3[\5[\u0c91\n[")
        buf.write("\3[\3[\3\\\5\\\u0c96\n\\\3\\\3\\\3]\3]\3]\6]\u0c9d\n]")
        buf.write("\r]\16]\u0c9e\6]\u0ca1\n]\r]\16]\u0ca2\3^\3^\3^\5^\u0ca8")
        buf.write("\n^\3_\3_\7_\u0cac\n_\f_\16_\u0caf\13_\3_\3_\7_\u0cb3")
        buf.write("\n_\f_\16_\u0cb6\13_\3_\5_\u0cb9\n_\3_\7_\u0cbc\n_\f_")
        buf.write("\16_\u0cbf\13_\3_\3_\3_\3_\7_\u0cc5\n_\f_\16_\u0cc8\13")
        buf.write("_\3_\3_\7_\u0ccc\n_\f_\16_\u0ccf\13_\3_\5_\u0cd2\n_\3")
        buf.write("_\7_\u0cd5\n_\f_\16_\u0cd8\13_\3_\3_\3_\5_\u0cdd\n_\3")
        buf.write("`\7`\u0ce0\n`\f`\16`\u0ce3\13`\3`\7`\u0ce6\n`\f`\16`\u0ce9")
        buf.write("\13`\3`\5`\u0cec\n`\3a\3a\3a\3b\3b\7b\u0cf3\nb\fb\16b")
        buf.write("\u0cf6\13b\3b\3b\7b\u0cfa\nb\fb\16b\u0cfd\13b\3b\3b\7")
        buf.write("b\u0d01\nb\fb\16b\u0d04\13b\3b\5b\u0d07\nb\3b\7b\u0d0a")
        buf.write("\nb\fb\16b\u0d0d\13b\3b\3b\3c\3c\7c\u0d13\nc\fc\16c\u0d16")
        buf.write("\13c\3c\3c\7c\u0d1a\nc\fc\16c\u0d1d\13c\3c\3c\7c\u0d21")
        buf.write("\nc\fc\16c\u0d24\13c\3c\3c\7c\u0d28\nc\fc\16c\u0d2b\13")
        buf.write("c\7c\u0d2d\nc\fc\16c\u0d30\13c\5c\u0d32\nc\3c\3c\3d\3")
        buf.write("d\7d\u0d38\nd\fd\16d\u0d3b\13d\3d\3d\7d\u0d3f\nd\fd\16")
        buf.write("d\u0d42\13d\3d\3d\3e\3e\7e\u0d48\ne\fe\16e\u0d4b\13e\6")
        buf.write("e\u0d4d\ne\re\16e\u0d4e\3f\7f\u0d52\nf\ff\16f\u0d55\13")
        buf.write("f\3f\3f\7f\u0d59\nf\ff\16f\u0d5c\13f\3f\2\6\32Hj\u0086")
        buf.write("g\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\2\31\3\2tu\4\2TTVV\5\2\60\60TTVV\4\2\60\60>>\7\2SSUU")
        buf.write("WWZZ_`\3\2WY\4\2SSUU\3\2QR\3\2MP\3\2rs\3\2gq\b\2\25\25")
        buf.write("\"\"++\62\62\67\67FF\3\2\6\b\4\2\t\t\66\66\4\2\64\648")
        buf.write("8\6\2\31\31,,;;??\5\2\n\13\'\'DD\4\2GHff\3\2GH\4\2WW^")
        buf.write("^\4\2\r\r\17\17\4\2\20\20;;\4\2\26\26\32\32\2\u0f3c\2")
        buf.write("\u0144\3\2\2\2\4\u0146\3\2\2\2\6\u0161\3\2\2\2\b\u0163")
        buf.write("\3\2\2\2\n\u016c\3\2\2\2\f\u0175\3\2\2\2\16\u019a\3\2")
        buf.write("\2\2\20\u01b6\3\2\2\2\22\u01ff\3\2\2\2\24\u0236\3\2\2")
        buf.write("\2\26\u0253\3\2\2\2\30\u0287\3\2\2\2\32\u02ac\3\2\2\2")
        buf.write("\34\u02c2\3\2\2\2\36\u02dc\3\2\2\2 \u02f6\3\2\2\2\"\u0310")
        buf.write("\3\2\2\2$\u032a\3\2\2\2&\u0344\3\2\2\2(\u035e\3\2\2\2")
        buf.write("*\u0378\3\2\2\2,\u0392\3\2\2\2.\u03ac\3\2\2\2\60\u03c6")
        buf.write("\3\2\2\2\62\u03fd\3\2\2\2\64\u03ff\3\2\2\2\66\u0401\3")
        buf.write("\2\2\28\u041b\3\2\2\2:\u042a\3\2\2\2<\u0433\3\2\2\2>\u043d")
        buf.write("\3\2\2\2@\u043f\3\2\2\2B\u0459\3\2\2\2D\u0470\3\2\2\2")
        buf.write("F\u0472\3\2\2\2H\u04ce\3\2\2\2J\u050b\3\2\2\2L\u050d\3")
        buf.write("\2\2\2N\u051c\3\2\2\2P\u052d\3\2\2\2R\u0531\3\2\2\2T\u053c")
        buf.write("\3\2\2\2V\u0562\3\2\2\2X\u0595\3\2\2\2Z\u0597\3\2\2\2")
        buf.write("\\\u05b1\3\2\2\2^\u05c8\3\2\2\2`\u05ca\3\2\2\2b\u05e6")
        buf.write("\3\2\2\2d\u0601\3\2\2\2f\u0603\3\2\2\2h\u061e\3\2\2\2")
        buf.write("j\u0674\3\2\2\2l\u074b\3\2\2\2n\u074d\3\2\2\2p\u0773\3")
        buf.write("\2\2\2r\u0790\3\2\2\2t\u07bd\3\2\2\2v\u07d0\3\2\2\2x\u07d5")
        buf.write("\3\2\2\2z\u07d9\3\2\2\2|\u07f0\3\2\2\2~\u081d\3\2\2\2")
        buf.write("\u0080\u081f\3\2\2\2\u0082\u0839\3\2\2\2\u0084\u085a\3")
        buf.write("\2\2\2\u0086\u08fc\3\2\2\2\u0088\u09aa\3\2\2\2\u008a\u09c7")
        buf.write("\3\2\2\2\u008c\u09ca\3\2\2\2\u008e\u09f5\3\2\2\2\u0090")
        buf.write("\u09ff\3\2\2\2\u0092\u0a1b\3\2\2\2\u0094\u0a1d\3\2\2\2")
        buf.write("\u0096\u0aaf\3\2\2\2\u0098\u0ae6\3\2\2\2\u009a\u0ae8\3")
        buf.write("\2\2\2\u009c\u0afb\3\2\2\2\u009e\u0b02\3\2\2\2\u00a0\u0b10")
        buf.write("\3\2\2\2\u00a2\u0b14\3\2\2\2\u00a4\u0b4f\3\2\2\2\u00a6")
        buf.write("\u0b80\3\2\2\2\u00a8\u0b89\3\2\2\2\u00aa\u0bdd\3\2\2\2")
        buf.write("\u00ac\u0c41\3\2\2\2\u00ae\u0c47\3\2\2\2\u00b0\u0c51\3")
        buf.write("\2\2\2\u00b2\u0c5b\3\2\2\2\u00b4\u0c90\3\2\2\2\u00b6\u0c95")
        buf.write("\3\2\2\2\u00b8\u0ca0\3\2\2\2\u00ba\u0ca7\3\2\2\2\u00bc")
        buf.write("\u0cdc\3\2\2\2\u00be\u0ce1\3\2\2\2\u00c0\u0ced\3\2\2\2")
        buf.write("\u00c2\u0cf0\3\2\2\2\u00c4\u0d10\3\2\2\2\u00c6\u0d35\3")
        buf.write("\2\2\2\u00c8\u0d4c\3\2\2\2\u00ca\u0d53\3\2\2\2\u00cc\u0145")
        buf.write("\7w\2\2\u00cd\u00d1\7\61\2\2\u00ce\u00d0\7}\2\2\u00cf")
        buf.write("\u00ce\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1\u00cf\3\2\2\2")
        buf.write("\u00d1\u00d2\3\2\2\2\u00d2\u00d4\3\2\2\2\u00d3\u00d1\3")
        buf.write("\2\2\2\u00d4\u0145\7w\2\2\u00d5\u0145\7x\2\2\u00d6\u00d8")
        buf.write("\7z\2\2\u00d7\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9")
        buf.write("\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u0145\3\2\2\2")
        buf.write("\u00db\u00dc\7G\2\2\u00dc\u00dd\5\66\34\2\u00dd\u00de")
        buf.write("\7H\2\2\u00de\u0145\3\2\2\2\u00df\u0145\5\f\7\2\u00e0")
        buf.write("\u0145\5\4\3\2\u00e1\u00e3\7\3\2\2\u00e2\u00e1\3\2\2\2")
        buf.write("\u00e2\u00e3\3\2\2\2\u00e3\u00e7\3\2\2\2\u00e4\u00e6\7")
        buf.write("}\2\2\u00e5\u00e4\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e5")
        buf.write("\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9")
        buf.write("\u00e7\3\2\2\2\u00ea\u00ee\7G\2\2\u00eb\u00ed\7}\2\2\u00ec")
        buf.write("\u00eb\3\2\2\2\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2")
        buf.write("\u00ee\u00ef\3\2\2\2\u00ef\u00f1\3\2\2\2\u00f0\u00ee\3")
        buf.write("\2\2\2\u00f1\u00f5\5\u009aN\2\u00f2\u00f4\7}\2\2\u00f3")
        buf.write("\u00f2\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2")
        buf.write("\u00f5\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7\u00f5\3")
        buf.write("\2\2\2\u00f8\u00f9\7H\2\2\u00f9\u0145\3\2\2\2\u00fa\u00fe")
        buf.write("\7\4\2\2\u00fb\u00fd\7}\2\2\u00fc\u00fb\3\2\2\2\u00fd")
        buf.write("\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2")
        buf.write("\u00ff\u0101\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0105\7")
        buf.write("G\2\2\u0102\u0104\7}\2\2\u0103\u0102\3\2\2\2\u0104\u0107")
        buf.write("\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106")
        buf.write("\u0108\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u010c\5\26\f")
        buf.write("\2\u0109\u010b\7}\2\2\u010a\u0109\3\2\2\2\u010b\u010e")
        buf.write("\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d")
        buf.write("\u010f\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0113\7f\2\2")
        buf.write("\u0110\u0112\7}\2\2\u0111\u0110\3\2\2\2\u0112\u0115\3")
        buf.write("\2\2\2\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116")
        buf.write("\3\2\2\2\u0115\u0113\3\2\2\2\u0116\u011a\5\u0082B\2\u0117")
        buf.write("\u0119\7}\2\2\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2")
        buf.write("\u011a\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d\3")
        buf.write("\2\2\2\u011c\u011a\3\2\2\2\u011d\u011e\7H\2\2\u011e\u0145")
        buf.write("\3\2\2\2\u011f\u0123\7\5\2\2\u0120\u0122\7}\2\2\u0121")
        buf.write("\u0120\3\2\2\2\u0122\u0125\3\2\2\2\u0123\u0121\3\2\2\2")
        buf.write("\u0123\u0124\3\2\2\2\u0124\u0126\3\2\2\2\u0125\u0123\3")
        buf.write("\2\2\2\u0126\u012a\7G\2\2\u0127\u0129\7}\2\2\u0128\u0127")
        buf.write("\3\2\2\2\u0129\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u012d\3\2\2\2\u012c\u012a\3\2\2\2")
        buf.write("\u012d\u0131\5\u0082B\2\u012e\u0130\7}\2\2\u012f\u012e")
        buf.write("\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u012f\3\2\2\2\u0131")
        buf.write("\u0132\3\2\2\2\u0132\u0134\3\2\2\2\u0133\u0131\3\2\2\2")
        buf.write("\u0134\u0138\7f\2\2\u0135\u0137\7}\2\2\u0136\u0135\3\2")
        buf.write("\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139")
        buf.write("\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0138\3\2\2\2\u013b")
        buf.write("\u013f\5\26\f\2\u013c\u013e\7}\2\2\u013d\u013c\3\2\2\2")
        buf.write("\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140\3")
        buf.write("\2\2\2\u0140\u0142\3\2\2\2\u0141\u013f\3\2\2\2\u0142\u0143")
        buf.write("\7H\2\2\u0143\u0145\3\2\2\2\u0144\u00cc\3\2\2\2\u0144")
        buf.write("\u00cd\3\2\2\2\u0144\u00d5\3\2\2\2\u0144\u00d7\3\2\2\2")
        buf.write("\u0144\u00db\3\2\2\2\u0144\u00df\3\2\2\2\u0144\u00e0\3")
        buf.write("\2\2\2\u0144\u00e2\3\2\2\2\u0144\u00fa\3\2\2\2\u0144\u011f")
        buf.write("\3\2\2\2\u0145\3\3\2\2\2\u0146\u014a\7G\2\2\u0147\u0149")
        buf.write("\7}\2\2\u0148\u0147\3\2\2\2\u0149\u014c\3\2\2\2\u014a")
        buf.write("\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014e\3\2\2\2")
        buf.write("\u014c\u014a\3\2\2\2\u014d\u014f\5|?\2\u014e\u014d\3\2")
        buf.write("\2\2\u014e\u014f\3\2\2\2\u014f\u0153\3\2\2\2\u0150\u0152")
        buf.write("\7}\2\2\u0151\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153")
        buf.write("\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3\2\2\2")
        buf.write("\u0155\u0153\3\2\2\2\u0156\u015a\7H\2\2\u0157\u0159\7")
        buf.write("}\2\2\u0158\u0157\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c")
        buf.write("\u015a\3\2\2\2\u015d\u015e\5\6\4\2\u015e\5\3\2\2\2\u015f")
        buf.write("\u0162\5\b\5\2\u0160\u0162\5\n\6\2\u0161\u015f\3\2\2\2")
        buf.write("\u0161\u0160\3\2\2\2\u0162\7\3\2\2\2\u0163\u0167\7b\2")
        buf.write("\2\u0164\u0166\7}\2\2\u0165\u0164\3\2\2\2\u0166\u0169")
        buf.write("\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168")
        buf.write("\u016a\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016b\5\66\34")
        buf.write("\2\u016b\t\3\2\2\2\u016c\u0170\7b\2\2\u016d\u016f\7}\2")
        buf.write("\2\u016e\u016d\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e")
        buf.write("\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0173\3\2\2\2\u0172")
        buf.write("\u0170\3\2\2\2\u0173\u0174\5\u009aN\2\u0174\13\3\2\2\2")
        buf.write("\u0175\u0179\7B\2\2\u0176\u0178\7}\2\2\u0177\u0176\3\2")
        buf.write("\2\2\u0178\u017b\3\2\2\2\u0179\u0177\3\2\2\2\u0179\u017a")
        buf.write("\3\2\2\2\u017a\u017c\3\2\2\2\u017b\u0179\3\2\2\2\u017c")
        buf.write("\u0180\7G\2\2\u017d\u017f\7}\2\2\u017e\u017d\3\2\2\2\u017f")
        buf.write("\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183\u0187\5")
        buf.write("\62\32\2\u0184\u0186\7}\2\2\u0185\u0184\3\2\2\2\u0186")
        buf.write("\u0189\3\2\2\2\u0187\u0185\3\2\2\2\u0187\u0188\3\2\2\2")
        buf.write("\u0188\u018a\3\2\2\2\u0189\u0187\3\2\2\2\u018a\u018e\7")
        buf.write("f\2\2\u018b\u018d\7}\2\2\u018c\u018b\3\2\2\2\u018d\u0190")
        buf.write("\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f")
        buf.write("\u0191\3\2\2\2\u0190\u018e\3\2\2\2\u0191\u0195\5\16\b")
        buf.write("\2\u0192\u0194\7}\2\2\u0193\u0192\3\2\2\2\u0194\u0197")
        buf.write("\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write("\u0198\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u0199\7H\2\2")
        buf.write("\u0199\r\3\2\2\2\u019a\u019e\5\20\t\2\u019b\u019d\7}\2")
        buf.write("\2\u019c\u019b\3\2\2\2\u019d\u01a0\3\2\2\2\u019e\u019c")
        buf.write("\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01b1\3\2\2\2\u01a0")
        buf.write("\u019e\3\2\2\2\u01a1\u01a5\7f\2\2\u01a2\u01a4\7}\2\2\u01a3")
        buf.write("\u01a2\3\2\2\2\u01a4\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2")
        buf.write("\u01a5\u01a6\3\2\2\2\u01a6\u01a8\3\2\2\2\u01a7\u01a5\3")
        buf.write("\2\2\2\u01a8\u01ac\5\20\t\2\u01a9\u01ab\7}\2\2\u01aa\u01a9")
        buf.write("\3\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac")
        buf.write("\u01ad\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2")
        buf.write("\u01af\u01a1\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3")
        buf.write("\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\17\3\2\2\2\u01b3\u01b1")
        buf.write("\3\2\2\2\u01b4\u01b7\5\u0082B\2\u01b5\u01b7\7\33\2\2\u01b6")
        buf.write("\u01b4\3\2\2\2\u01b6\u01b5\3\2\2\2\u01b7\u01bb\3\2\2\2")
        buf.write("\u01b8\u01ba\7}\2\2\u01b9\u01b8\3\2\2\2\u01ba\u01bd\3")
        buf.write("\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01be")
        buf.write("\3\2\2\2\u01bd\u01bb\3\2\2\2\u01be\u01c2\7d\2\2\u01bf")
        buf.write("\u01c1\7}\2\2\u01c0\u01bf\3\2\2\2\u01c1\u01c4\3\2\2\2")
        buf.write("\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3")
        buf.write("\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c6\5\62\32\2\u01c6")
        buf.write("\21\3\2\2\2\u01c7\u0200\5\2\2\2\u01c8\u01ca\7\3\2\2\u01c9")
        buf.write("\u01c8\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01ce\3\2\2\2")
        buf.write("\u01cb\u01cd\7}\2\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3")
        buf.write("\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1")
        buf.write("\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d1\u01d5\7G\2\2\u01d2")
        buf.write("\u01d4\7}\2\2\u01d3\u01d2\3\2\2\2\u01d4\u01d7\3\2\2\2")
        buf.write("\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d8\3")
        buf.write("\2\2\2\u01d7\u01d5\3\2\2\2\u01d8\u01dc\5\u0082B\2\u01d9")
        buf.write("\u01db\7}\2\2\u01da\u01d9\3\2\2\2\u01db\u01de\3\2\2\2")
        buf.write("\u01dc\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\3")
        buf.write("\2\2\2\u01de\u01dc\3\2\2\2\u01df\u01e3\7H\2\2\u01e0\u01e2")
        buf.write("\7}\2\2\u01e1\u01e0\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3")
        buf.write("\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e6\3\2\2\2")
        buf.write("\u01e5\u01e3\3\2\2\2\u01e6\u01ea\7K\2\2\u01e7\u01e9\7")
        buf.write("}\2\2\u01e8\u01e7\3\2\2\2\u01e9\u01ec\3\2\2\2\u01ea\u01e8")
        buf.write("\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\3\2\2\2\u01ec")
        buf.write("\u01ea\3\2\2\2\u01ed\u01f1\5\u008cG\2\u01ee\u01f0\7}\2")
        buf.write("\2\u01ef\u01ee\3\2\2\2\u01f0\u01f3\3\2\2\2\u01f1\u01ef")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3")
        buf.write("\u01f1\3\2\2\2\u01f4\u01f6\7f\2\2\u01f5\u01f4\3\2\2\2")
        buf.write("\u01f5\u01f6\3\2\2\2\u01f6\u01fa\3\2\2\2\u01f7\u01f9\7")
        buf.write("}\2\2\u01f8\u01f7\3\2\2\2\u01f9\u01fc\3\2\2\2\u01fa\u01f8")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\3\2\2\2\u01fc")
        buf.write("\u01fa\3\2\2\2\u01fd\u01fe\7L\2\2\u01fe\u0200\3\2\2\2")
        buf.write("\u01ff\u01c7\3\2\2\2\u01ff\u01c9\3\2\2\2\u0200\u0204\3")
        buf.write("\2\2\2\u0201\u0203\7}\2\2\u0202\u0201\3\2\2\2\u0203\u0206")
        buf.write("\3\2\2\2\u0204\u0202\3\2\2\2\u0204\u0205\3\2\2\2\u0205")
        buf.write("\u0233\3\2\2\2\u0206\u0204\3\2\2\2\u0207\u020b\7I\2\2")
        buf.write("\u0208\u020a\7}\2\2\u0209\u0208\3\2\2\2\u020a\u020d\3")
        buf.write("\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e")
        buf.write("\3\2\2\2\u020d\u020b\3\2\2\2\u020e\u0212\5\66\34\2\u020f")
        buf.write("\u0211\7}\2\2\u0210\u020f\3\2\2\2\u0211\u0214\3\2\2\2")
        buf.write("\u0212\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215\3")
        buf.write("\2\2\2\u0214\u0212\3\2\2\2\u0215\u0216\7J\2\2\u0216\u0232")
        buf.write("\3\2\2\2\u0217\u021b\7G\2\2\u0218\u021a\7}\2\2\u0219\u0218")
        buf.write("\3\2\2\2\u021a\u021d\3\2\2\2\u021b\u0219\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2")
        buf.write("\u021e\u0220\5\24\13\2\u021f\u021e\3\2\2\2\u021f\u0220")
        buf.write("\3\2\2\2\u0220\u0224\3\2\2\2\u0221\u0223\7}\2\2\u0222")
        buf.write("\u0221\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226\u0224\3")
        buf.write("\2\2\2\u0227\u0232\7H\2\2\u0228\u022c\t\2\2\2\u0229\u022b")
        buf.write("\7}\2\2\u022a\u0229\3\2\2\2\u022b\u022e\3\2\2\2\u022c")
        buf.write("\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022f\3\2\2\2")
        buf.write("\u022e\u022c\3\2\2\2\u022f\u0232\7w\2\2\u0230\u0232\t")
        buf.write("\3\2\2\u0231\u0207\3\2\2\2\u0231\u0217\3\2\2\2\u0231\u0228")
        buf.write("\3\2\2\2\u0231\u0230\3\2\2\2\u0232\u0235\3\2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234\23\3\2\2\2\u0235")
        buf.write("\u0233\3\2\2\2\u0236\u023a\5\62\32\2\u0237\u0239\7}\2")
        buf.write("\2\u0238\u0237\3\2\2\2\u0239\u023c\3\2\2\2\u023a\u0238")
        buf.write("\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u024d\3\2\2\2\u023c")
        buf.write("\u023a\3\2\2\2\u023d\u0241\7f\2\2\u023e\u0240\7}\2\2\u023f")
        buf.write("\u023e\3\2\2\2\u0240\u0243\3\2\2\2\u0241\u023f\3\2\2\2")
        buf.write("\u0241\u0242\3\2\2\2\u0242\u0244\3\2\2\2\u0243\u0241\3")
        buf.write("\2\2\2\u0244\u0248\5\62\32\2\u0245\u0247\7}\2\2\u0246")
        buf.write("\u0245\3\2\2\2\u0247\u024a\3\2\2\2\u0248\u0246\3\2\2\2")
        buf.write("\u0248\u0249\3\2\2\2\u0249\u024c\3\2\2\2\u024a\u0248\3")
        buf.write("\2\2\2\u024b\u023d\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b")
        buf.write("\3\2\2\2\u024d\u024e\3\2\2\2\u024e\25\3\2\2\2\u024f\u024d")
        buf.write("\3\2\2\2\u0250\u0252\t\4\2\2\u0251\u0250\3\2\2\2\u0252")
        buf.write("\u0255\3\2\2\2\u0253\u0251\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0259\3\2\2\2\u0255\u0253\3\2\2\2\u0256\u0258\7")
        buf.write("}\2\2\u0257\u0256\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257")
        buf.write("\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u0285\3\2\2\2\u025b")
        buf.write("\u0259\3\2\2\2\u025c\u0286\5\22\n\2\u025d\u0261\5\30\r")
        buf.write("\2\u025e\u0260\7}\2\2\u025f\u025e\3\2\2\2\u0260\u0263")
        buf.write("\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2\2\2\u0262")
        buf.write("\u0264\3\2\2\2\u0263\u0261\3\2\2\2\u0264\u0265\5\32\16")
        buf.write("\2\u0265\u0286\3\2\2\2\u0266\u026a\t\5\2\2\u0267\u0269")
        buf.write("\7}\2\2\u0268\u0267\3\2\2\2\u0269\u026c\3\2\2\2\u026a")
        buf.write("\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026d\3\2\2\2")
        buf.write("\u026c\u026a\3\2\2\2\u026d\u0271\7G\2\2\u026e\u0270\7")
        buf.write("}\2\2\u026f\u026e\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f")
        buf.write("\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0274\3\2\2\2\u0273")
        buf.write("\u0271\3\2\2\2\u0274\u0278\5\u0082B\2\u0275\u0277\7}\2")
        buf.write("\2\u0276\u0275\3\2\2\2\u0277\u027a\3\2\2\2\u0278\u0276")
        buf.write("\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b\3\2\2\2\u027a")
        buf.write("\u0278\3\2\2\2\u027b\u027c\7H\2\2\u027c\u0286\3\2\2\2")
        buf.write("\u027d\u0281\7\\\2\2\u027e\u0280\7}\2\2\u027f\u027e\3")
        buf.write("\2\2\2\u0280\u0283\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0282")
        buf.write("\3\2\2\2\u0282\u0284\3\2\2\2\u0283\u0281\3\2\2\2\u0284")
        buf.write("\u0286\7w\2\2\u0285\u025c\3\2\2\2\u0285\u025d\3\2\2\2")
        buf.write("\u0285\u0266\3\2\2\2\u0285\u027d\3\2\2\2\u0286\27\3\2")
        buf.write("\2\2\u0287\u0288\t\6\2\2\u0288\31\3\2\2\2\u0289\u028b")
        buf.write("\b\16\1\2\u028a\u028c\7\3\2\2\u028b\u028a\3\2\2\2\u028b")
        buf.write("\u028c\3\2\2\2\u028c\u0290\3\2\2\2\u028d\u028f\7}\2\2")
        buf.write("\u028e\u028d\3\2\2\2\u028f\u0292\3\2\2\2\u0290\u028e\3")
        buf.write("\2\2\2\u0290\u0291\3\2\2\2\u0291\u0293\3\2\2\2\u0292\u0290")
        buf.write("\3\2\2\2\u0293\u0297\7G\2\2\u0294\u0296\7}\2\2\u0295\u0294")
        buf.write("\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297")
        buf.write("\u0298\3\2\2\2\u0298\u029a\3\2\2\2\u0299\u0297\3\2\2\2")
        buf.write("\u029a\u029e\5\u0082B\2\u029b\u029d\7}\2\2\u029c\u029b")
        buf.write("\3\2\2\2\u029d\u02a0\3\2\2\2\u029e\u029c\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02a1\3\2\2\2\u02a0\u029e\3\2\2\2")
        buf.write("\u02a1\u02a5\7H\2\2\u02a2\u02a4\7}\2\2\u02a3\u02a2\3\2")
        buf.write("\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a5\u02a6")
        buf.write("\3\2\2\2\u02a6\u02a8\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a8")
        buf.write("\u02a9\5\32\16\6\u02a9\u02ad\3\2\2\2\u02aa\u02ad\5\26")
        buf.write("\f\2\u02ab\u02ad\7y\2\2\u02ac\u0289\3\2\2\2\u02ac\u02aa")
        buf.write("\3\2\2\2\u02ac\u02ab\3\2\2\2\u02ad\u02bf\3\2\2\2\u02ae")
        buf.write("\u02b2\f\5\2\2\u02af\u02b1\7}\2\2\u02b0\u02af\3\2\2\2")
        buf.write("\u02b1\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3")
        buf.write("\2\2\2\u02b3\u02b5\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02b9")
        buf.write("\7\24\2\2\u02b6\u02b8\7}\2\2\u02b7\u02b6\3\2\2\2\u02b8")
        buf.write("\u02bb\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2")
        buf.write("\u02ba\u02bc\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02be\5")
        buf.write("\u0082B\2\u02bd\u02ae\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf")
        buf.write("\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\33\3\2\2\2\u02c1")
        buf.write("\u02bf\3\2\2\2\u02c2\u02c6\5\32\16\2\u02c3\u02c5\7}\2")
        buf.write("\2\u02c4\u02c3\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02d9\3\2\2\2\u02c8")
        buf.write("\u02c6\3\2\2\2\u02c9\u02cd\t\7\2\2\u02ca\u02cc\7}\2\2")
        buf.write("\u02cb\u02ca\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3")
        buf.write("\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0\3\2\2\2\u02cf\u02cd")
        buf.write("\3\2\2\2\u02d0\u02d4\5\32\16\2\u02d1\u02d3\7}\2\2\u02d2")
        buf.write("\u02d1\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4\u02d2\3\2\2\2")
        buf.write("\u02d4\u02d5\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6\u02d4\3")
        buf.write("\2\2\2\u02d7\u02c9\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7")
        buf.write("\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\35\3\2\2\2\u02db\u02d9")
        buf.write("\3\2\2\2\u02dc\u02e0\5\34\17\2\u02dd\u02df\7}\2\2\u02de")
        buf.write("\u02dd\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0\u02de\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02f3\3\2\2\2\u02e2\u02e0\3")
        buf.write("\2\2\2\u02e3\u02e7\t\b\2\2\u02e4\u02e6\7}\2\2\u02e5\u02e4")
        buf.write("\3\2\2\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7")
        buf.write("\u02e8\3\2\2\2\u02e8\u02ea\3\2\2\2\u02e9\u02e7\3\2\2\2")
        buf.write("\u02ea\u02ee\5\34\17\2\u02eb\u02ed\7}\2\2\u02ec\u02eb")
        buf.write("\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee")
        buf.write("\u02ef\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2")
        buf.write("\u02f1\u02e3\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1\3")
        buf.write("\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\37\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f6\u02fa\5\36\20\2\u02f7\u02f9\7}\2\2\u02f8")
        buf.write("\u02f7\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8\3\2\2\2")
        buf.write("\u02fa\u02fb\3\2\2\2\u02fb\u030d\3\2\2\2\u02fc\u02fa\3")
        buf.write("\2\2\2\u02fd\u0301\t\t\2\2\u02fe\u0300\7}\2\2\u02ff\u02fe")
        buf.write("\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u02ff\3\2\2\2\u0301")
        buf.write("\u0302\3\2\2\2\u0302\u0304\3\2\2\2\u0303\u0301\3\2\2\2")
        buf.write("\u0304\u0308\5\36\20\2\u0305\u0307\7}\2\2\u0306\u0305")
        buf.write("\3\2\2\2\u0307\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309\u030c\3\2\2\2\u030a\u0308\3\2\2\2")
        buf.write("\u030b\u02fd\3\2\2\2\u030c\u030f\3\2\2\2\u030d\u030b\3")
        buf.write("\2\2\2\u030d\u030e\3\2\2\2\u030e!\3\2\2\2\u030f\u030d")
        buf.write("\3\2\2\2\u0310\u0314\5 \21\2\u0311\u0313\7}\2\2\u0312")
        buf.write("\u0311\3\2\2\2\u0313\u0316\3\2\2\2\u0314\u0312\3\2\2\2")
        buf.write("\u0314\u0315\3\2\2\2\u0315\u0327\3\2\2\2\u0316\u0314\3")
        buf.write("\2\2\2\u0317\u031b\t\n\2\2\u0318\u031a\7}\2\2\u0319\u0318")
        buf.write("\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2\u031b")
        buf.write("\u031c\3\2\2\2\u031c\u031e\3\2\2\2\u031d\u031b\3\2\2\2")
        buf.write("\u031e\u0322\5 \21\2\u031f\u0321\7}\2\2\u0320\u031f\3")
        buf.write("\2\2\2\u0321\u0324\3\2\2\2\u0322\u0320\3\2\2\2\u0322\u0323")
        buf.write("\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0322\3\2\2\2\u0325")
        buf.write("\u0317\3\2\2\2\u0326\u0329\3\2\2\2\u0327\u0325\3\2\2\2")
        buf.write("\u0327\u0328\3\2\2\2\u0328#\3\2\2\2\u0329\u0327\3\2\2")
        buf.write("\2\u032a\u032e\5\"\22\2\u032b\u032d\7}\2\2\u032c\u032b")
        buf.write("\3\2\2\2\u032d\u0330\3\2\2\2\u032e\u032c\3\2\2\2\u032e")
        buf.write("\u032f\3\2\2\2\u032f\u0341\3\2\2\2\u0330\u032e\3\2\2\2")
        buf.write("\u0331\u0335\t\13\2\2\u0332\u0334\7}\2\2\u0333\u0332\3")
        buf.write("\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0336")
        buf.write("\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3\2\2\2\u0338")
        buf.write("\u033c\5\"\22\2\u0339\u033b\7}\2\2\u033a\u0339\3\2\2\2")
        buf.write("\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3")
        buf.write("\2\2\2\u033d\u0340\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0331")
        buf.write("\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f\3\2\2\2\u0341")
        buf.write("\u0342\3\2\2\2\u0342%\3\2\2\2\u0343\u0341\3\2\2\2\u0344")
        buf.write("\u0348\5$\23\2\u0345\u0347\7}\2\2\u0346\u0345\3\2\2\2")
        buf.write("\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3")
        buf.write("\2\2\2\u0349\u035b\3\2\2\2\u034a\u0348\3\2\2\2\u034b\u034f")
        buf.write("\7Z\2\2\u034c\u034e\7}\2\2\u034d\u034c\3\2\2\2\u034e\u0351")
        buf.write("\3\2\2\2\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0352\3\2\2\2\u0351\u034f\3\2\2\2\u0352\u0356\5$\23\2")
        buf.write("\u0353\u0355\7}\2\2\u0354\u0353\3\2\2\2\u0355\u0358\3")
        buf.write("\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u035a")
        buf.write("\3\2\2\2\u0358\u0356\3\2\2\2\u0359\u034b\3\2\2\2\u035a")
        buf.write("\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\'\3\2\2\2\u035d\u035b\3\2\2\2\u035e\u0362\5&\24")
        buf.write("\2\u035f\u0361\7}\2\2\u0360\u035f\3\2\2\2\u0361\u0364")
        buf.write("\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u0375\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0369\7^\2\2")
        buf.write("\u0366\u0368\7}\2\2\u0367\u0366\3\2\2\2\u0368\u036b\3")
        buf.write("\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c")
        buf.write("\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u0370\5&\24\2\u036d")
        buf.write("\u036f\7}\2\2\u036e\u036d\3\2\2\2\u036f\u0372\3\2\2\2")
        buf.write("\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0374\3")
        buf.write("\2\2\2\u0372\u0370\3\2\2\2\u0373\u0365\3\2\2\2\u0374\u0377")
        buf.write("\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write(")\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u037c\5(\25\2\u0379")
        buf.write("\u037b\7}\2\2\u037a\u0379\3\2\2\2\u037b\u037e\3\2\2\2")
        buf.write("\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u038f\3")
        buf.write("\2\2\2\u037e\u037c\3\2\2\2\u037f\u0383\7[\2\2\u0380\u0382")
        buf.write("\7}\2\2\u0381\u0380\3\2\2\2\u0382\u0385\3\2\2\2\u0383")
        buf.write("\u0381\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2")
        buf.write("\u0385\u0383\3\2\2\2\u0386\u038a\5(\25\2\u0387\u0389\7")
        buf.write("}\2\2\u0388\u0387\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388")
        buf.write("\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038e\3\2\2\2\u038c")
        buf.write("\u038a\3\2\2\2\u038d\u037f\3\2\2\2\u038e\u0391\3\2\2\2")
        buf.write("\u038f\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390+\3\2\2")
        buf.write("\2\u0391\u038f\3\2\2\2\u0392\u0396\5*\26\2\u0393\u0395")
        buf.write("\7}\2\2\u0394\u0393\3\2\2\2\u0395\u0398\3\2\2\2\u0396")
        buf.write("\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u03a9\3\2\2\2")
        buf.write("\u0398\u0396\3\2\2\2\u0399\u039d\7\\\2\2\u039a\u039c\7")
        buf.write("}\2\2\u039b\u039a\3\2\2\2\u039c\u039f\3\2\2\2\u039d\u039b")
        buf.write("\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0\3\2\2\2\u039f")
        buf.write("\u039d\3\2\2\2\u03a0\u03a4\5*\26\2\u03a1\u03a3\7}\2\2")
        buf.write("\u03a2\u03a1\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4\u03a2\3")
        buf.write("\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6\u03a4")
        buf.write("\3\2\2\2\u03a7\u0399\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9")
        buf.write("\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa-\3\2\2\2\u03ab")
        buf.write("\u03a9\3\2\2\2\u03ac\u03b0\5,\27\2\u03ad\u03af\7}\2\2")
        buf.write("\u03ae\u03ad\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae\3")
        buf.write("\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03c3\3\2\2\2\u03b2\u03b0")
        buf.write("\3\2\2\2\u03b3\u03b7\7]\2\2\u03b4\u03b6\7}\2\2\u03b5\u03b4")
        buf.write("\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u03ba\3\2\2\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03ba\u03be\5,\27\2\u03bb\u03bd\7}\2\2\u03bc\u03bb\3")
        buf.write("\2\2\2\u03bd\u03c0\3\2\2\2\u03be\u03bc\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3\2\2\2\u03c1")
        buf.write("\u03b3\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2")
        buf.write("\u03c3\u03c4\3\2\2\2\u03c4/\3\2\2\2\u03c5\u03c3\3\2\2")
        buf.write("\2\u03c6\u03ca\5.\30\2\u03c7\u03c9\7}\2\2\u03c8\u03c7")
        buf.write("\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2\u03ca")
        buf.write("\u03cb\3\2\2\2\u03cb\u03e9\3\2\2\2\u03cc\u03ca\3\2\2\2")
        buf.write("\u03cd\u03d1\7c\2\2\u03ce\u03d0\7}\2\2\u03cf\u03ce\3\2")
        buf.write("\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4")
        buf.write("\u03d8\5\66\34\2\u03d5\u03d7\7}\2\2\u03d6\u03d5\3\2\2")
        buf.write("\2\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9")
        buf.write("\3\2\2\2\u03d9\u03db\3\2\2\2\u03da\u03d8\3\2\2\2\u03db")
        buf.write("\u03df\7d\2\2\u03dc\u03de\7}\2\2\u03dd\u03dc\3\2\2\2\u03de")
        buf.write("\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2")
        buf.write("\u03e0\u03e2\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03e6\5")
        buf.write("\60\31\2\u03e3\u03e5\7}\2\2\u03e4\u03e3\3\2\2\2\u03e5")
        buf.write("\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2")
        buf.write("\u03e7\u03ea\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e9\u03cd\3")
        buf.write("\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\61\3\2\2\2\u03eb\u03fe")
        buf.write("\5\60\31\2\u03ec\u03f0\5\26\f\2\u03ed\u03ef\7}\2\2\u03ee")
        buf.write("\u03ed\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2")
        buf.write("\u03f0\u03f1\3\2\2\2\u03f1\u03f3\3\2\2\2\u03f2\u03f0\3")
        buf.write("\2\2\2\u03f3\u03f7\5\64\33\2\u03f4\u03f6\7}\2\2\u03f5")
        buf.write("\u03f4\3\2\2\2\u03f6\u03f9\3\2\2\2\u03f7\u03f5\3\2\2\2")
        buf.write("\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03f7\3")
        buf.write("\2\2\2\u03fa\u03fb\5\62\32\2\u03fb\u03fe\3\2\2\2\u03fc")
        buf.write("\u03fe\7y\2\2\u03fd\u03eb\3\2\2\2\u03fd\u03ec\3\2\2\2")
        buf.write("\u03fd\u03fc\3\2\2\2\u03fe\63\3\2\2\2\u03ff\u0400\t\f")
        buf.write("\2\2\u0400\65\3\2\2\2\u0401\u0405\5\62\32\2\u0402\u0404")
        buf.write("\7}\2\2\u0403\u0402\3\2\2\2\u0404\u0407\3\2\2\2\u0405")
        buf.write("\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0418\3\2\2\2")
        buf.write("\u0407\u0405\3\2\2\2\u0408\u040c\7f\2\2\u0409\u040b\7")
        buf.write("}\2\2\u040a\u0409\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a")
        buf.write("\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040f\3\2\2\2\u040e")
        buf.write("\u040c\3\2\2\2\u040f\u0413\5\62\32\2\u0410\u0412\7}\2")
        buf.write("\2\u0411\u0410\3\2\2\2\u0412\u0415\3\2\2\2\u0413\u0411")
        buf.write("\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0417\3\2\2\2\u0415")
        buf.write("\u0413\3\2\2\2\u0416\u0408\3\2\2\2\u0417\u041a\3\2\2\2")
        buf.write("\u0418\u0416\3\2\2\2\u0418\u0419\3\2\2\2\u0419\67\3\2")
        buf.write("\2\2\u041a\u0418\3\2\2\2\u041b\u041c\5\60\31\2\u041c9")
        buf.write("\3\2\2\2\u041d\u0421\5<\37\2\u041e\u0420\7}\2\2\u041f")
        buf.write("\u041e\3\2\2\2\u0420\u0423\3\2\2\2\u0421\u041f\3\2\2\2")
        buf.write("\u0421\u0422\3\2\2\2\u0422\u0425\3\2\2\2\u0423\u0421\3")
        buf.write("\2\2\2\u0424\u0426\5@!\2\u0425\u0424\3\2\2\2\u0425\u0426")
        buf.write("\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\5\u00caf\2\u0428")
        buf.write("\u042b\3\2\2\2\u0429\u042b\5\u0094K\2\u042a\u041d\3\2")
        buf.write("\2\2\u042a\u0429\3\2\2\2\u042b;\3\2\2\2\u042c\u0430\5")
        buf.write("> \2\u042d\u042f\7}\2\2\u042e\u042d\3\2\2\2\u042f\u0432")
        buf.write("\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431")
        buf.write("\u0434\3\2\2\2\u0432\u0430\3\2\2\2\u0433\u042c\3\2\2\2")
        buf.write("\u0434\u0435\3\2\2\2\u0435\u0433\3\2\2\2\u0435\u0436\3")
        buf.write("\2\2\2\u0436=\3\2\2\2\u0437\u043e\5F$\2\u0438\u043e\5")
        buf.write("D#\2\u0439\u043e\5H%\2\u043a\u043e\5b\62\2\u043b\u043e")
        buf.write("\5d\63\2\u043c\u043e\5f\64\2\u043d\u0437\3\2\2\2\u043d")
        buf.write("\u0438\3\2\2\2\u043d\u0439\3\2\2\2\u043d\u043a\3\2\2\2")
        buf.write("\u043d\u043b\3\2\2\2\u043d\u043c\3\2\2\2\u043e?\3\2\2")
        buf.write("\2\u043f\u0443\5B\"\2\u0440\u0442\7}\2\2\u0441\u0440\3")
        buf.write("\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441\3\2\2\2\u0443\u0444")
        buf.write("\3\2\2\2\u0444\u0456\3\2\2\2\u0445\u0443\3\2\2\2\u0446")
        buf.write("\u044a\7f\2\2\u0447\u0449\7}\2\2\u0448\u0447\3\2\2\2\u0449")
        buf.write("\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a\u044b\3\2\2\2")
        buf.write("\u044b\u044d\3\2\2\2\u044c\u044a\3\2\2\2\u044d\u0451\5")
        buf.write("B\"\2\u044e\u0450\7}\2\2\u044f\u044e\3\2\2\2\u0450\u0453")
        buf.write("\3\2\2\2\u0451\u044f\3\2\2\2\u0451\u0452\3\2\2\2\u0452")
        buf.write("\u0455\3\2\2\2\u0453\u0451\3\2\2\2\u0454\u0446\3\2\2\2")
        buf.write("\u0455\u0458\3\2\2\2\u0456\u0454\3\2\2\2\u0456\u0457\3")
        buf.write("\2\2\2\u0457A\3\2\2\2\u0458\u0456\3\2\2\2\u0459\u045d")
        buf.write("\5h\65\2\u045a\u045c\7}\2\2\u045b\u045a\3\2\2\2\u045c")
        buf.write("\u045f\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2")
        buf.write("\u045e\u046e\3\2\2\2\u045f\u045d\3\2\2\2\u0460\u0464\7")
        buf.write("g\2\2\u0461\u0463\7}\2\2\u0462\u0461\3\2\2\2\u0463\u0466")
        buf.write("\3\2\2\2\u0464\u0462\3\2\2\2\u0464\u0465\3\2\2\2\u0465")
        buf.write("\u0467\3\2\2\2\u0466\u0464\3\2\2\2\u0467\u046b\5\u008a")
        buf.write("F\2\u0468\u046a\7}\2\2\u0469\u0468\3\2\2\2\u046a\u046d")
        buf.write("\3\2\2\2\u046b\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c")
        buf.write("\u046f\3\2\2\2\u046d\u046b\3\2\2\2\u046e\u0460\3\2\2\2")
        buf.write("\u046e\u046f\3\2\2\2\u046fC\3\2\2\2\u0470\u0471\7 \2\2")
        buf.write("\u0471E\3\2\2\2\u0472\u0473\t\r\2\2\u0473G\3\2\2\2\u0474")
        buf.write("\u049b\b%\1\2\u0475\u049c\7:\2\2\u0476\u049c\7\30\2\2")
        buf.write("\u0477\u049c\7.\2\2\u0478\u049c\7(\2\2\u0479\u049c\7\63")
        buf.write("\2\2\u047a\u049c\7*\2\2\u047b\u049c\7#\2\2\u047c\u049c")
        buf.write("\7\35\2\2\u047d\u049c\7/\2\2\u047e\u0482\7)\2\2\u047f")
        buf.write("\u0481\7}\2\2\u0480\u047f\3\2\2\2\u0481\u0484\3\2\2\2")
        buf.write("\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\3")
        buf.write("\2\2\2\u0484\u0482\3\2\2\2\u0485\u0489\7M\2\2\u0486\u0488")
        buf.write("\7}\2\2\u0487\u0486\3\2\2\2\u0488\u048b\3\2\2\2\u0489")
        buf.write("\u0487\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c\3\2\2\2")
        buf.write("\u048b\u0489\3\2\2\2\u048c\u0490\5z>\2\u048d\u048f\7}")
        buf.write("\2\2\u048e\u048d\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u048e")
        buf.write("\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0493\3\2\2\2\u0492")
        buf.write("\u0490\3\2\2\2\u0493\u0494\7O\2\2\u0494\u049c\3\2\2\2")
        buf.write("\u0495\u049c\79\2\2\u0496\u049c\7@\2\2\u0497\u049c\7A")
        buf.write("\2\2\u0498\u049c\7\6\2\2\u0499\u049c\7\7\2\2\u049a\u049c")
        buf.write("\7\b\2\2\u049b\u0475\3\2\2\2\u049b\u0476\3\2\2\2\u049b")
        buf.write("\u0477\3\2\2\2\u049b\u0478\3\2\2\2\u049b\u0479\3\2\2\2")
        buf.write("\u049b\u047a\3\2\2\2\u049b\u047b\3\2\2\2\u049b\u047c\3")
        buf.write("\2\2\2\u049b\u047d\3\2\2\2\u049b\u047e\3\2\2\2\u049b\u0495")
        buf.write("\3\2\2\2\u049b\u0496\3\2\2\2\u049b\u0497\3\2\2\2\u049b")
        buf.write("\u0498\3\2\2\2\u049b\u0499\3\2\2\2\u049b\u049a\3\2\2\2")
        buf.write("\u049c\u04cf\3\2\2\2\u049d\u04a1\7\3\2\2\u049e\u04a0\7")
        buf.write("}\2\2\u049f\u049e\3\2\2\2\u04a0\u04a3\3\2\2\2\u04a1\u049f")
        buf.write("\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2\u04a3")
        buf.write("\u04a1\3\2\2\2\u04a4\u04a8\7G\2\2\u04a5\u04a7\7}\2\2\u04a6")
        buf.write("\u04a5\3\2\2\2\u04a7\u04aa\3\2\2\2\u04a8\u04a6\3\2\2\2")
        buf.write("\u04a8\u04a9\3\2\2\2\u04a9\u04ab\3\2\2\2\u04aa\u04a8\3")
        buf.write("\2\2\2\u04ab\u04af\t\16\2\2\u04ac\u04ae\7}\2\2\u04ad\u04ac")
        buf.write("\3\2\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad\3\2\2\2\u04af")
        buf.write("\u04b0\3\2\2\2\u04b0\u04b2\3\2\2\2\u04b1\u04af\3\2\2\2")
        buf.write("\u04b2\u04cf\7H\2\2\u04b3\u04cf\5`\61\2\u04b4\u04cf\5")
        buf.write("J&\2\u04b5\u04cf\5X-\2\u04b6\u04cf\5\u0088E\2\u04b7\u04bb")
        buf.write("\t\17\2\2\u04b8\u04ba\7}\2\2\u04b9\u04b8\3\2\2\2\u04ba")
        buf.write("\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2")
        buf.write("\u04bc\u04be\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04c2\7")
        buf.write("G\2\2\u04bf\u04c1\7}\2\2\u04c0\u04bf\3\2\2\2\u04c1\u04c4")
        buf.write("\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3")
        buf.write("\u04c5\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5\u04c9\58\35\2")
        buf.write("\u04c6\u04c8\7}\2\2\u04c7\u04c6\3\2\2\2\u04c8\u04cb\3")
        buf.write("\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc")
        buf.write("\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04cd\7H\2\2\u04cd")
        buf.write("\u04cf\3\2\2\2\u04ce\u0474\3\2\2\2\u04ce\u049d\3\2\2\2")
        buf.write("\u04ce\u04b3\3\2\2\2\u04ce\u04b4\3\2\2\2\u04ce\u04b5\3")
        buf.write("\2\2\2\u04ce\u04b6\3\2\2\2\u04ce\u04b7\3\2\2\2\u04cf\u04da")
        buf.write("\3\2\2\2\u04d0\u04d4\f\3\2\2\u04d1\u04d3\7}\2\2\u04d2")
        buf.write("\u04d1\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d2\3\2\2\2")
        buf.write("\u04d4\u04d5\3\2\2\2\u04d5\u04d7\3\2\2\2\u04d6\u04d4\3")
        buf.write("\2\2\2\u04d7\u04d9\5v<\2\u04d8\u04d0\3\2\2\2\u04d9\u04dc")
        buf.write("\3\2\2\2\u04da\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db")
        buf.write("I\3\2\2\2\u04dc\u04da\3\2\2\2\u04dd\u04e1\5L\'\2\u04de")
        buf.write("\u04e0\7}\2\2\u04df\u04de\3\2\2\2\u04e0\u04e3\3\2\2\2")
        buf.write("\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04eb\3")
        buf.write("\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e8\7w\2\2\u04e5\u04e7")
        buf.write("\7}\2\2\u04e6\u04e5\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8")
        buf.write("\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ec\3\2\2\2")
        buf.write("\u04ea\u04e8\3\2\2\2\u04eb\u04e4\3\2\2\2\u04eb\u04ec\3")
        buf.write("\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04f1\7K\2\2\u04ee\u04f0")
        buf.write("\7}\2\2\u04ef\u04ee\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1")
        buf.write("\u04ef\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f7\3\2\2\2")
        buf.write("\u04f3\u04f1\3\2\2\2\u04f4\u04f6\5N(\2\u04f5\u04f4\3\2")
        buf.write("\2\2\u04f6\u04f9\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f7\u04f8")
        buf.write("\3\2\2\2\u04f8\u04fd\3\2\2\2\u04f9\u04f7\3\2\2\2\u04fa")
        buf.write("\u04fc\7}\2\2\u04fb\u04fa\3\2\2\2\u04fc\u04ff\3\2\2\2")
        buf.write("\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0500\3")
        buf.write("\2\2\2\u04ff\u04fd\3\2\2\2\u0500\u0501\7L\2\2\u0501\u050c")
        buf.write("\3\2\2\2\u0502\u0506\5L\'\2\u0503\u0505\7}\2\2\u0504\u0503")
        buf.write("\3\2\2\2\u0505\u0508\3\2\2\2\u0506\u0504\3\2\2\2\u0506")
        buf.write("\u0507\3\2\2\2\u0507\u0509\3\2\2\2\u0508\u0506\3\2\2\2")
        buf.write("\u0509\u050a\7w\2\2\u050a\u050c\3\2\2\2\u050b\u04dd\3")
        buf.write("\2\2\2\u050b\u0502\3\2\2\2\u050cK\3\2\2\2\u050d\u050e")
        buf.write("\t\20\2\2\u050eM\3\2\2\2\u050f\u0511\7}\2\2\u0510\u050f")
        buf.write("\3\2\2\2\u0511\u0514\3\2\2\2\u0512\u0510\3\2\2\2\u0512")
        buf.write("\u0513\3\2\2\2\u0513\u0515\3\2\2\2\u0514\u0512\3\2\2\2")
        buf.write("\u0515\u0519\5P)\2\u0516\u0518\7}\2\2\u0517\u0516\3\2")
        buf.write("\2\2\u0518\u051b\3\2\2\2\u0519\u0517\3\2\2\2\u0519\u051a")
        buf.write("\3\2\2\2\u051a\u051d\3\2\2\2\u051b\u0519\3\2\2\2\u051c")
        buf.write("\u0512\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u051c\3\2\2\2")
        buf.write("\u051e\u051f\3\2\2\2\u051fO\3\2\2\2\u0520\u0524\5R*\2")
        buf.write("\u0521\u0523\7}\2\2\u0522\u0521\3\2\2\2\u0523\u0526\3")
        buf.write("\2\2\2\u0524\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0528")
        buf.write("\3\2\2\2\u0526\u0524\3\2\2\2\u0527\u0529\5T+\2\u0528\u0527")
        buf.write("\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2\u052a")
        buf.write("\u052b\5\u00caf\2\u052b\u052e\3\2\2\2\u052c\u052e\5\u0094")
        buf.write("K\2\u052d\u0520\3\2\2\2\u052d\u052c\3\2\2\2\u052eQ\3\2")
        buf.write("\2\2\u052f\u0532\5H%\2\u0530\u0532\5b\62\2\u0531\u052f")
        buf.write("\3\2\2\2\u0531\u0530\3\2\2\2\u0532\u0536\3\2\2\2\u0533")
        buf.write("\u0535\7}\2\2\u0534\u0533\3\2\2\2\u0535\u0538\3\2\2\2")
        buf.write("\u0536\u0534\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u053a\3")
        buf.write("\2\2\2\u0538\u0536\3\2\2\2\u0539\u053b\5R*\2\u053a\u0539")
        buf.write("\3\2\2\2\u053a\u053b\3\2\2\2\u053bS\3\2\2\2\u053c\u0540")
        buf.write("\5V,\2\u053d\u053f\7}\2\2\u053e\u053d\3\2\2\2\u053f\u0542")
        buf.write("\3\2\2\2\u0540\u053e\3\2\2\2\u0540\u0541\3\2\2\2\u0541")
        buf.write("\u054d\3\2\2\2\u0542\u0540\3\2\2\2\u0543\u0547\7f\2\2")
        buf.write("\u0544\u0546\7}\2\2\u0545\u0544\3\2\2\2\u0546\u0549\3")
        buf.write("\2\2\2\u0547\u0545\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u054a")
        buf.write("\3\2\2\2\u0549\u0547\3\2\2\2\u054a\u054c\5V,\2\u054b\u0543")
        buf.write("\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b\3\2\2\2\u054d")
        buf.write("\u054e\3\2\2\2\u054eU\3\2\2\2\u054f\u054d\3\2\2\2\u0550")
        buf.write("\u0563\5h\65\2\u0551\u0553\5h\65\2\u0552\u0551\3\2\2\2")
        buf.write("\u0552\u0553\3\2\2\2\u0553\u0557\3\2\2\2\u0554\u0556\7")
        buf.write("}\2\2\u0555\u0554\3\2\2\2\u0556\u0559\3\2\2\2\u0557\u0555")
        buf.write("\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055a\3\2\2\2\u0559")
        buf.write("\u0557\3\2\2\2\u055a\u055e\7d\2\2\u055b\u055d\7}\2\2\u055c")
        buf.write("\u055b\3\2\2\2\u055d\u0560\3\2\2\2\u055e\u055c\3\2\2\2")
        buf.write("\u055e\u055f\3\2\2\2\u055f\u0561\3\2\2\2\u0560\u055e\3")
        buf.write("\2\2\2\u0561\u0563\58\35\2\u0562\u0550\3\2\2\2\u0562\u0552")
        buf.write("\3\2\2\2\u0563W\3\2\2\2\u0564\u0568\7!\2\2\u0565\u0567")
        buf.write("\7}\2\2\u0566\u0565\3\2\2\2\u0567\u056a\3\2\2\2\u0568")
        buf.write("\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056c\3\2\2\2")
        buf.write("\u056a\u0568\3\2\2\2\u056b\u056d\7w\2\2\u056c\u056b\3")
        buf.write("\2\2\2\u056c\u056d\3\2\2\2\u056d\u0571\3\2\2\2\u056e\u0570")
        buf.write("\7}\2\2\u056f\u056e\3\2\2\2\u0570\u0573\3\2\2\2\u0571")
        buf.write("\u056f\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0574\3\2\2\2")
        buf.write("\u0573\u0571\3\2\2\2\u0574\u0578\7K\2\2\u0575\u0577\7")
        buf.write("}\2\2\u0576\u0575\3\2\2\2\u0577\u057a\3\2\2\2\u0578\u0576")
        buf.write("\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057b\3\2\2\2\u057a")
        buf.write("\u0578\3\2\2\2\u057b\u057f\5Z.\2\u057c\u057e\7}\2\2\u057d")
        buf.write("\u057c\3\2\2\2\u057e\u0581\3\2\2\2\u057f\u057d\3\2\2\2")
        buf.write("\u057f\u0580\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f\3")
        buf.write("\2\2\2\u0582\u0584\7f\2\2\u0583\u0582\3\2\2\2\u0583\u0584")
        buf.write("\3\2\2\2\u0584\u0588\3\2\2\2\u0585\u0587\7}\2\2\u0586")
        buf.write("\u0585\3\2\2\2\u0587\u058a\3\2\2\2\u0588\u0586\3\2\2\2")
        buf.write("\u0588\u0589\3\2\2\2\u0589\u058b\3\2\2\2\u058a\u0588\3")
        buf.write("\2\2\2\u058b\u058c\7L\2\2\u058c\u0596\3\2\2\2\u058d\u0591")
        buf.write("\7!\2\2\u058e\u0590\7}\2\2\u058f\u058e\3\2\2\2\u0590\u0593")
        buf.write("\3\2\2\2\u0591\u058f\3\2\2\2\u0591\u0592\3\2\2\2\u0592")
        buf.write("\u0594\3\2\2\2\u0593\u0591\3\2\2\2\u0594\u0596\7w\2\2")
        buf.write("\u0595\u0564\3\2\2\2\u0595\u058d\3\2\2\2\u0596Y\3\2\2")
        buf.write("\2\u0597\u059b\5\\/\2\u0598\u059a\7}\2\2\u0599\u0598\3")
        buf.write("\2\2\2\u059a\u059d\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c")
        buf.write("\3\2\2\2\u059c\u05ae\3\2\2\2\u059d\u059b\3\2\2\2\u059e")
        buf.write("\u05a2\7f\2\2\u059f\u05a1\7}\2\2\u05a0\u059f\3\2\2\2\u05a1")
        buf.write("\u05a4\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a2\u05a3\3\2\2\2")
        buf.write("\u05a3\u05a5\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a5\u05a9\5")
        buf.write("\\/\2\u05a6\u05a8\7}\2\2\u05a7\u05a6\3\2\2\2\u05a8\u05ab")
        buf.write("\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa")
        buf.write("\u05ad\3\2\2\2\u05ab\u05a9\3\2\2\2\u05ac\u059e\3\2\2\2")
        buf.write("\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3")
        buf.write("\2\2\2\u05af[\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b1\u05b5")
        buf.write("\5^\60\2\u05b2\u05b4\7}\2\2\u05b3\u05b2\3\2\2\2\u05b4")
        buf.write("\u05b7\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2")
        buf.write("\u05b6\u05c6\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8\u05bc\7")
        buf.write("g\2\2\u05b9\u05bb\7}\2\2\u05ba\u05b9\3\2\2\2\u05bb\u05be")
        buf.write("\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd")
        buf.write("\u05bf\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf\u05c3\58\35\2")
        buf.write("\u05c0\u05c2\7}\2\2\u05c1\u05c0\3\2\2\2\u05c2\u05c5\3")
        buf.write("\2\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c7")
        buf.write("\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c6\u05b8\3\2\2\2\u05c6")
        buf.write("\u05c7\3\2\2\2\u05c7]\3\2\2\2\u05c8\u05c9\7w\2\2\u05c9")
        buf.write("_\3\2\2\2\u05ca\u05ce\7?\2\2\u05cb\u05cd\7}\2\2\u05cc")
        buf.write("\u05cb\3\2\2\2\u05cd\u05d0\3\2\2\2\u05ce\u05cc\3\2\2\2")
        buf.write("\u05ce\u05cf\3\2\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05ce\3")
        buf.write("\2\2\2\u05d1\u05d5\7G\2\2\u05d2\u05d4\7}\2\2\u05d3\u05d2")
        buf.write("\3\2\2\2\u05d4\u05d7\3\2\2\2\u05d5\u05d3\3\2\2\2\u05d5")
        buf.write("\u05d6\3\2\2\2\u05d6\u05d8\3\2\2\2\u05d7\u05d5\3\2\2\2")
        buf.write("\u05d8\u05dc\5\u0082B\2\u05d9\u05db\7}\2\2\u05da\u05d9")
        buf.write("\3\2\2\2\u05db\u05de\3\2\2\2\u05dc\u05da\3\2\2\2\u05dc")
        buf.write("\u05dd\3\2\2\2\u05dd\u05df\3\2\2\2\u05de\u05dc\3\2\2\2")
        buf.write("\u05df\u05e3\7H\2\2\u05e0\u05e2\7}\2\2\u05e1\u05e0\3\2")
        buf.write("\2\2\u05e2\u05e5\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e3\u05e4")
        buf.write("\3\2\2\2\u05e4a\3\2\2\2\u05e5\u05e3\3\2\2\2\u05e6\u05e7")
        buf.write("\t\21\2\2\u05e7c\3\2\2\2\u05e8\u0602\t\22\2\2\u05e9\u0602")
        buf.write("\5n8\2\u05ea\u05ee\7\f\2\2\u05eb\u05ed\7}\2\2\u05ec\u05eb")
        buf.write("\3\2\2\2\u05ed\u05f0\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ee")
        buf.write("\u05ef\3\2\2\2\u05ef\u05f1\3\2\2\2\u05f0\u05ee\3\2\2\2")
        buf.write("\u05f1\u05f5\7G\2\2\u05f2\u05f4\7}\2\2\u05f3\u05f2\3\2")
        buf.write("\2\2\u05f4\u05f7\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6")
        buf.write("\3\2\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8")
        buf.write("\u05fc\7w\2\2\u05f9\u05fb\7}\2\2\u05fa\u05f9\3\2\2\2\u05fb")
        buf.write("\u05fe\3\2\2\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3\2\2\2")
        buf.write("\u05fd\u05ff\3\2\2\2\u05fe\u05fc\3\2\2\2\u05ff\u0602\7")
        buf.write("H\2\2\u0600\u0602\5D#\2\u0601\u05e8\3\2\2\2\u0601\u05e9")
        buf.write("\3\2\2\2\u0601\u05ea\3\2\2\2\u0601\u0600\3\2\2\2\u0602")
        buf.write("e\3\2\2\2\u0603\u0607\7=\2\2\u0604\u0606\7}\2\2\u0605")
        buf.write("\u0604\3\2\2\2\u0606\u0609\3\2\2\2\u0607\u0605\3\2\2\2")
        buf.write("\u0607\u0608\3\2\2\2\u0608\u060a\3\2\2\2\u0609\u0607\3")
        buf.write("\2\2\2\u060a\u060e\7G\2\2\u060b\u060d\7}\2\2\u060c\u060b")
        buf.write("\3\2\2\2\u060d\u0610\3\2\2\2\u060e\u060c\3\2\2\2\u060e")
        buf.write("\u060f\3\2\2\2\u060f\u0613\3\2\2\2\u0610\u060e\3\2\2\2")
        buf.write("\u0611\u0614\5\u0082B\2\u0612\u0614\58\35\2\u0613\u0611")
        buf.write("\3\2\2\2\u0613\u0612\3\2\2\2\u0614\u0618\3\2\2\2\u0615")
        buf.write("\u0617\7}\2\2\u0616\u0615\3\2\2\2\u0617\u061a\3\2\2\2")
        buf.write("\u0618\u0616\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061b\3")
        buf.write("\2\2\2\u061a\u0618\3\2\2\2\u061b\u061c\7H\2\2\u061cg\3")
        buf.write("\2\2\2\u061d\u061f\5v<\2\u061e\u061d\3\2\2\2\u061e\u061f")
        buf.write("\3\2\2\2\u061f\u0623\3\2\2\2\u0620\u0622\7}\2\2\u0621")
        buf.write("\u0620\3\2\2\2\u0622\u0625\3\2\2\2\u0623\u0621\3\2\2\2")
        buf.write("\u0623\u0624\3\2\2\2\u0624\u0626\3\2\2\2\u0625\u0623\3")
        buf.write("\2\2\2\u0626\u062a\5j\66\2\u0627\u0629\7}\2\2\u0628\u0627")
        buf.write("\3\2\2\2\u0629\u062c\3\2\2\2\u062a\u0628\3\2\2\2\u062a")
        buf.write("\u062b\3\2\2\2\u062b\u0630\3\2\2\2\u062c\u062a\3\2\2\2")
        buf.write("\u062d\u062f\5l\67\2\u062e\u062d\3\2\2\2\u062f\u0632\3")
        buf.write("\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631\3\2\2\2\u0631i")
        buf.write("\3\2\2\2\u0632\u0630\3\2\2\2\u0633\u0634\b\66\1\2\u0634")
        buf.write("\u0675\7w\2\2\u0635\u0639\7G\2\2\u0636\u0638\7}\2\2\u0637")
        buf.write("\u0636\3\2\2\2\u0638\u063b\3\2\2\2\u0639\u0637\3\2\2\2")
        buf.write("\u0639\u063a\3\2\2\2\u063a\u063c\3\2\2\2\u063b\u0639\3")
        buf.write("\2\2\2\u063c\u0640\5h\65\2\u063d\u063f\7}\2\2\u063e\u063d")
        buf.write("\3\2\2\2\u063f\u0642\3\2\2\2\u0640\u063e\3\2\2\2\u0640")
        buf.write("\u0641\3\2\2\2\u0641\u0643\3\2\2\2\u0642\u0640\3\2\2\2")
        buf.write("\u0643\u0644\7H\2\2\u0644\u0675\3\2\2\2\u0645\u0649\7")
        buf.write("w\2\2\u0646\u0648\7}\2\2\u0647\u0646\3\2\2\2\u0648\u064b")
        buf.write("\3\2\2\2\u0649\u0647\3\2\2\2\u0649\u064a\3\2\2\2\u064a")
        buf.write("\u064c\3\2\2\2\u064b\u0649\3\2\2\2\u064c\u0650\7d\2\2")
        buf.write("\u064d\u064f\7}\2\2\u064e\u064d\3\2\2\2\u064f\u0652\3")
        buf.write("\2\2\2\u0650\u064e\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0653")
        buf.write("\3\2\2\2\u0652\u0650\3\2\2\2\u0653\u0675\7y\2\2\u0654")
        buf.write("\u0658\7G\2\2\u0655\u0657\7}\2\2\u0656\u0655\3\2\2\2\u0657")
        buf.write("\u065a\3\2\2\2\u0658\u0656\3\2\2\2\u0658\u0659\3\2\2\2")
        buf.write("\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2\2\u065b\u065d\5")
        buf.write("H%\2\u065c\u065b\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u0661")
        buf.write("\3\2\2\2\u065e\u0660\7}\2\2\u065f\u065e\3\2\2\2\u0660")
        buf.write("\u0663\3\2\2\2\u0661\u065f\3\2\2\2\u0661\u0662\3\2\2\2")
        buf.write("\u0662\u0664\3\2\2\2\u0663\u0661\3\2\2\2\u0664\u0668\5")
        buf.write("v<\2\u0665\u0667\7}\2\2\u0666\u0665\3\2\2\2\u0667\u066a")
        buf.write("\3\2\2\2\u0668\u0666\3\2\2\2\u0668\u0669\3\2\2\2\u0669")
        buf.write("\u066b\3\2\2\2\u066a\u0668\3\2\2\2\u066b\u066f\5j\66\2")
        buf.write("\u066c\u066e\7}\2\2\u066d\u066c\3\2\2\2\u066e\u0671\3")
        buf.write("\2\2\2\u066f\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0672")
        buf.write("\3\2\2\2\u0671\u066f\3\2\2\2\u0672\u0673\7H\2\2\u0673")
        buf.write("\u0675\3\2\2\2\u0674\u0633\3\2\2\2\u0674\u0635\3\2\2\2")
        buf.write("\u0674\u0645\3\2\2\2\u0674\u0654\3\2\2\2\u0675\u072d\3")
        buf.write("\2\2\2\u0676\u067a\f\n\2\2\u0677\u0679\7}\2\2\u0678\u0677")
        buf.write("\3\2\2\2\u0679\u067c\3\2\2\2\u067a\u0678\3\2\2\2\u067a")
        buf.write("\u067b\3\2\2\2\u067b\u067d\3\2\2\2\u067c\u067a\3\2\2\2")
        buf.write("\u067d\u0681\7I\2\2\u067e\u0680\7}\2\2\u067f\u067e\3\2")
        buf.write("\2\2\u0680\u0683\3\2\2\2\u0681\u067f\3\2\2\2\u0681\u0682")
        buf.write("\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681\3\2\2\2\u0684")
        buf.write("\u0686\5x=\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686")
        buf.write("\u068a\3\2\2\2\u0687\u0689\7}\2\2\u0688\u0687\3\2\2\2")
        buf.write("\u0689\u068c\3\2\2\2\u068a\u0688\3\2\2\2\u068a\u068b\3")
        buf.write("\2\2\2\u068b\u068e\3\2\2\2\u068c\u068a\3\2\2\2\u068d\u068f")
        buf.write("\5\62\32\2\u068e\u068d\3\2\2\2\u068e\u068f\3\2\2\2\u068f")
        buf.write("\u0693\3\2\2\2\u0690\u0692\7}\2\2\u0691\u0690\3\2\2\2")
        buf.write("\u0692\u0695\3\2\2\2\u0693\u0691\3\2\2\2\u0693\u0694\3")
        buf.write("\2\2\2\u0694\u0696\3\2\2\2\u0695\u0693\3\2\2\2\u0696\u072c")
        buf.write("\7J\2\2\u0697\u069b\f\t\2\2\u0698\u069a\7}\2\2\u0699\u0698")
        buf.write("\3\2\2\2\u069a\u069d\3\2\2\2\u069b\u0699\3\2\2\2\u069b")
        buf.write("\u069c\3\2\2\2\u069c\u069e\3\2\2\2\u069d\u069b\3\2\2\2")
        buf.write("\u069e\u06a2\7I\2\2\u069f\u06a1\7}\2\2\u06a0\u069f\3\2")
        buf.write("\2\2\u06a1\u06a4\3\2\2\2\u06a2\u06a0\3\2\2\2\u06a2\u06a3")
        buf.write("\3\2\2\2\u06a3\u06a5\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a5")
        buf.write("\u06a9\7\62\2\2\u06a6\u06a8\7}\2\2\u06a7\u06a6\3\2\2\2")
        buf.write("\u06a8\u06ab\3\2\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa\3")
        buf.write("\2\2\2\u06aa\u06ad\3\2\2\2\u06ab\u06a9\3\2\2\2\u06ac\u06ae")
        buf.write("\5x=\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06b2")
        buf.write("\3\2\2\2\u06af\u06b1\7}\2\2\u06b0\u06af\3\2\2\2\u06b1")
        buf.write("\u06b4\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b2\u06b3\3\2\2\2")
        buf.write("\u06b3\u06b5\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u06b9\5")
        buf.write("\62\32\2\u06b6\u06b8\7}\2\2\u06b7\u06b6\3\2\2\2\u06b8")
        buf.write("\u06bb\3\2\2\2\u06b9\u06b7\3\2\2\2\u06b9\u06ba\3\2\2\2")
        buf.write("\u06ba\u06bc\3\2\2\2\u06bb\u06b9\3\2\2\2\u06bc\u06bd\7")
        buf.write("J\2\2\u06bd\u072c\3\2\2\2\u06be\u06c2\f\b\2\2\u06bf\u06c1")
        buf.write("\7}\2\2\u06c0\u06bf\3\2\2\2\u06c1\u06c4\3\2\2\2\u06c2")
        buf.write("\u06c0\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c5\3\2\2\2")
        buf.write("\u06c4\u06c2\3\2\2\2\u06c5\u06c9\7I\2\2\u06c6\u06c8\7")
        buf.write("}\2\2\u06c7\u06c6\3\2\2\2\u06c8\u06cb\3\2\2\2\u06c9\u06c7")
        buf.write("\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cc\3\2\2\2\u06cb")
        buf.write("\u06c9\3\2\2\2\u06cc\u06d0\5x=\2\u06cd\u06cf\7}\2\2\u06ce")
        buf.write("\u06cd\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce\3\2\2\2")
        buf.write("\u06d0\u06d1\3\2\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06d0\3")
        buf.write("\2\2\2\u06d3\u06d4\7\62\2\2\u06d4\u06d8\5\62\32\2\u06d5")
        buf.write("\u06d7\7}\2\2\u06d6\u06d5\3\2\2\2\u06d7\u06da\3\2\2\2")
        buf.write("\u06d8\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3")
        buf.write("\2\2\2\u06da\u06d8\3\2\2\2\u06db\u06dc\7J\2\2\u06dc\u072c")
        buf.write("\3\2\2\2\u06dd\u06e1\f\7\2\2\u06de\u06e0\7}\2\2\u06df")
        buf.write("\u06de\3\2\2\2\u06e0\u06e3\3\2\2\2\u06e1\u06df\3\2\2\2")
        buf.write("\u06e1\u06e2\3\2\2\2\u06e2\u06e4\3\2\2\2\u06e3\u06e1\3")
        buf.write("\2\2\2\u06e4\u06e8\7I\2\2\u06e5\u06e7\7}\2\2\u06e6\u06e5")
        buf.write("\3\2\2\2\u06e7\u06ea\3\2\2\2\u06e8\u06e6\3\2\2\2\u06e8")
        buf.write("\u06e9\3\2\2\2\u06e9\u06ec\3\2\2\2\u06ea\u06e8\3\2\2\2")
        buf.write("\u06eb\u06ed\5x=\2\u06ec\u06eb\3\2\2\2\u06ec\u06ed\3\2")
        buf.write("\2\2\u06ed\u06f1\3\2\2\2\u06ee\u06f0\7}\2\2\u06ef\u06ee")
        buf.write("\3\2\2\2\u06f0\u06f3\3\2\2\2\u06f1\u06ef\3\2\2\2\u06f1")
        buf.write("\u06f2\3\2\2\2\u06f2\u06f4\3\2\2\2\u06f3\u06f1\3\2\2\2")
        buf.write("\u06f4\u06f8\7W\2\2\u06f5\u06f7\7}\2\2\u06f6\u06f5\3\2")
        buf.write("\2\2\u06f7\u06fa\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f8\u06f9")
        buf.write("\3\2\2\2\u06f9\u06fb\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb")
        buf.write("\u072c\7J\2\2\u06fc\u0700\f\6\2\2\u06fd\u06ff\7}\2\2\u06fe")
        buf.write("\u06fd\3\2\2\2\u06ff\u0702\3\2\2\2\u0700\u06fe\3\2\2\2")
        buf.write("\u0700\u0701\3\2\2\2\u0701\u0703\3\2\2\2\u0702\u0700\3")
        buf.write("\2\2\2\u0703\u0707\7G\2\2\u0704\u0706\7}\2\2\u0705\u0704")
        buf.write("\3\2\2\2\u0706\u0709\3\2\2\2\u0707\u0705\3\2\2\2\u0707")
        buf.write("\u0708\3\2\2\2\u0708\u070a\3\2\2\2\u0709\u0707\3\2\2\2")
        buf.write("\u070a\u070e\5z>\2\u070b\u070d\7}\2\2\u070c\u070b\3\2")
        buf.write("\2\2\u070d\u0710\3\2\2\2\u070e\u070c\3\2\2\2\u070e\u070f")
        buf.write("\3\2\2\2\u070f\u0711\3\2\2\2\u0710\u070e\3\2\2\2\u0711")
        buf.write("\u0712\7H\2\2\u0712\u072c\3\2\2\2\u0713\u0717\f\5\2\2")
        buf.write("\u0714\u0716\7}\2\2\u0715\u0714\3\2\2\2\u0716\u0719\3")
        buf.write("\2\2\2\u0717\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u071a")
        buf.write("\3\2\2\2\u0719\u0717\3\2\2\2\u071a\u071e\7G\2\2\u071b")
        buf.write("\u071d\7}\2\2\u071c\u071b\3\2\2\2\u071d\u0720\3\2\2\2")
        buf.write("\u071e\u071c\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0722\3")
        buf.write("\2\2\2\u0720\u071e\3\2\2\2\u0721\u0723\5\u0080A\2\u0722")
        buf.write("\u0721\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0727\3\2\2\2")
        buf.write("\u0724\u0726\7}\2\2\u0725\u0724\3\2\2\2\u0726\u0729\3")
        buf.write("\2\2\2\u0727\u0725\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u072a")
        buf.write("\3\2\2\2\u0729\u0727\3\2\2\2\u072a\u072c\7H\2\2\u072b")
        buf.write("\u0676\3\2\2\2\u072b\u0697\3\2\2\2\u072b\u06be\3\2\2\2")
        buf.write("\u072b\u06dd\3\2\2\2\u072b\u06fc\3\2\2\2\u072b\u0713\3")
        buf.write("\2\2\2\u072c\u072f\3\2\2\2\u072d\u072b\3\2\2\2\u072d\u072e")
        buf.write("\3\2\2\2\u072ek\3\2\2\2\u072f\u072d\3\2\2\2\u0730\u0734")
        buf.write("\7\r\2\2\u0731\u0733\7}\2\2\u0732\u0731\3\2\2\2\u0733")
        buf.write("\u0736\3\2\2\2\u0734\u0732\3\2\2\2\u0734\u0735\3\2\2\2")
        buf.write("\u0735\u0737\3\2\2\2\u0736\u0734\3\2\2\2\u0737\u073b\7")
        buf.write("G\2\2\u0738\u073a\7}\2\2\u0739\u0738\3\2\2\2\u073a\u073d")
        buf.write("\3\2\2\2\u073b\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c")
        buf.write("\u073f\3\2\2\2\u073d\u073b\3\2\2\2\u073e\u0740\7z\2\2")
        buf.write("\u073f\u073e\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u073f\3")
        buf.write("\2\2\2\u0741\u0742\3\2\2\2\u0742\u0746\3\2\2\2\u0743\u0745")
        buf.write("\7}\2\2\u0744\u0743\3\2\2\2\u0745\u0748\3\2\2\2\u0746")
        buf.write("\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0749\3\2\2\2")
        buf.write("\u0748\u0746\3\2\2\2\u0749\u074c\7H\2\2\u074a\u074c\5")
        buf.write("n8\2\u074b\u0730\3\2\2\2\u074b\u074a\3\2\2\2\u074cm\3")
        buf.write("\2\2\2\u074d\u0751\7\16\2\2\u074e\u0750\7}\2\2\u074f\u074e")
        buf.write("\3\2\2\2\u0750\u0753\3\2\2\2\u0751\u074f\3\2\2\2\u0751")
        buf.write("\u0752\3\2\2\2\u0752\u0754\3\2\2\2\u0753\u0751\3\2\2\2")
        buf.write("\u0754\u0758\7G\2\2\u0755\u0757\7}\2\2\u0756\u0755\3\2")
        buf.write("\2\2\u0757\u075a\3\2\2\2\u0758\u0756\3\2\2\2\u0758\u0759")
        buf.write("\3\2\2\2\u0759\u075b\3\2\2\2\u075a\u0758\3\2\2\2\u075b")
        buf.write("\u075f\7G\2\2\u075c\u075e\7}\2\2\u075d\u075c\3\2\2\2\u075e")
        buf.write("\u0761\3\2\2\2\u075f\u075d\3\2\2\2\u075f\u0760\3\2\2\2")
        buf.write("\u0760\u0762\3\2\2\2\u0761\u075f\3\2\2\2\u0762\u0766\5")
        buf.write("p9\2\u0763\u0765\7}\2\2\u0764\u0763\3\2\2\2\u0765\u0768")
        buf.write("\3\2\2\2\u0766\u0764\3\2\2\2\u0766\u0767\3\2\2\2\u0767")
        buf.write("\u0769\3\2\2\2\u0768\u0766\3\2\2\2\u0769\u076d\7H\2\2")
        buf.write("\u076a\u076c\7}\2\2\u076b\u076a\3\2\2\2\u076c\u076f\3")
        buf.write("\2\2\2\u076d\u076b\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0770")
        buf.write("\3\2\2\2\u076f\u076d\3\2\2\2\u0770\u0771\7H\2\2\u0771")
        buf.write("o\3\2\2\2\u0772\u0774\5r:\2\u0773\u0772\3\2\2\2\u0773")
        buf.write("\u0774\3\2\2\2\u0774\u0778\3\2\2\2\u0775\u0777\7}\2\2")
        buf.write("\u0776\u0775\3\2\2\2\u0777\u077a\3\2\2\2\u0778\u0776\3")
        buf.write("\2\2\2\u0778\u0779\3\2\2\2\u0779\u078d\3\2\2\2\u077a\u0778")
        buf.write("\3\2\2\2\u077b\u077f\7f\2\2\u077c\u077e\7}\2\2\u077d\u077c")
        buf.write("\3\2\2\2\u077e\u0781\3\2\2\2\u077f\u077d\3\2\2\2\u077f")
        buf.write("\u0780\3\2\2\2\u0780\u0783\3\2\2\2\u0781\u077f\3\2\2\2")
        buf.write("\u0782\u0784\5r:\2\u0783\u0782\3\2\2\2\u0783\u0784\3\2")
        buf.write("\2\2\u0784\u0788\3\2\2\2\u0785\u0787\7}\2\2\u0786\u0785")
        buf.write("\3\2\2\2\u0787\u078a\3\2\2\2\u0788\u0786\3\2\2\2\u0788")
        buf.write("\u0789\3\2\2\2\u0789\u078c\3\2\2\2\u078a\u0788\3\2\2\2")
        buf.write("\u078b\u077b\3\2\2\2\u078c\u078f\3\2\2\2\u078d\u078b\3")
        buf.write("\2\2\2\u078d\u078e\3\2\2\2\u078eq\3\2\2\2\u078f\u078d")
        buf.write("\3\2\2\2\u0790\u07a8\n\23\2\2\u0791\u0795\7G\2\2\u0792")
        buf.write("\u0794\7}\2\2\u0793\u0792\3\2\2\2\u0794\u0797\3\2\2\2")
        buf.write("\u0795\u0793\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0799\3")
        buf.write("\2\2\2\u0797\u0795\3\2\2\2\u0798\u079a\5\24\13\2\u0799")
        buf.write("\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079e\3\2\2\2")
        buf.write("\u079b\u079d\7}\2\2\u079c\u079b\3\2\2\2\u079d\u07a0\3")
        buf.write("\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u07a1")
        buf.write("\3\2\2\2\u07a0\u079e\3\2\2\2\u07a1\u07a5\7H\2\2\u07a2")
        buf.write("\u07a4\7}\2\2\u07a3\u07a2\3\2\2\2\u07a4\u07a7\3\2\2\2")
        buf.write("\u07a5\u07a3\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a9\3")
        buf.write("\2\2\2\u07a7\u07a5\3\2\2\2\u07a8\u0791\3\2\2\2\u07a8\u07a9")
        buf.write("\3\2\2\2\u07a9s\3\2\2\2\u07aa\u07bc\n\24\2\2\u07ab\u07af")
        buf.write("\7G\2\2\u07ac\u07ae\7}\2\2\u07ad\u07ac\3\2\2\2\u07ae\u07b1")
        buf.write("\3\2\2\2\u07af\u07ad\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0")
        buf.write("\u07b2\3\2\2\2\u07b1\u07af\3\2\2\2\u07b2\u07b6\5t;\2\u07b3")
        buf.write("\u07b5\7}\2\2\u07b4\u07b3\3\2\2\2\u07b5\u07b8\3\2\2\2")
        buf.write("\u07b6\u07b4\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b9\3")
        buf.write("\2\2\2\u07b8\u07b6\3\2\2\2\u07b9\u07ba\7H\2\2\u07ba\u07bc")
        buf.write("\3\2\2\2\u07bb\u07aa\3\2\2\2\u07bb\u07ab\3\2\2\2\u07bc")
        buf.write("\u07bf\3\2\2\2\u07bd\u07bb\3\2\2\2\u07bd\u07be\3\2\2\2")
        buf.write("\u07beu\3\2\2\2\u07bf\u07bd\3\2\2\2\u07c0\u07c4\t\25\2")
        buf.write("\2\u07c1\u07c3\7}\2\2\u07c2\u07c1\3\2\2\2\u07c3\u07c6")
        buf.write("\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5")
        buf.write("\u07c8\3\2\2\2\u07c6\u07c4\3\2\2\2\u07c7\u07c9\5x=\2\u07c8")
        buf.write("\u07c7\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07cd\3\2\2\2")
        buf.write("\u07ca\u07cc\7}\2\2\u07cb\u07ca\3\2\2\2\u07cc\u07cf\3")
        buf.write("\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d1")
        buf.write("\3\2\2\2\u07cf\u07cd\3\2\2\2\u07d0\u07c0\3\2\2\2\u07d1")
        buf.write("\u07d2\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2")
        buf.write("\u07d3w\3\2\2\2\u07d4\u07d6\5b\62\2\u07d5\u07d4\3\2\2")
        buf.write("\2\u07d6\u07d7\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8")
        buf.write("\3\2\2\2\u07d8y\3\2\2\2\u07d9\u07dd\5|?\2\u07da\u07dc")
        buf.write("\7}\2\2\u07db\u07da\3\2\2\2\u07dc\u07df\3\2\2\2\u07dd")
        buf.write("\u07db\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07ee\3\2\2\2")
        buf.write("\u07df\u07dd\3\2\2\2\u07e0\u07e4\7f\2\2\u07e1\u07e3\7")
        buf.write("}\2\2\u07e2\u07e1\3\2\2\2\u07e3\u07e6\3\2\2\2\u07e4\u07e2")
        buf.write("\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07e7\3\2\2\2\u07e6")
        buf.write("\u07e4\3\2\2\2\u07e7\u07eb\7v\2\2\u07e8\u07ea\7}\2\2\u07e9")
        buf.write("\u07e8\3\2\2\2\u07ea\u07ed\3\2\2\2\u07eb\u07e9\3\2\2\2")
        buf.write("\u07eb\u07ec\3\2\2\2\u07ec\u07ef\3\2\2\2\u07ed\u07eb\3")
        buf.write("\2\2\2\u07ee\u07e0\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef{")
        buf.write("\3\2\2\2\u07f0\u07f4\5~@\2\u07f1\u07f3\7}\2\2\u07f2\u07f1")
        buf.write("\3\2\2\2\u07f3\u07f6\3\2\2\2\u07f4\u07f2\3\2\2\2\u07f4")
        buf.write("\u07f5\3\2\2\2\u07f5\u0807\3\2\2\2\u07f6\u07f4\3\2\2\2")
        buf.write("\u07f7\u07fb\7f\2\2\u07f8\u07fa\7}\2\2\u07f9\u07f8\3\2")
        buf.write("\2\2\u07fa\u07fd\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fc")
        buf.write("\3\2\2\2\u07fc\u07fe\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fe")
        buf.write("\u0802\5~@\2\u07ff\u0801\7}\2\2\u0800\u07ff\3\2\2\2\u0801")
        buf.write("\u0804\3\2\2\2\u0802\u0800\3\2\2\2\u0802\u0803\3\2\2\2")
        buf.write("\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2\u0805\u07f7\3")
        buf.write("\2\2\2\u0806\u0809\3\2\2\2\u0807\u0805\3\2\2\2\u0807\u0808")
        buf.write("\3\2\2\2\u0808}\3\2\2\2\u0809\u0807\3\2\2\2\u080a\u080e")
        buf.write("\5<\37\2\u080b\u080d\7}\2\2\u080c\u080b\3\2\2\2\u080d")
        buf.write("\u0810\3\2\2\2\u080e\u080c\3\2\2\2\u080e\u080f\3\2\2\2")
        buf.write("\u080f\u0811\3\2\2\2\u0810\u080e\3\2\2\2\u0811\u0812\5")
        buf.write("h\65\2\u0812\u081e\3\2\2\2\u0813\u0817\5<\37\2\u0814\u0816")
        buf.write("\7}\2\2\u0815\u0814\3\2\2\2\u0816\u0819\3\2\2\2\u0817")
        buf.write("\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081b\3\2\2\2")
        buf.write("\u0819\u0817\3\2\2\2\u081a\u081c\5\u0084C\2\u081b\u081a")
        buf.write("\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081e\3\2\2\2\u081d")
        buf.write("\u080a\3\2\2\2\u081d\u0813\3\2\2\2\u081e\177\3\2\2\2\u081f")
        buf.write("\u0823\7w\2\2\u0820\u0822\7}\2\2\u0821\u0820\3\2\2\2\u0822")
        buf.write("\u0825\3\2\2\2\u0823\u0821\3\2\2\2\u0823\u0824\3\2\2\2")
        buf.write("\u0824\u0836\3\2\2\2\u0825\u0823\3\2\2\2\u0826\u082a\7")
        buf.write("f\2\2\u0827\u0829\7}\2\2\u0828\u0827\3\2\2\2\u0829\u082c")
        buf.write("\3\2\2\2\u082a\u0828\3\2\2\2\u082a\u082b\3\2\2\2\u082b")
        buf.write("\u082d\3\2\2\2\u082c\u082a\3\2\2\2\u082d\u0831\7w\2\2")
        buf.write("\u082e\u0830\7}\2\2\u082f\u082e\3\2\2\2\u0830\u0833\3")
        buf.write("\2\2\2\u0831\u082f\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0835")
        buf.write("\3\2\2\2\u0833\u0831\3\2\2\2\u0834\u0826\3\2\2\2\u0835")
        buf.write("\u0838\3\2\2\2\u0836\u0834\3\2\2\2\u0836\u0837\3\2\2\2")
        buf.write("\u0837\u0081\3\2\2\2\u0838\u0836\3\2\2\2\u0839\u083d\5")
        buf.write("R*\2\u083a\u083c\7}\2\2\u083b\u083a\3\2\2\2\u083c\u083f")
        buf.write("\3\2\2\2\u083d\u083b\3\2\2\2\u083d\u083e\3\2\2\2\u083e")
        buf.write("\u0841\3\2\2\2\u083f\u083d\3\2\2\2\u0840\u0842\5\u0084")
        buf.write("C\2\u0841\u0840\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u0083")
        buf.write("\3\2\2\2\u0843\u085b\5v<\2\u0844\u0846\5v<\2\u0845\u0844")
        buf.write("\3\2\2\2\u0845\u0846\3\2\2\2\u0846\u084a\3\2\2\2\u0847")
        buf.write("\u0849\7}\2\2\u0848\u0847\3\2\2\2\u0849\u084c\3\2\2\2")
        buf.write("\u084a\u0848\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084d\3")
        buf.write("\2\2\2\u084c\u084a\3\2\2\2\u084d\u0851\5\u0086D\2\u084e")
        buf.write("\u0850\7}\2\2\u084f\u084e\3\2\2\2\u0850\u0853\3\2\2\2")
        buf.write("\u0851\u084f\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0857\3")
        buf.write("\2\2\2\u0853\u0851\3\2\2\2\u0854\u0856\5l\67\2\u0855\u0854")
        buf.write("\3\2\2\2\u0856\u0859\3\2\2\2\u0857\u0855\3\2\2\2\u0857")
        buf.write("\u0858\3\2\2\2\u0858\u085b\3\2\2\2\u0859\u0857\3\2\2\2")
        buf.write("\u085a\u0843\3\2\2\2\u085a\u0845\3\2\2\2\u085b\u0085\3")
        buf.write("\2\2\2\u085c\u085d\bD\1\2\u085d\u0861\7G\2\2\u085e\u0860")
        buf.write("\7}\2\2\u085f\u085e\3\2\2\2\u0860\u0863\3\2\2\2\u0861")
        buf.write("\u085f\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864\3\2\2\2")
        buf.write("\u0863\u0861\3\2\2\2\u0864\u0868\5\u0084C\2\u0865\u0867")
        buf.write("\7}\2\2\u0866\u0865\3\2\2\2\u0867\u086a\3\2\2\2\u0868")
        buf.write("\u0866\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086b\3\2\2\2")
        buf.write("\u086a\u0868\3\2\2\2\u086b\u086f\7H\2\2\u086c\u086e\7")
        buf.write("}\2\2\u086d\u086c\3\2\2\2\u086e\u0871\3\2\2\2\u086f\u086d")
        buf.write("\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0875\3\2\2\2\u0871")
        buf.write("\u086f\3\2\2\2\u0872\u0874\5l\67\2\u0873\u0872\3\2\2\2")
        buf.write("\u0874\u0877\3\2\2\2\u0875\u0873\3\2\2\2\u0875\u0876\3")
        buf.write("\2\2\2\u0876\u08fd\3\2\2\2\u0877\u0875\3\2\2\2\u0878\u087c")
        buf.write("\7I\2\2\u0879\u087b\7}\2\2\u087a\u0879\3\2\2\2\u087b\u087e")
        buf.write("\3\2\2\2\u087c\u087a\3\2\2\2\u087c\u087d\3\2\2\2\u087d")
        buf.write("\u0880\3\2\2\2\u087e\u087c\3\2\2\2\u087f\u0881\5x=\2\u0880")
        buf.write("\u087f\3\2\2\2\u0880\u0881\3\2\2\2\u0881\u0885\3\2\2\2")
        buf.write("\u0882\u0884\7}\2\2\u0883\u0882\3\2\2\2\u0884\u0887\3")
        buf.write("\2\2\2\u0885\u0883\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0889")
        buf.write("\3\2\2\2\u0887\u0885\3\2\2\2\u0888\u088a\5\62\32\2\u0889")
        buf.write("\u0888\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088e\3\2\2\2")
        buf.write("\u088b\u088d\7}\2\2\u088c\u088b\3\2\2\2\u088d\u0890\3")
        buf.write("\2\2\2\u088e\u088c\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u0891")
        buf.write("\3\2\2\2\u0890\u088e\3\2\2\2\u0891\u08fd\7J\2\2\u0892")
        buf.write("\u0896\7I\2\2\u0893\u0895\7}\2\2\u0894\u0893\3\2\2\2\u0895")
        buf.write("\u0898\3\2\2\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2")
        buf.write("\u0897\u0899\3\2\2\2\u0898\u0896\3\2\2\2\u0899\u089d\7")
        buf.write("\62\2\2\u089a\u089c\7}\2\2\u089b\u089a\3\2\2\2\u089c\u089f")
        buf.write("\3\2\2\2\u089d\u089b\3\2\2\2\u089d\u089e\3\2\2\2\u089e")
        buf.write("\u08a1\3\2\2\2\u089f\u089d\3\2\2\2\u08a0\u08a2\5x=\2\u08a1")
        buf.write("\u08a0\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u08a6\3\2\2\2")
        buf.write("\u08a3\u08a5\7}\2\2\u08a4\u08a3\3\2\2\2\u08a5\u08a8\3")
        buf.write("\2\2\2\u08a6\u08a4\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a9")
        buf.write("\3\2\2\2\u08a8\u08a6\3\2\2\2\u08a9\u08ad\5\62\32\2\u08aa")
        buf.write("\u08ac\7}\2\2\u08ab\u08aa\3\2\2\2\u08ac\u08af\3\2\2\2")
        buf.write("\u08ad\u08ab\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08b0\3")
        buf.write("\2\2\2\u08af\u08ad\3\2\2\2\u08b0\u08b1\7J\2\2\u08b1\u08fd")
        buf.write("\3\2\2\2\u08b2\u08b6\7I\2\2\u08b3\u08b5\7}\2\2\u08b4\u08b3")
        buf.write("\3\2\2\2\u08b5\u08b8\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b6")
        buf.write("\u08b7\3\2\2\2\u08b7\u08b9\3\2\2\2\u08b8\u08b6\3\2\2\2")
        buf.write("\u08b9\u08bd\5x=\2\u08ba\u08bc\7}\2\2\u08bb\u08ba\3\2")
        buf.write("\2\2\u08bc\u08bf\3\2\2\2\u08bd\u08bb\3\2\2\2\u08bd\u08be")
        buf.write("\3\2\2\2\u08be\u08c0\3\2\2\2\u08bf\u08bd\3\2\2\2\u08c0")
        buf.write("\u08c4\7\62\2\2\u08c1\u08c3\7}\2\2\u08c2\u08c1\3\2\2\2")
        buf.write("\u08c3\u08c6\3\2\2\2\u08c4\u08c2\3\2\2\2\u08c4\u08c5\3")
        buf.write("\2\2\2\u08c5\u08c7\3\2\2\2\u08c6\u08c4\3\2\2\2\u08c7\u08cb")
        buf.write("\5\62\32\2\u08c8\u08ca\7}\2\2\u08c9\u08c8\3\2\2\2\u08ca")
        buf.write("\u08cd\3\2\2\2\u08cb\u08c9\3\2\2\2\u08cb\u08cc\3\2\2\2")
        buf.write("\u08cc\u08ce\3\2\2\2\u08cd\u08cb\3\2\2\2\u08ce\u08cf\7")
        buf.write("J\2\2\u08cf\u08fd\3\2\2\2\u08d0\u08d4\7I\2\2\u08d1\u08d3")
        buf.write("\7}\2\2\u08d2\u08d1\3\2\2\2\u08d3\u08d6\3\2\2\2\u08d4")
        buf.write("\u08d2\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d7\3\2\2\2")
        buf.write("\u08d6\u08d4\3\2\2\2\u08d7\u08db\7W\2\2\u08d8\u08da\7")
        buf.write("}\2\2\u08d9\u08d8\3\2\2\2\u08da\u08dd\3\2\2\2\u08db\u08d9")
        buf.write("\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08de\3\2\2\2\u08dd")
        buf.write("\u08db\3\2\2\2\u08de\u08fd\7J\2\2\u08df\u08e3\7G\2\2\u08e0")
        buf.write("\u08e2\7}\2\2\u08e1\u08e0\3\2\2\2\u08e2\u08e5\3\2\2\2")
        buf.write("\u08e3\u08e1\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e7\3")
        buf.write("\2\2\2\u08e5\u08e3\3\2\2\2\u08e6\u08e8\5z>\2\u08e7\u08e6")
        buf.write("\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08ec\3\2\2\2\u08e9")
        buf.write("\u08eb\7}\2\2\u08ea\u08e9\3\2\2\2\u08eb\u08ee\3\2\2\2")
        buf.write("\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ef\3")
        buf.write("\2\2\2\u08ee\u08ec\3\2\2\2\u08ef\u08f3\7H\2\2\u08f0\u08f2")
        buf.write("\7}\2\2\u08f1\u08f0\3\2\2\2\u08f2\u08f5\3\2\2\2\u08f3")
        buf.write("\u08f1\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f9\3\2\2\2")
        buf.write("\u08f5\u08f3\3\2\2\2\u08f6\u08f8\5l\67\2\u08f7\u08f6\3")
        buf.write("\2\2\2\u08f8\u08fb\3\2\2\2\u08f9\u08f7\3\2\2\2\u08f9\u08fa")
        buf.write("\3\2\2\2\u08fa\u08fd\3\2\2\2\u08fb\u08f9\3\2\2\2\u08fc")
        buf.write("\u085c\3\2\2\2\u08fc\u0878\3\2\2\2\u08fc\u0892\3\2\2\2")
        buf.write("\u08fc\u08b2\3\2\2\2\u08fc\u08d0\3\2\2\2\u08fc\u08df\3")
        buf.write("\2\2\2\u08fd\u09a7\3\2\2\2\u08fe\u0902\f\7\2\2\u08ff\u0901")
        buf.write("\7}\2\2\u0900\u08ff\3\2\2\2\u0901\u0904\3\2\2\2\u0902")
        buf.write("\u0900\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0905\3\2\2\2")
        buf.write("\u0904\u0902\3\2\2\2\u0905\u0909\7I\2\2\u0906\u0908\7")
        buf.write("}\2\2\u0907\u0906\3\2\2\2\u0908\u090b\3\2\2\2\u0909\u0907")
        buf.write("\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090d\3\2\2\2\u090b")
        buf.write("\u0909\3\2\2\2\u090c\u090e\5x=\2\u090d\u090c\3\2\2\2\u090d")
        buf.write("\u090e\3\2\2\2\u090e\u0912\3\2\2\2\u090f\u0911\7}\2\2")
        buf.write("\u0910\u090f\3\2\2\2\u0911\u0914\3\2\2\2\u0912\u0910\3")
        buf.write("\2\2\2\u0912\u0913\3\2\2\2\u0913\u0916\3\2\2\2\u0914\u0912")
        buf.write("\3\2\2\2\u0915\u0917\5\62\32\2\u0916\u0915\3\2\2\2\u0916")
        buf.write("\u0917\3\2\2\2\u0917\u091b\3\2\2\2\u0918\u091a\7}\2\2")
        buf.write("\u0919\u0918\3\2\2\2\u091a\u091d\3\2\2\2\u091b\u0919\3")
        buf.write("\2\2\2\u091b\u091c\3\2\2\2\u091c\u091e\3\2\2\2\u091d\u091b")
        buf.write("\3\2\2\2\u091e\u09a6\7J\2\2\u091f\u0923\f\6\2\2\u0920")
        buf.write("\u0922\7}\2\2\u0921\u0920\3\2\2\2\u0922\u0925\3\2\2\2")
        buf.write("\u0923\u0921\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0926\3")
        buf.write("\2\2\2\u0925\u0923\3\2\2\2\u0926\u092a\7I\2\2\u0927\u0929")
        buf.write("\7}\2\2\u0928\u0927\3\2\2\2\u0929\u092c\3\2\2\2\u092a")
        buf.write("\u0928\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092d\3\2\2\2")
        buf.write("\u092c\u092a\3\2\2\2\u092d\u0931\7\62\2\2\u092e\u0930")
        buf.write("\7}\2\2\u092f\u092e\3\2\2\2\u0930\u0933\3\2\2\2\u0931")
        buf.write("\u092f\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0935\3\2\2\2")
        buf.write("\u0933\u0931\3\2\2\2\u0934\u0936\5x=\2\u0935\u0934\3\2")
        buf.write("\2\2\u0935\u0936\3\2\2\2\u0936\u093a\3\2\2\2\u0937\u0939")
        buf.write("\7}\2\2\u0938\u0937\3\2\2\2\u0939\u093c\3\2\2\2\u093a")
        buf.write("\u0938\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093d\3\2\2\2")
        buf.write("\u093c\u093a\3\2\2\2\u093d\u0941\5\62\32\2\u093e\u0940")
        buf.write("\7}\2\2\u093f\u093e\3\2\2\2\u0940\u0943\3\2\2\2\u0941")
        buf.write("\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\3\2\2\2")
        buf.write("\u0943\u0941\3\2\2\2\u0944\u0945\7J\2\2\u0945\u09a6\3")
        buf.write("\2\2\2\u0946\u094a\f\5\2\2\u0947\u0949\7}\2\2\u0948\u0947")
        buf.write("\3\2\2\2\u0949\u094c\3\2\2\2\u094a\u0948\3\2\2\2\u094a")
        buf.write("\u094b\3\2\2\2\u094b\u094d\3\2\2\2\u094c\u094a\3\2\2\2")
        buf.write("\u094d\u0951\7I\2\2\u094e\u0950\7}\2\2\u094f\u094e\3\2")
        buf.write("\2\2\u0950\u0953\3\2\2\2\u0951\u094f\3\2\2\2\u0951\u0952")
        buf.write("\3\2\2\2\u0952\u0954\3\2\2\2\u0953\u0951\3\2\2\2\u0954")
        buf.write("\u0958\5x=\2\u0955\u0957\7}\2\2\u0956\u0955\3\2\2\2\u0957")
        buf.write("\u095a\3\2\2\2\u0958\u0956\3\2\2\2\u0958\u0959\3\2\2\2")
        buf.write("\u0959\u095b\3\2\2\2\u095a\u0958\3\2\2\2\u095b\u095f\7")
        buf.write("\62\2\2\u095c\u095e\7}\2\2\u095d\u095c\3\2\2\2\u095e\u0961")
        buf.write("\3\2\2\2\u095f\u095d\3\2\2\2\u095f\u0960\3\2\2\2\u0960")
        buf.write("\u0962\3\2\2\2\u0961\u095f\3\2\2\2\u0962\u0966\5\62\32")
        buf.write("\2\u0963\u0965\7}\2\2\u0964\u0963\3\2\2\2\u0965\u0968")
        buf.write("\3\2\2\2\u0966\u0964\3\2\2\2\u0966\u0967\3\2\2\2\u0967")
        buf.write("\u0969\3\2\2\2\u0968\u0966\3\2\2\2\u0969\u096a\7J\2\2")
        buf.write("\u096a\u09a6\3\2\2\2\u096b\u096f\f\4\2\2\u096c\u096e\7")
        buf.write("}\2\2\u096d\u096c\3\2\2\2\u096e\u0971\3\2\2\2\u096f\u096d")
        buf.write("\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0972\3\2\2\2\u0971")
        buf.write("\u096f\3\2\2\2\u0972\u0976\7I\2\2\u0973\u0975\7}\2\2\u0974")
        buf.write("\u0973\3\2\2\2\u0975\u0978\3\2\2\2\u0976\u0974\3\2\2\2")
        buf.write("\u0976\u0977\3\2\2\2\u0977\u0979\3\2\2\2\u0978\u0976\3")
        buf.write("\2\2\2\u0979\u097d\7W\2\2\u097a\u097c\7}\2\2\u097b\u097a")
        buf.write("\3\2\2\2\u097c\u097f\3\2\2\2\u097d\u097b\3\2\2\2\u097d")
        buf.write("\u097e\3\2\2\2\u097e\u0980\3\2\2\2\u097f\u097d\3\2\2\2")
        buf.write("\u0980\u09a6\7J\2\2\u0981\u0985\f\3\2\2\u0982\u0984\7")
        buf.write("}\2\2\u0983\u0982\3\2\2\2\u0984\u0987\3\2\2\2\u0985\u0983")
        buf.write("\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0988\3\2\2\2\u0987")
        buf.write("\u0985\3\2\2\2\u0988\u098c\7G\2\2\u0989\u098b\7}\2\2\u098a")
        buf.write("\u0989\3\2\2\2\u098b\u098e\3\2\2\2\u098c\u098a\3\2\2\2")
        buf.write("\u098c\u098d\3\2\2\2\u098d\u0990\3\2\2\2\u098e\u098c\3")
        buf.write("\2\2\2\u098f\u0991\5z>\2\u0990\u098f\3\2\2\2\u0990\u0991")
        buf.write("\3\2\2\2\u0991\u0995\3\2\2\2\u0992\u0994\7}\2\2\u0993")
        buf.write("\u0992\3\2\2\2\u0994\u0997\3\2\2\2\u0995\u0993\3\2\2\2")
        buf.write("\u0995\u0996\3\2\2\2\u0996\u0998\3\2\2\2\u0997\u0995\3")
        buf.write("\2\2\2\u0998\u099c\7H\2\2\u0999\u099b\7}\2\2\u099a\u0999")
        buf.write("\3\2\2\2\u099b\u099e\3\2\2\2\u099c\u099a\3\2\2\2\u099c")
        buf.write("\u099d\3\2\2\2\u099d\u09a2\3\2\2\2\u099e\u099c\3\2\2\2")
        buf.write("\u099f\u09a1\5l\67\2\u09a0\u099f\3\2\2\2\u09a1\u09a4\3")
        buf.write("\2\2\2\u09a2\u09a0\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a6")
        buf.write("\3\2\2\2\u09a4\u09a2\3\2\2\2\u09a5\u08fe\3\2\2\2\u09a5")
        buf.write("\u091f\3\2\2\2\u09a5\u0946\3\2\2\2\u09a5\u096b\3\2\2\2")
        buf.write("\u09a5\u0981\3\2\2\2\u09a6\u09a9\3\2\2\2\u09a7\u09a5\3")
        buf.write("\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u0087\3\2\2\2\u09a9\u09a7")
        buf.write("\3\2\2\2\u09aa\u09ab\7w\2\2\u09ab\u0089\3\2\2\2\u09ac")
        buf.write("\u09c8\5\62\32\2\u09ad\u09b1\7K\2\2\u09ae\u09b0\7}\2\2")
        buf.write("\u09af\u09ae\3\2\2\2\u09b0\u09b3\3\2\2\2\u09b1\u09af\3")
        buf.write("\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b5\3\2\2\2\u09b3\u09b1")
        buf.write("\3\2\2\2\u09b4\u09b6\5\u008cG\2\u09b5\u09b4\3\2\2\2\u09b5")
        buf.write("\u09b6\3\2\2\2\u09b6\u09ba\3\2\2\2\u09b7\u09b9\7}\2\2")
        buf.write("\u09b8\u09b7\3\2\2\2\u09b9\u09bc\3\2\2\2\u09ba\u09b8\3")
        buf.write("\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09be\3\2\2\2\u09bc\u09ba")
        buf.write("\3\2\2\2\u09bd\u09bf\7f\2\2\u09be\u09bd\3\2\2\2\u09be")
        buf.write("\u09bf\3\2\2\2\u09bf\u09c3\3\2\2\2\u09c0\u09c2\7}\2\2")
        buf.write("\u09c1\u09c0\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3\u09c1\3")
        buf.write("\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c6\3\2\2\2\u09c5\u09c3")
        buf.write("\3\2\2\2\u09c6\u09c8\7L\2\2\u09c7\u09ac\3\2\2\2\u09c7")
        buf.write("\u09ad\3\2\2\2\u09c8\u008b\3\2\2\2\u09c9\u09cb\5\u008e")
        buf.write("H\2\u09ca\u09c9\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cf")
        buf.write("\3\2\2\2\u09cc\u09ce\7}\2\2\u09cd\u09cc\3\2\2\2\u09ce")
        buf.write("\u09d1\3\2\2\2\u09cf\u09cd\3\2\2\2\u09cf\u09d0\3\2\2\2")
        buf.write("\u09d0\u09d2\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d2\u09d6\5")
        buf.write("\u008aF\2\u09d3\u09d5\7}\2\2\u09d4\u09d3\3\2\2\2\u09d5")
        buf.write("\u09d8\3\2\2\2\u09d6\u09d4\3\2\2\2\u09d6\u09d7\3\2\2\2")
        buf.write("\u09d7\u09f2\3\2\2\2\u09d8\u09d6\3\2\2\2\u09d9\u09dd\7")
        buf.write("f\2\2\u09da\u09dc\7}\2\2\u09db\u09da\3\2\2\2\u09dc\u09df")
        buf.write("\3\2\2\2\u09dd\u09db\3\2\2\2\u09dd\u09de\3\2\2\2\u09de")
        buf.write("\u09e1\3\2\2\2\u09df\u09dd\3\2\2\2\u09e0\u09e2\5\u008e")
        buf.write("H\2\u09e1\u09e0\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e6")
        buf.write("\3\2\2\2\u09e3\u09e5\7}\2\2\u09e4\u09e3\3\2\2\2\u09e5")
        buf.write("\u09e8\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e6\u09e7\3\2\2\2")
        buf.write("\u09e7\u09e9\3\2\2\2\u09e8\u09e6\3\2\2\2\u09e9\u09ed\5")
        buf.write("\u008aF\2\u09ea\u09ec\7}\2\2\u09eb\u09ea\3\2\2\2\u09ec")
        buf.write("\u09ef\3\2\2\2\u09ed\u09eb\3\2\2\2\u09ed\u09ee\3\2\2\2")
        buf.write("\u09ee\u09f1\3\2\2\2\u09ef\u09ed\3\2\2\2\u09f0\u09d9\3")
        buf.write("\2\2\2\u09f1\u09f4\3\2\2\2\u09f2\u09f0\3\2\2\2\u09f2\u09f3")
        buf.write("\3\2\2\2\u09f3\u008d\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f5")
        buf.write("\u09f9\5\u0090I\2\u09f6\u09f8\7}\2\2\u09f7\u09f6\3\2\2")
        buf.write("\2\u09f8\u09fb\3\2\2\2\u09f9\u09f7\3\2\2\2\u09f9\u09fa")
        buf.write("\3\2\2\2\u09fa\u09fc\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fc")
        buf.write("\u09fd\7g\2\2\u09fd\u008f\3\2\2\2\u09fe\u0a00\5\u0092")
        buf.write("J\2\u09ff\u09fe\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01\u09ff")
        buf.write("\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0091\3\2\2\2\u0a03")
        buf.write("\u0a07\7I\2\2\u0a04\u0a06\7}\2\2\u0a05\u0a04\3\2\2\2\u0a06")
        buf.write("\u0a09\3\2\2\2\u0a07\u0a05\3\2\2\2\u0a07\u0a08\3\2\2\2")
        buf.write("\u0a08\u0a0a\3\2\2\2\u0a09\u0a07\3\2\2\2\u0a0a\u0a0e\5")
        buf.write("8\35\2\u0a0b\u0a0d\7}\2\2\u0a0c\u0a0b\3\2\2\2\u0a0d\u0a10")
        buf.write("\3\2\2\2\u0a0e\u0a0c\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f")
        buf.write("\u0a11\3\2\2\2\u0a10\u0a0e\3\2\2\2\u0a11\u0a12\7J\2\2")
        buf.write("\u0a12\u0a1c\3\2\2\2\u0a13\u0a17\7u\2\2\u0a14\u0a16\7")
        buf.write("}\2\2\u0a15\u0a14\3\2\2\2\u0a16\u0a19\3\2\2\2\u0a17\u0a15")
        buf.write("\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a1a\3\2\2\2\u0a19")
        buf.write("\u0a17\3\2\2\2\u0a1a\u0a1c\7w\2\2\u0a1b\u0a03\3\2\2\2")
        buf.write("\u0a1b\u0a13\3\2\2\2\u0a1c\u0093\3\2\2\2\u0a1d\u0a21\7")
        buf.write("E\2\2\u0a1e\u0a20\7}\2\2\u0a1f\u0a1e\3\2\2\2\u0a20\u0a23")
        buf.write("\3\2\2\2\u0a21\u0a1f\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22")
        buf.write("\u0a24\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a24\u0a28\7G\2\2")
        buf.write("\u0a25\u0a27\7}\2\2\u0a26\u0a25\3\2\2\2\u0a27\u0a2a\3")
        buf.write("\2\2\2\u0a28\u0a26\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2b")
        buf.write("\3\2\2\2\u0a2a\u0a28\3\2\2\2\u0a2b\u0a2f\58\35\2\u0a2c")
        buf.write("\u0a2e\7}\2\2\u0a2d\u0a2c\3\2\2\2\u0a2e\u0a31\3\2\2\2")
        buf.write("\u0a2f\u0a2d\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a32\3")
        buf.write("\2\2\2\u0a31\u0a2f\3\2\2\2\u0a32\u0a36\7f\2\2\u0a33\u0a35")
        buf.write("\7}\2\2\u0a34\u0a33\3\2\2\2\u0a35\u0a38\3\2\2\2\u0a36")
        buf.write("\u0a34\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a3a\3\2\2\2")
        buf.write("\u0a38\u0a36\3\2\2\2\u0a39\u0a3b\7z\2\2\u0a3a\u0a39\3")
        buf.write("\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3d")
        buf.write("\3\2\2\2\u0a3d\u0a41\3\2\2\2\u0a3e\u0a40\7}\2\2\u0a3f")
        buf.write("\u0a3e\3\2\2\2\u0a40\u0a43\3\2\2\2\u0a41\u0a3f\3\2\2\2")
        buf.write("\u0a41\u0a42\3\2\2\2\u0a42\u0a44\3\2\2\2\u0a43\u0a41\3")
        buf.write("\2\2\2\u0a44\u0a45\7H\2\2\u0a45\u0a46\5\u00caf\2\u0a46")
        buf.write("\u0095\3\2\2\2\u0a47\u0ab0\5\u0098M\2\u0a48\u0ab0\5\u009a")
        buf.write("N\2\u0a49\u0ab0\5\u00a0Q\2\u0a4a\u0ab0\5\u00a2R\2\u0a4b")
        buf.write("\u0ab0\5\u00aaV\2\u0a4c\u0ab0\5\u00acW\2\u0a4d\u0ab0\5")
        buf.write("\u00b4[\2\u0a4e\u0a52\t\26\2\2\u0a4f\u0a51\7}\2\2\u0a50")
        buf.write("\u0a4f\3\2\2\2\u0a51\u0a54\3\2\2\2\u0a52\u0a50\3\2\2\2")
        buf.write("\u0a52\u0a53\3\2\2\2\u0a53\u0a55\3\2\2\2\u0a54\u0a52\3")
        buf.write("\2\2\2\u0a55\u0a59\t\27\2\2\u0a56\u0a58\7}\2\2\u0a57\u0a56")
        buf.write("\3\2\2\2\u0a58\u0a5b\3\2\2\2\u0a59\u0a57\3\2\2\2\u0a59")
        buf.write("\u0a5a\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a59\3\2\2\2")
        buf.write("\u0a5c\u0a60\7G\2\2\u0a5d\u0a5f\7}\2\2\u0a5e\u0a5d\3\2")
        buf.write("\2\2\u0a5f\u0a62\3\2\2\2\u0a60\u0a5e\3\2\2\2\u0a60\u0a61")
        buf.write("\3\2\2\2\u0a61\u0a7d\3\2\2\2\u0a62\u0a60\3\2\2\2\u0a63")
        buf.write("\u0a67\5.\30\2\u0a64\u0a66\7}\2\2\u0a65\u0a64\3\2\2\2")
        buf.write("\u0a66\u0a69\3\2\2\2\u0a67\u0a65\3\2\2\2\u0a67\u0a68\3")
        buf.write("\2\2\2\u0a68\u0a7a\3\2\2\2\u0a69\u0a67\3\2\2\2\u0a6a\u0a6e")
        buf.write("\7f\2\2\u0a6b\u0a6d\7}\2\2\u0a6c\u0a6b\3\2\2\2\u0a6d\u0a70")
        buf.write("\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f")
        buf.write("\u0a71\3\2\2\2\u0a70\u0a6e\3\2\2\2\u0a71\u0a75\5.\30\2")
        buf.write("\u0a72\u0a74\7}\2\2\u0a73\u0a72\3\2\2\2\u0a74\u0a77\3")
        buf.write("\2\2\2\u0a75\u0a73\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a79")
        buf.write("\3\2\2\2\u0a77\u0a75\3\2\2\2\u0a78\u0a6a\3\2\2\2\u0a79")
        buf.write("\u0a7c\3\2\2\2\u0a7a\u0a78\3\2\2\2\u0a7a\u0a7b\3\2\2\2")
        buf.write("\u0a7b\u0a7e\3\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7d\u0a63\3")
        buf.write("\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a82\3\2\2\2\u0a7f\u0a81")
        buf.write("\7}\2\2\u0a80\u0a7f\3\2\2\2\u0a81\u0a84\3\2\2\2\u0a82")
        buf.write("\u0a80\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0aa4\3\2\2\2")
        buf.write("\u0a84\u0a82\3\2\2\2\u0a85\u0a89\7d\2\2\u0a86\u0a88\7")
        buf.write("}\2\2\u0a87\u0a86\3\2\2\2\u0a88\u0a8b\3\2\2\2\u0a89\u0a87")
        buf.write("\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0aa0\3\2\2\2\u0a8b")
        buf.write("\u0a89\3\2\2\2\u0a8c\u0a90\5.\30\2\u0a8d\u0a8f\7}\2\2")
        buf.write("\u0a8e\u0a8d\3\2\2\2\u0a8f\u0a92\3\2\2\2\u0a90\u0a8e\3")
        buf.write("\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a9d\3\2\2\2\u0a92\u0a90")
        buf.write("\3\2\2\2\u0a93\u0a97\7f\2\2\u0a94\u0a96\7}\2\2\u0a95\u0a94")
        buf.write("\3\2\2\2\u0a96\u0a99\3\2\2\2\u0a97\u0a95\3\2\2\2\u0a97")
        buf.write("\u0a98\3\2\2\2\u0a98\u0a9a\3\2\2\2\u0a99\u0a97\3\2\2\2")
        buf.write("\u0a9a\u0a9c\5.\30\2\u0a9b\u0a93\3\2\2\2\u0a9c\u0a9f\3")
        buf.write("\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0aa1")
        buf.write("\3\2\2\2\u0a9f\u0a9d\3\2\2\2\u0aa0\u0a8c\3\2\2\2\u0aa0")
        buf.write("\u0aa1\3\2\2\2\u0aa1\u0aa3\3\2\2\2\u0aa2\u0a85\3\2\2\2")
        buf.write("\u0aa3\u0aa6\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa4\u0aa5\3")
        buf.write("\2\2\2\u0aa5\u0aaa\3\2\2\2\u0aa6\u0aa4\3\2\2\2\u0aa7\u0aa9")
        buf.write("\7}\2\2\u0aa8\u0aa7\3\2\2\2\u0aa9\u0aac\3\2\2\2\u0aaa")
        buf.write("\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aad\3\2\2\2")
        buf.write("\u0aac\u0aaa\3\2\2\2\u0aad\u0aae\7H\2\2\u0aae\u0ab0\5")
        buf.write("\u00caf\2\u0aaf\u0a47\3\2\2\2\u0aaf\u0a48\3\2\2\2\u0aaf")
        buf.write("\u0a49\3\2\2\2\u0aaf\u0a4a\3\2\2\2\u0aaf\u0a4b\3\2\2\2")
        buf.write("\u0aaf\u0a4c\3\2\2\2\u0aaf\u0a4d\3\2\2\2\u0aaf\u0a4e\3")
        buf.write("\2\2\2\u0ab0\u0097\3\2\2\2\u0ab1\u0ab5\7w\2\2\u0ab2\u0ab4")
        buf.write("\7}\2\2\u0ab3\u0ab2\3\2\2\2\u0ab4\u0ab7\3\2\2\2\u0ab5")
        buf.write("\u0ab3\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ab8\3\2\2\2")
        buf.write("\u0ab7\u0ab5\3\2\2\2\u0ab8\u0abc\7d\2\2\u0ab9\u0abb\7")
        buf.write("}\2\2\u0aba\u0ab9\3\2\2\2\u0abb\u0abe\3\2\2\2\u0abc\u0aba")
        buf.write("\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abf\3\2\2\2\u0abe")
        buf.write("\u0abc\3\2\2\2\u0abf\u0ae7\5\u0096L\2\u0ac0\u0ac4\7\27")
        buf.write("\2\2\u0ac1\u0ac3\7}\2\2\u0ac2\u0ac1\3\2\2\2\u0ac3\u0ac6")
        buf.write("\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5")
        buf.write("\u0ac7\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac7\u0acb\58\35\2")
        buf.write("\u0ac8\u0aca\7}\2\2\u0ac9\u0ac8\3\2\2\2\u0aca\u0acd\3")
        buf.write("\2\2\2\u0acb\u0ac9\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace")
        buf.write("\3\2\2\2\u0acd\u0acb\3\2\2\2\u0ace\u0ad2\7d\2\2\u0acf")
        buf.write("\u0ad1\7}\2\2\u0ad0\u0acf\3\2\2\2\u0ad1\u0ad4\3\2\2\2")
        buf.write("\u0ad2\u0ad0\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad5\3")
        buf.write("\2\2\2\u0ad4\u0ad2\3\2\2\2\u0ad5\u0ad6\5\u0096L\2\u0ad6")
        buf.write("\u0ae7\3\2\2\2\u0ad7\u0adb\7\33\2\2\u0ad8\u0ada\7}\2\2")
        buf.write("\u0ad9\u0ad8\3\2\2\2\u0ada\u0add\3\2\2\2\u0adb\u0ad9\3")
        buf.write("\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0ade\3\2\2\2\u0add\u0adb")
        buf.write("\3\2\2\2\u0ade\u0ae2\7d\2\2\u0adf\u0ae1\7}\2\2\u0ae0\u0adf")
        buf.write("\3\2\2\2\u0ae1\u0ae4\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae2")
        buf.write("\u0ae3\3\2\2\2\u0ae3\u0ae5\3\2\2\2\u0ae4\u0ae2\3\2\2\2")
        buf.write("\u0ae5\u0ae7\5\u0096L\2\u0ae6\u0ab1\3\2\2\2\u0ae6\u0ac0")
        buf.write("\3\2\2\2\u0ae6\u0ad7\3\2\2\2\u0ae7\u0099\3\2\2\2\u0ae8")
        buf.write("\u0aec\7K\2\2\u0ae9\u0aeb\7}\2\2\u0aea\u0ae9\3\2\2\2\u0aeb")
        buf.write("\u0aee\3\2\2\2\u0aec\u0aea\3\2\2\2\u0aec\u0aed\3\2\2\2")
        buf.write("\u0aed\u0af0\3\2\2\2\u0aee\u0aec\3\2\2\2\u0aef\u0af1\5")
        buf.write("\u009cO\2\u0af0\u0aef\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1")
        buf.write("\u0af5\3\2\2\2\u0af2\u0af4\7}\2\2\u0af3\u0af2\3\2\2\2")
        buf.write("\u0af4\u0af7\3\2\2\2\u0af5\u0af3\3\2\2\2\u0af5\u0af6\3")
        buf.write("\2\2\2\u0af6\u0af8\3\2\2\2\u0af7\u0af5\3\2\2\2\u0af8\u0af9")
        buf.write("\7L\2\2\u0af9\u009b\3\2\2\2\u0afa\u0afc\5\u009eP\2\u0afb")
        buf.write("\u0afa\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0afb\3\2\2\2")
        buf.write("\u0afd\u0afe\3\2\2\2\u0afe\u009d\3\2\2\2\u0aff\u0b01\7")
        buf.write("}\2\2\u0b00\u0aff\3\2\2\2\u0b01\u0b04\3\2\2\2\u0b02\u0b00")
        buf.write("\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b07\3\2\2\2\u0b04")
        buf.write("\u0b02\3\2\2\2\u0b05\u0b08\5\u0096L\2\u0b06\u0b08\5:\36")
        buf.write("\2\u0b07\u0b05\3\2\2\2\u0b07\u0b06\3\2\2\2\u0b08\u0b0c")
        buf.write("\3\2\2\2\u0b09\u0b0b\7}\2\2\u0b0a\u0b09\3\2\2\2\u0b0b")
        buf.write("\u0b0e\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c\u0b0d\3\2\2\2")
        buf.write("\u0b0d\u009f\3\2\2\2\u0b0e\u0b0c\3\2\2\2\u0b0f\u0b11\5")
        buf.write("\66\34\2\u0b10\u0b0f\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11")
        buf.write("\u0b12\3\2\2\2\u0b12\u0b13\5\u00caf\2\u0b13\u00a1\3\2")
        buf.write("\2\2\u0b14\u0b18\7\21\2\2\u0b15\u0b17\7}\2\2\u0b16\u0b15")
        buf.write("\3\2\2\2\u0b17\u0b1a\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b18")
        buf.write("\u0b19\3\2\2\2\u0b19\u0b1b\3\2\2\2\u0b1a\u0b18\3\2\2\2")
        buf.write("\u0b1b\u0b1f\5\u009aN\2\u0b1c\u0b1e\7}\2\2\u0b1d\u0b1c")
        buf.write("\3\2\2\2\u0b1e\u0b21\3\2\2\2\u0b1f\u0b1d\3\2\2\2\u0b1f")
        buf.write("\u0b20\3\2\2\2\u0b20\u0b23\3\2\2\2\u0b21\u0b1f\3\2\2\2")
        buf.write("\u0b22\u0b24\5\u00a4S\2\u0b23\u0b22\3\2\2\2\u0b24\u0b25")
        buf.write("\3\2\2\2\u0b25\u0b23\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26")
        buf.write("\u0b2a\3\2\2\2\u0b27\u0b29\7}\2\2\u0b28\u0b27\3\2\2\2")
        buf.write("\u0b29\u0b2c\3\2\2\2\u0b2a\u0b28\3\2\2\2\u0b2a\u0b2b\3")
        buf.write("\2\2\2\u0b2b\u0b4d\3\2\2\2\u0b2c\u0b2a\3\2\2\2\u0b2d\u0b31")
        buf.write("\5\u00a6T\2\u0b2e\u0b30\7}\2\2\u0b2f\u0b2e\3\2\2\2\u0b30")
        buf.write("\u0b33\3\2\2\2\u0b31\u0b2f\3\2\2\2\u0b31\u0b32\3\2\2\2")
        buf.write("\u0b32\u0b35\3\2\2\2\u0b33\u0b31\3\2\2\2\u0b34\u0b36\5")
        buf.write("\u00a8U\2\u0b35\u0b34\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36")
        buf.write("\u0b3a\3\2\2\2\u0b37\u0b39\7}\2\2\u0b38\u0b37\3\2\2\2")
        buf.write("\u0b39\u0b3c\3\2\2\2\u0b3a\u0b38\3\2\2\2\u0b3a\u0b3b\3")
        buf.write("\2\2\2\u0b3b\u0b4e\3\2\2\2\u0b3c\u0b3a\3\2\2\2\u0b3d\u0b41")
        buf.write("\5\u00a8U\2\u0b3e\u0b40\7}\2\2\u0b3f\u0b3e\3\2\2\2\u0b40")
        buf.write("\u0b43\3\2\2\2\u0b41\u0b3f\3\2\2\2\u0b41\u0b42\3\2\2\2")
        buf.write("\u0b42\u0b45\3\2\2\2\u0b43\u0b41\3\2\2\2\u0b44\u0b46\5")
        buf.write("\u00a6T\2\u0b45\u0b44\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46")
        buf.write("\u0b4a\3\2\2\2\u0b47\u0b49\7}\2\2\u0b48\u0b47\3\2\2\2")
        buf.write("\u0b49\u0b4c\3\2\2\2\u0b4a\u0b48\3\2\2\2\u0b4a\u0b4b\3")
        buf.write("\2\2\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4d\u0b2d")
        buf.write("\3\2\2\2\u0b4d\u0b3d\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e")
        buf.write("\u00a3\3\2\2\2\u0b4f\u0b53\7\22\2\2\u0b50\u0b52\7}\2\2")
        buf.write("\u0b51\u0b50\3\2\2\2\u0b52\u0b55\3\2\2\2\u0b53\u0b51\3")
        buf.write("\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b56\3\2\2\2\u0b55\u0b53")
        buf.write("\3\2\2\2\u0b56\u0b5a\7G\2\2\u0b57\u0b59\7}\2\2\u0b58\u0b57")
        buf.write("\3\2\2\2\u0b59\u0b5c\3\2\2\2\u0b5a\u0b58\3\2\2\2\u0b5a")
        buf.write("\u0b5b\3\2\2\2\u0b5b\u0b5f\3\2\2\2\u0b5c\u0b5a\3\2\2\2")
        buf.write("\u0b5d\u0b60\7w\2\2\u0b5e\u0b60\5\u0080A\2\u0b5f\u0b5d")
        buf.write("\3\2\2\2\u0b5f\u0b5e\3\2\2\2\u0b60\u0b64\3\2\2\2\u0b61")
        buf.write("\u0b63\7}\2\2\u0b62\u0b61\3\2\2\2\u0b63\u0b66\3\2\2\2")
        buf.write("\u0b64\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b67\3")
        buf.write("\2\2\2\u0b66\u0b64\3\2\2\2\u0b67\u0b6b\7H\2\2\u0b68\u0b6a")
        buf.write("\7}\2\2\u0b69\u0b68\3\2\2\2\u0b6a\u0b6d\3\2\2\2\u0b6b")
        buf.write("\u0b69\3\2\2\2\u0b6b\u0b6c\3\2\2\2\u0b6c\u0b76\3\2\2\2")
        buf.write("\u0b6d\u0b6b\3\2\2\2\u0b6e\u0b72\7\24\2\2\u0b6f\u0b71")
        buf.write("\7}\2\2\u0b70\u0b6f\3\2\2\2\u0b71\u0b74\3\2\2\2\u0b72")
        buf.write("\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b75\3\2\2\2")
        buf.write("\u0b74\u0b72\3\2\2\2\u0b75\u0b77\7w\2\2\u0b76\u0b6e\3")
        buf.write("\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b7b\3\2\2\2\u0b78\u0b7a")
        buf.write("\7}\2\2\u0b79\u0b78\3\2\2\2\u0b7a\u0b7d\3\2\2\2\u0b7b")
        buf.write("\u0b79\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7e\3\2\2\2")
        buf.write("\u0b7d\u0b7b\3\2\2\2\u0b7e\u0b7f\5\u009aN\2\u0b7f\u00a5")
        buf.write("\3\2\2\2\u0b80\u0b84\7\23\2\2\u0b81\u0b83\7}\2\2\u0b82")
        buf.write("\u0b81\3\2\2\2\u0b83\u0b86\3\2\2\2\u0b84\u0b82\3\2\2\2")
        buf.write("\u0b84\u0b85\3\2\2\2\u0b85\u0b87\3\2\2\2\u0b86\u0b84\3")
        buf.write("\2\2\2\u0b87\u0b88\5\u009aN\2\u0b88\u00a7\3\2\2\2\u0b89")
        buf.write("\u0b8d\7\36\2\2\u0b8a\u0b8c\7}\2\2\u0b8b\u0b8a\3\2\2\2")
        buf.write("\u0b8c\u0b8f\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8d\u0b8e\3")
        buf.write("\2\2\2\u0b8e\u0b90\3\2\2\2\u0b8f\u0b8d\3\2\2\2\u0b90\u0b91")
        buf.write("\5\u009aN\2\u0b91\u00a9\3\2\2\2\u0b92\u0b96\7&\2\2\u0b93")
        buf.write("\u0b95\7}\2\2\u0b94\u0b93\3\2\2\2\u0b95\u0b98\3\2\2\2")
        buf.write("\u0b96\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b99\3")
        buf.write("\2\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b9d\7G\2\2\u0b9a\u0b9c")
        buf.write("\7}\2\2\u0b9b\u0b9a\3\2\2\2\u0b9c\u0b9f\3\2\2\2\u0b9d")
        buf.write("\u0b9b\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba0\3\2\2\2")
        buf.write("\u0b9f\u0b9d\3\2\2\2\u0ba0\u0ba4\5\66\34\2\u0ba1\u0ba3")
        buf.write("\7}\2\2\u0ba2\u0ba1\3\2\2\2\u0ba3\u0ba6\3\2\2\2\u0ba4")
        buf.write("\u0ba2\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba7\3\2\2\2")
        buf.write("\u0ba6\u0ba4\3\2\2\2\u0ba7\u0bab\7H\2\2\u0ba8\u0baa\7")
        buf.write("}\2\2\u0ba9\u0ba8\3\2\2\2\u0baa\u0bad\3\2\2\2\u0bab\u0ba9")
        buf.write("\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bae\3\2\2\2\u0bad")
        buf.write("\u0bab\3\2\2\2\u0bae\u0bb2\5\u0096L\2\u0baf\u0bb1\7}\2")
        buf.write("\2\u0bb0\u0baf\3\2\2\2\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0")
        buf.write("\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bbd\3\2\2\2\u0bb4")
        buf.write("\u0bb2\3\2\2\2\u0bb5\u0bb9\7\36\2\2\u0bb6\u0bb8\7}\2\2")
        buf.write("\u0bb7\u0bb6\3\2\2\2\u0bb8\u0bbb\3\2\2\2\u0bb9\u0bb7\3")
        buf.write("\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbc\3\2\2\2\u0bbb\u0bb9")
        buf.write("\3\2\2\2\u0bbc\u0bbe\5\u0096L\2\u0bbd\u0bb5\3\2\2\2\u0bbd")
        buf.write("\u0bbe\3\2\2\2\u0bbe\u0bde\3\2\2\2\u0bbf\u0bc3\7\65\2")
        buf.write("\2\u0bc0\u0bc2\7}\2\2\u0bc1\u0bc0\3\2\2\2\u0bc2\u0bc5")
        buf.write("\3\2\2\2\u0bc3\u0bc1\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4")
        buf.write("\u0bc6\3\2\2\2\u0bc5\u0bc3\3\2\2\2\u0bc6\u0bca\7G\2\2")
        buf.write("\u0bc7\u0bc9\7}\2\2\u0bc8\u0bc7\3\2\2\2\u0bc9\u0bcc\3")
        buf.write("\2\2\2\u0bca\u0bc8\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcd")
        buf.write("\3\2\2\2\u0bcc\u0bca\3\2\2\2\u0bcd\u0bd1\5\66\34\2\u0bce")
        buf.write("\u0bd0\7}\2\2\u0bcf\u0bce\3\2\2\2\u0bd0\u0bd3\3\2\2\2")
        buf.write("\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd4\3")
        buf.write("\2\2\2\u0bd3\u0bd1\3\2\2\2\u0bd4\u0bd8\7H\2\2\u0bd5\u0bd7")
        buf.write("\7}\2\2\u0bd6\u0bd5\3\2\2\2\u0bd7\u0bda\3\2\2\2\u0bd8")
        buf.write("\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bdb\3\2\2\2")
        buf.write("\u0bda\u0bd8\3\2\2\2\u0bdb\u0bdc\5\u0096L\2\u0bdc\u0bde")
        buf.write("\3\2\2\2\u0bdd\u0b92\3\2\2\2\u0bdd\u0bbf\3\2\2\2\u0bde")
        buf.write("\u00ab\3\2\2\2\u0bdf\u0be3\7<\2\2\u0be0\u0be2\7}\2\2\u0be1")
        buf.write("\u0be0\3\2\2\2\u0be2\u0be5\3\2\2\2\u0be3\u0be1\3\2\2\2")
        buf.write("\u0be3\u0be4\3\2\2\2\u0be4\u0be6\3\2\2\2\u0be5\u0be3\3")
        buf.write("\2\2\2\u0be6\u0bea\7G\2\2\u0be7\u0be9\7}\2\2\u0be8\u0be7")
        buf.write("\3\2\2\2\u0be9\u0bec\3\2\2\2\u0bea\u0be8\3\2\2\2\u0bea")
        buf.write("\u0beb\3\2\2\2\u0beb\u0bed\3\2\2\2\u0bec\u0bea\3\2\2\2")
        buf.write("\u0bed\u0bf1\5\66\34\2\u0bee\u0bf0\7}\2\2\u0bef\u0bee")
        buf.write("\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef\3\2\2\2\u0bf1")
        buf.write("\u0bf2\3\2\2\2\u0bf2\u0bf4\3\2\2\2\u0bf3\u0bf1\3\2\2\2")
        buf.write("\u0bf4\u0bf8\7H\2\2\u0bf5\u0bf7\7}\2\2\u0bf6\u0bf5\3\2")
        buf.write("\2\2\u0bf7\u0bfa\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf8\u0bf9")
        buf.write("\3\2\2\2\u0bf9\u0bfb\3\2\2\2\u0bfa\u0bf8\3\2\2\2\u0bfb")
        buf.write("\u0bfc\5\u0096L\2\u0bfc\u0c42\3\2\2\2\u0bfd\u0c01\7\34")
        buf.write("\2\2\u0bfe\u0c00\7}\2\2\u0bff\u0bfe\3\2\2\2\u0c00\u0c03")
        buf.write("\3\2\2\2\u0c01\u0bff\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02")
        buf.write("\u0c04\3\2\2\2\u0c03\u0c01\3\2\2\2\u0c04\u0c08\5\u0096")
        buf.write("L\2\u0c05\u0c07\7}\2\2\u0c06\u0c05\3\2\2\2\u0c07\u0c0a")
        buf.write("\3\2\2\2\u0c08\u0c06\3\2\2\2\u0c08\u0c09\3\2\2\2\u0c09")
        buf.write("\u0c0b\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0b\u0c0f\7<\2\2")
        buf.write("\u0c0c\u0c0e\7}\2\2\u0c0d\u0c0c\3\2\2\2\u0c0e\u0c11\3")
        buf.write("\2\2\2\u0c0f\u0c0d\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c12")
        buf.write("\3\2\2\2\u0c11\u0c0f\3\2\2\2\u0c12\u0c16\7G\2\2\u0c13")
        buf.write("\u0c15\7}\2\2\u0c14\u0c13\3\2\2\2\u0c15\u0c18\3\2\2\2")
        buf.write("\u0c16\u0c14\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c19\3")
        buf.write("\2\2\2\u0c18\u0c16\3\2\2\2\u0c19\u0c1d\5\66\34\2\u0c1a")
        buf.write("\u0c1c\7}\2\2\u0c1b\u0c1a\3\2\2\2\u0c1c\u0c1f\3\2\2\2")
        buf.write("\u0c1d\u0c1b\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c20\3")
        buf.write("\2\2\2\u0c1f\u0c1d\3\2\2\2\u0c20\u0c21\7H\2\2\u0c21\u0c22")
        buf.write("\5\u00caf\2\u0c22\u0c42\3\2\2\2\u0c23\u0c27\7$\2\2\u0c24")
        buf.write("\u0c26\7}\2\2\u0c25\u0c24\3\2\2\2\u0c26\u0c29\3\2\2\2")
        buf.write("\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2a\3")
        buf.write("\2\2\2\u0c29\u0c27\3\2\2\2\u0c2a\u0c2e\7G\2\2\u0c2b\u0c2d")
        buf.write("\7}\2\2\u0c2c\u0c2b\3\2\2\2\u0c2d\u0c30\3\2\2\2\u0c2e")
        buf.write("\u0c2c\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c31\3\2\2\2")
        buf.write("\u0c30\u0c2e\3\2\2\2\u0c31\u0c35\5\u00aeX\2\u0c32\u0c34")
        buf.write("\7}\2\2\u0c33\u0c32\3\2\2\2\u0c34\u0c37\3\2\2\2\u0c35")
        buf.write("\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c38\3\2\2\2")
        buf.write("\u0c37\u0c35\3\2\2\2\u0c38\u0c3c\7H\2\2\u0c39\u0c3b\7")
        buf.write("}\2\2\u0c3a\u0c39\3\2\2\2\u0c3b\u0c3e\3\2\2\2\u0c3c\u0c3a")
        buf.write("\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3f\3\2\2\2\u0c3e")
        buf.write("\u0c3c\3\2\2\2\u0c3f\u0c40\5\u0096L\2\u0c40\u0c42\3\2")
        buf.write("\2\2\u0c41\u0bdf\3\2\2\2\u0c41\u0bfd\3\2\2\2\u0c41\u0c23")
        buf.write("\3\2\2\2\u0c42\u00ad\3\2\2\2\u0c43\u0c48\5\u00b0Y\2\u0c44")
        buf.write("\u0c46\5\66\34\2\u0c45\u0c44\3\2\2\2\u0c45\u0c46\3\2\2")
        buf.write("\2\u0c46\u0c48\3\2\2\2\u0c47\u0c43\3\2\2\2\u0c47\u0c45")
        buf.write("\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c4b\5\u00caf\2\u0c4a")
        buf.write("\u0c4c\5\u00b2Z\2\u0c4b\u0c4a\3\2\2\2\u0c4b\u0c4c\3\2")
        buf.write("\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4f\5\u00caf\2\u0c4e")
        buf.write("\u0c50\5\u00b2Z\2\u0c4f\u0c4e\3\2\2\2\u0c4f\u0c50\3\2")
        buf.write("\2\2\u0c50\u00af\3\2\2\2\u0c51\u0c55\5<\37\2\u0c52\u0c54")
        buf.write("\7}\2\2\u0c53\u0c52\3\2\2\2\u0c54\u0c57\3\2\2\2\u0c55")
        buf.write("\u0c53\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c59\3\2\2\2")
        buf.write("\u0c57\u0c55\3\2\2\2\u0c58\u0c5a\5@!\2\u0c59\u0c58\3\2")
        buf.write("\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u00b1\3\2\2\2\u0c5b\u0c5f")
        buf.write("\5\62\32\2\u0c5c\u0c5e\7}\2\2\u0c5d\u0c5c\3\2\2\2\u0c5e")
        buf.write("\u0c61\3\2\2\2\u0c5f\u0c5d\3\2\2\2\u0c5f\u0c60\3\2\2\2")
        buf.write("\u0c60\u0c72\3\2\2\2\u0c61\u0c5f\3\2\2\2\u0c62\u0c66\7")
        buf.write("f\2\2\u0c63\u0c65\7}\2\2\u0c64\u0c63\3\2\2\2\u0c65\u0c68")
        buf.write("\3\2\2\2\u0c66\u0c64\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67")
        buf.write("\u0c69\3\2\2\2\u0c68\u0c66\3\2\2\2\u0c69\u0c6d\5\62\32")
        buf.write("\2\u0c6a\u0c6c\7}\2\2\u0c6b\u0c6a\3\2\2\2\u0c6c\u0c6f")
        buf.write("\3\2\2\2\u0c6d\u0c6b\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e")
        buf.write("\u0c71\3\2\2\2\u0c6f\u0c6d\3\2\2\2\u0c70\u0c62\3\2\2\2")
        buf.write("\u0c71\u0c74\3\2\2\2\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3")
        buf.write("\2\2\2\u0c73\u00b3\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c75\u0c79")
        buf.write("\7%\2\2\u0c76\u0c78\7}\2\2\u0c77\u0c76\3\2\2\2\u0c78\u0c7b")
        buf.write("\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a")
        buf.write("\u0c7c\3\2\2\2\u0c7b\u0c79\3\2\2\2\u0c7c\u0c91\7w\2\2")
        buf.write("\u0c7d\u0c91\t\30\2\2\u0c7e\u0c82\7-\2\2\u0c7f\u0c81\7")
        buf.write("}\2\2\u0c80\u0c7f\3\2\2\2\u0c81\u0c84\3\2\2\2\u0c82\u0c80")
        buf.write("\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c86\3\2\2\2\u0c84")
        buf.write("\u0c82\3\2\2\2\u0c85\u0c87\5\66\34\2\u0c86\u0c85\3\2\2")
        buf.write("\2\u0c86\u0c87\3\2\2\2\u0c87\u0c91\3\2\2\2\u0c88\u0c8c")
        buf.write("\7%\2\2\u0c89\u0c8b\7}\2\2\u0c8a\u0c89\3\2\2\2\u0c8b\u0c8e")
        buf.write("\3\2\2\2\u0c8c\u0c8a\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d")
        buf.write("\u0c8f\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8f\u0c91\5\26\f")
        buf.write("\2\u0c90\u0c75\3\2\2\2\u0c90\u0c7d\3\2\2\2\u0c90\u0c7e")
        buf.write("\3\2\2\2\u0c90\u0c88\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92")
        buf.write("\u0c93\5\u00caf\2\u0c93\u00b5\3\2\2\2\u0c94\u0c96\5\u00b8")
        buf.write("]\2\u0c95\u0c94\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0c97")
        buf.write("\3\2\2\2\u0c97\u0c98\7\2\2\3\u0c98\u00b7\3\2\2\2\u0c99")
        buf.write("\u0ca1\5\u00ba^\2\u0c9a\u0ca1\5\u00caf\2\u0c9b\u0c9d\7")
        buf.write("}\2\2\u0c9c\u0c9b\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0c9c")
        buf.write("\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca1\3\2\2\2\u0ca0")
        buf.write("\u0c99\3\2\2\2\u0ca0\u0c9a\3\2\2\2\u0ca0\u0c9c\3\2\2\2")
        buf.write("\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca0\3\2\2\2\u0ca2\u0ca3\3")
        buf.write("\2\2\2\u0ca3\u00b9\3\2\2\2\u0ca4\u0ca8\5\u00bc_\2\u0ca5")
        buf.write("\u0ca8\5:\36\2\u0ca6\u0ca8\5\u00c2b\2\u0ca7\u0ca4\3\2")
        buf.write("\2\2\u0ca7\u0ca5\3\2\2\2\u0ca7\u0ca6\3\2\2\2\u0ca8\u00bb")
        buf.write("\3\2\2\2\u0ca9\u0cad\5\u00be`\2\u0caa\u0cac\7}\2\2\u0cab")
        buf.write("\u0caa\3\2\2\2\u0cac\u0caf\3\2\2\2\u0cad\u0cab\3\2\2\2")
        buf.write("\u0cad\u0cae\3\2\2\2\u0cae\u0cb0\3\2\2\2\u0caf\u0cad\3")
        buf.write("\2\2\2\u0cb0\u0cb4\5h\65\2\u0cb1\u0cb3\7}\2\2\u0cb2\u0cb1")
        buf.write("\3\2\2\2\u0cb3\u0cb6\3\2\2\2\u0cb4\u0cb2\3\2\2\2\u0cb4")
        buf.write("\u0cb5\3\2\2\2\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb4\3\2\2\2")
        buf.write("\u0cb7\u0cb9\5\u00c8e\2\u0cb8\u0cb7\3\2\2\2\u0cb8\u0cb9")
        buf.write("\3\2\2\2\u0cb9\u0cbd\3\2\2\2\u0cba\u0cbc\7}\2\2\u0cbb")
        buf.write("\u0cba\3\2\2\2\u0cbc\u0cbf\3\2\2\2\u0cbd\u0cbb\3\2\2\2")
        buf.write("\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cc0\3\2\2\2\u0cbf\u0cbd\3")
        buf.write("\2\2\2\u0cc0\u0cc1\5\u009aN\2\u0cc1\u0cdd\3\2\2\2\u0cc2")
        buf.write("\u0cc6\5\u00be`\2\u0cc3\u0cc5\7}\2\2\u0cc4\u0cc3\3\2\2")
        buf.write("\2\u0cc5\u0cc8\3\2\2\2\u0cc6\u0cc4\3\2\2\2\u0cc6\u0cc7")
        buf.write("\3\2\2\2\u0cc7\u0cc9\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc9")
        buf.write("\u0ccd\5h\65\2\u0cca\u0ccc\7}\2\2\u0ccb\u0cca\3\2\2\2")
        buf.write("\u0ccc\u0ccf\3\2\2\2\u0ccd\u0ccb\3\2\2\2\u0ccd\u0cce\3")
        buf.write("\2\2\2\u0cce\u0cd1\3\2\2\2\u0ccf\u0ccd\3\2\2\2\u0cd0\u0cd2")
        buf.write("\5\u00c8e\2\u0cd1\u0cd0\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2")
        buf.write("\u0cd6\3\2\2\2\u0cd3\u0cd5\7}\2\2\u0cd4\u0cd3\3\2\2\2")
        buf.write("\u0cd5\u0cd8\3\2\2\2\u0cd6\u0cd4\3\2\2\2\u0cd6\u0cd7\3")
        buf.write("\2\2\2\u0cd7\u0cd9\3\2\2\2\u0cd8\u0cd6\3\2\2\2\u0cd9\u0cda")
        buf.write("\5\b\5\2\u0cda\u0cdb\5\u00caf\2\u0cdb\u0cdd\3\2\2\2\u0cdc")
        buf.write("\u0ca9\3\2\2\2\u0cdc\u0cc2\3\2\2\2\u0cdd\u00bd\3\2\2\2")
        buf.write("\u0cde\u0ce0\5\u00c0a\2\u0cdf\u0cde\3\2\2\2\u0ce0\u0ce3")
        buf.write("\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2")
        buf.write("\u0ce7\3\2\2\2\u0ce3\u0ce1\3\2\2\2\u0ce4\u0ce6\7}\2\2")
        buf.write("\u0ce5\u0ce4\3\2\2\2\u0ce6\u0ce9\3\2\2\2\u0ce7\u0ce5\3")
        buf.write("\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0ceb\3\2\2\2\u0ce9\u0ce7")
        buf.write("\3\2\2\2\u0cea\u0cec\5<\37\2\u0ceb\u0cea\3\2\2\2\u0ceb")
        buf.write("\u0cec\3\2\2\2\u0cec\u00bf\3\2\2\2\u0ced\u0cee\7a\2\2")
        buf.write("\u0cee\u0cef\7w\2\2\u0cef\u00c1\3\2\2\2\u0cf0\u0cf4\7")
        buf.write("\37\2\2\u0cf1\u0cf3\7}\2\2\u0cf2\u0cf1\3\2\2\2\u0cf3\u0cf6")
        buf.write("\3\2\2\2\u0cf4\u0cf2\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5")
        buf.write("\u0cf7\3\2\2\2\u0cf6\u0cf4\3\2\2\2\u0cf7\u0cfb\7w\2\2")
        buf.write("\u0cf8\u0cfa\7}\2\2\u0cf9\u0cf8\3\2\2\2\u0cfa\u0cfd\3")
        buf.write("\2\2\2\u0cfb\u0cf9\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfe")
        buf.write("\3\2\2\2\u0cfd\u0cfb\3\2\2\2\u0cfe\u0d02\5j\66\2\u0cff")
        buf.write("\u0d01\7}\2\2\u0d00\u0cff\3\2\2\2\u0d01\u0d04\3\2\2\2")
        buf.write("\u0d02\u0d00\3\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d06\3")
        buf.write("\2\2\2\u0d04\u0d02\3\2\2\2\u0d05\u0d07\5\u00c8e\2\u0d06")
        buf.write("\u0d05\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d0b\3\2\2\2")
        buf.write("\u0d08\u0d0a\7}\2\2\u0d09\u0d08\3\2\2\2\u0d0a\u0d0d\3")
        buf.write("\2\2\2\u0d0b\u0d09\3\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c\u0d0e")
        buf.write("\3\2\2\2\u0d0d\u0d0b\3\2\2\2\u0d0e\u0d0f\5\u00c4c\2\u0d0f")
        buf.write("\u00c3\3\2\2\2\u0d10\u0d14\7K\2\2\u0d11\u0d13\7}\2\2\u0d12")
        buf.write("\u0d11\3\2\2\2\u0d13\u0d16\3\2\2\2\u0d14\u0d12\3\2\2\2")
        buf.write("\u0d14\u0d15\3\2\2\2\u0d15\u0d31\3\2\2\2\u0d16\u0d14\3")
        buf.write("\2\2\2\u0d17\u0d1b\5\u00c6d\2\u0d18\u0d1a\7}\2\2\u0d19")
        buf.write("\u0d18\3\2\2\2\u0d1a\u0d1d\3\2\2\2\u0d1b\u0d19\3\2\2\2")
        buf.write("\u0d1b\u0d1c\3\2\2\2\u0d1c\u0d2e\3\2\2\2\u0d1d\u0d1b\3")
        buf.write("\2\2\2\u0d1e\u0d22\7f\2\2\u0d1f\u0d21\7}\2\2\u0d20\u0d1f")
        buf.write("\3\2\2\2\u0d21\u0d24\3\2\2\2\u0d22\u0d20\3\2\2\2\u0d22")
        buf.write("\u0d23\3\2\2\2\u0d23\u0d25\3\2\2\2\u0d24\u0d22\3\2\2\2")
        buf.write("\u0d25\u0d29\5\u00c6d\2\u0d26\u0d28\7}\2\2\u0d27\u0d26")
        buf.write("\3\2\2\2\u0d28\u0d2b\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d29")
        buf.write("\u0d2a\3\2\2\2\u0d2a\u0d2d\3\2\2\2\u0d2b\u0d29\3\2\2\2")
        buf.write("\u0d2c\u0d1e\3\2\2\2\u0d2d\u0d30\3\2\2\2\u0d2e\u0d2c\3")
        buf.write("\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d32\3\2\2\2\u0d30\u0d2e")
        buf.write("\3\2\2\2\u0d31\u0d17\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32")
        buf.write("\u0d33\3\2\2\2\u0d33\u0d34\7L\2\2\u0d34\u00c5\3\2\2\2")
        buf.write("\u0d35\u0d39\7w\2\2\u0d36\u0d38\7}\2\2\u0d37\u0d36\3\2")
        buf.write("\2\2\u0d38\u0d3b\3\2\2\2\u0d39\u0d37\3\2\2\2\u0d39\u0d3a")
        buf.write("\3\2\2\2\u0d3a\u0d3c\3\2\2\2\u0d3b\u0d39\3\2\2\2\u0d3c")
        buf.write("\u0d40\7d\2\2\u0d3d\u0d3f\7}\2\2\u0d3e\u0d3d\3\2\2\2\u0d3f")
        buf.write("\u0d42\3\2\2\2\u0d40\u0d3e\3\2\2\2\u0d40\u0d41\3\2\2\2")
        buf.write("\u0d41\u0d43\3\2\2\2\u0d42\u0d40\3\2\2\2\u0d43\u0d44\5")
        buf.write("\2\2\2\u0d44\u00c7\3\2\2\2\u0d45\u0d49\5:\36\2\u0d46\u0d48")
        buf.write("\7}\2\2\u0d47\u0d46\3\2\2\2\u0d48\u0d4b\3\2\2\2\u0d49")
        buf.write("\u0d47\3\2\2\2\u0d49\u0d4a\3\2\2\2\u0d4a\u0d4d\3\2\2\2")
        buf.write("\u0d4b\u0d49\3\2\2\2\u0d4c\u0d45\3\2\2\2\u0d4d\u0d4e\3")
        buf.write("\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u00c9")
        buf.write("\3\2\2\2\u0d50\u0d52\7~\2\2\u0d51\u0d50\3\2\2\2\u0d52")
        buf.write("\u0d55\3\2\2\2\u0d53\u0d51\3\2\2\2\u0d53\u0d54\3\2\2\2")
        buf.write("\u0d54\u0d56\3\2\2\2\u0d55\u0d53\3\2\2\2\u0d56\u0d5a\7")
        buf.write("e\2\2\u0d57\u0d59\7~\2\2\u0d58\u0d57\3\2\2\2\u0d59\u0d5c")
        buf.write("\3\2\2\2\u0d5a\u0d58\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b")
        buf.write("\u00cb\3\2\2\2\u0d5c\u0d5a\3\2\2\2\u0205\u00d1\u00d9\u00e2")
        buf.write("\u00e7\u00ee\u00f5\u00fe\u0105\u010c\u0113\u011a\u0123")
        buf.write("\u012a\u0131\u0138\u013f\u0144\u014a\u014e\u0153\u015a")
        buf.write("\u0161\u0167\u0170\u0179\u0180\u0187\u018e\u0195\u019e")
        buf.write("\u01a5\u01ac\u01b1\u01b6\u01bb\u01c2\u01c9\u01ce\u01d5")
        buf.write("\u01dc\u01e3\u01ea\u01f1\u01f5\u01fa\u01ff\u0204\u020b")
        buf.write("\u0212\u021b\u021f\u0224\u022c\u0231\u0233\u023a\u0241")
        buf.write("\u0248\u024d\u0253\u0259\u0261\u026a\u0271\u0278\u0281")
        buf.write("\u0285\u028b\u0290\u0297\u029e\u02a5\u02ac\u02b2\u02b9")
        buf.write("\u02bf\u02c6\u02cd\u02d4\u02d9\u02e0\u02e7\u02ee\u02f3")
        buf.write("\u02fa\u0301\u0308\u030d\u0314\u031b\u0322\u0327\u032e")
        buf.write("\u0335\u033c\u0341\u0348\u034f\u0356\u035b\u0362\u0369")
        buf.write("\u0370\u0375\u037c\u0383\u038a\u038f\u0396\u039d\u03a4")
        buf.write("\u03a9\u03b0\u03b7\u03be\u03c3\u03ca\u03d1\u03d8\u03df")
        buf.write("\u03e6\u03e9\u03f0\u03f7\u03fd\u0405\u040c\u0413\u0418")
        buf.write("\u0421\u0425\u042a\u0430\u0435\u043d\u0443\u044a\u0451")
        buf.write("\u0456\u045d\u0464\u046b\u046e\u0482\u0489\u0490\u049b")
        buf.write("\u04a1\u04a8\u04af\u04bb\u04c2\u04c9\u04ce\u04d4\u04da")
        buf.write("\u04e1\u04e8\u04eb\u04f1\u04f7\u04fd\u0506\u050b\u0512")
        buf.write("\u0519\u051e\u0524\u0528\u052d\u0531\u0536\u053a\u0540")
        buf.write("\u0547\u054d\u0552\u0557\u055e\u0562\u0568\u056c\u0571")
        buf.write("\u0578\u057f\u0583\u0588\u0591\u0595\u059b\u05a2\u05a9")
        buf.write("\u05ae\u05b5\u05bc\u05c3\u05c6\u05ce\u05d5\u05dc\u05e3")
        buf.write("\u05ee\u05f5\u05fc\u0601\u0607\u060e\u0613\u0618\u061e")
        buf.write("\u0623\u062a\u0630\u0639\u0640\u0649\u0650\u0658\u065c")
        buf.write("\u0661\u0668\u066f\u0674\u067a\u0681\u0685\u068a\u068e")
        buf.write("\u0693\u069b\u06a2\u06a9\u06ad\u06b2\u06b9\u06c2\u06c9")
        buf.write("\u06d0\u06d8\u06e1\u06e8\u06ec\u06f1\u06f8\u0700\u0707")
        buf.write("\u070e\u0717\u071e\u0722\u0727\u072b\u072d\u0734\u073b")
        buf.write("\u0741\u0746\u074b\u0751\u0758\u075f\u0766\u076d\u0773")
        buf.write("\u0778\u077f\u0783\u0788\u078d\u0795\u0799\u079e\u07a5")
        buf.write("\u07a8\u07af\u07b6\u07bb\u07bd\u07c4\u07c8\u07cd\u07d2")
        buf.write("\u07d7\u07dd\u07e4\u07eb\u07ee\u07f4\u07fb\u0802\u0807")
        buf.write("\u080e\u0817\u081b\u081d\u0823\u082a\u0831\u0836\u083d")
        buf.write("\u0841\u0845\u084a\u0851\u0857\u085a\u0861\u0868\u086f")
        buf.write("\u0875\u087c\u0880\u0885\u0889\u088e\u0896\u089d\u08a1")
        buf.write("\u08a6\u08ad\u08b6\u08bd\u08c4\u08cb\u08d4\u08db\u08e3")
        buf.write("\u08e7\u08ec\u08f3\u08f9\u08fc\u0902\u0909\u090d\u0912")
        buf.write("\u0916\u091b\u0923\u092a\u0931\u0935\u093a\u0941\u094a")
        buf.write("\u0951\u0958\u095f\u0966\u096f\u0976\u097d\u0985\u098c")
        buf.write("\u0990\u0995\u099c\u09a2\u09a5\u09a7\u09b1\u09b5\u09ba")
        buf.write("\u09be\u09c3\u09c7\u09ca\u09cf\u09d6\u09dd\u09e1\u09e6")
        buf.write("\u09ed\u09f2\u09f9\u0a01\u0a07\u0a0e\u0a17\u0a1b\u0a21")
        buf.write("\u0a28\u0a2f\u0a36\u0a3c\u0a41\u0a52\u0a59\u0a60\u0a67")
        buf.write("\u0a6e\u0a75\u0a7a\u0a7d\u0a82\u0a89\u0a90\u0a97\u0a9d")
        buf.write("\u0aa0\u0aa4\u0aaa\u0aaf\u0ab5\u0abc\u0ac4\u0acb\u0ad2")
        buf.write("\u0adb\u0ae2\u0ae6\u0aec\u0af0\u0af5\u0afd\u0b02\u0b07")
        buf.write("\u0b0c\u0b10\u0b18\u0b1f\u0b25\u0b2a\u0b31\u0b35\u0b3a")
        buf.write("\u0b41\u0b45\u0b4a\u0b4d\u0b53\u0b5a\u0b5f\u0b64\u0b6b")
        buf.write("\u0b72\u0b76\u0b7b\u0b84\u0b8d\u0b96\u0b9d\u0ba4\u0bab")
        buf.write("\u0bb2\u0bb9\u0bbd\u0bc3\u0bca\u0bd1\u0bd8\u0bdd\u0be3")
        buf.write("\u0bea\u0bf1\u0bf8\u0c01\u0c08\u0c0f\u0c16\u0c1d\u0c27")
        buf.write("\u0c2e\u0c35\u0c3c\u0c41\u0c45\u0c47\u0c4b\u0c4f\u0c55")
        buf.write("\u0c59\u0c5f\u0c66\u0c6d\u0c72\u0c79\u0c82\u0c86\u0c8c")
        buf.write("\u0c90\u0c95\u0c9e\u0ca0\u0ca2\u0ca7\u0cad\u0cb4\u0cb8")
        buf.write("\u0cbd\u0cc6\u0ccd\u0cd1\u0cd6\u0cdc\u0ce1\u0ce7\u0ceb")
        buf.write("\u0cf4\u0cfb\u0d02\u0d06\u0d0b\u0d14\u0d1b\u0d22\u0d29")
        buf.write("\u0d2e\u0d31\u0d39\u0d40\u0d49\u0d4e\u0d53\u0d5a")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'try'", "'except'", "'finally'", "'as'", "'auto'", 
                     "'break'", "'case'", "'char'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'exttask'", 
                     "'entry'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'lambda'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'spawn'", "'static'", "'status'", 
                     "'struct'", "'switch'", "'typeof'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
                     "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", 
                     "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'@'", "'=>'", "'?'", "':'", "';'", "','", "'='", "'*='", 
                     "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
                     "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "As", "Auto", "Break", "Case", 
                      "Char", "Const", "Continue", "Default", "Do", "Double", 
                      "Else", "ExtensionTask", "Entry", "Enum", "Extern", 
                      "Float", "For", "Goto", "If", "Inline", "Int", "Lambda", 
                      "Long", "Register", "Restrict", "Return", "Short", 
                      "Signed", "Sizeof", "Spawn", "Static", "Status", "Struct", 
                      "Switch", "Typeof", "Typedef", "Union", "Unsigned", 
                      "Void", "Volatile", "While", "Alignas", "Alignof", 
                      "Atomic", "Bool", "Complex", "Generic", "Imaginary", 
                      "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
                      "LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", 
                      "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", 
                      "OrOr", "Caret", "Not", "Tilde", "DecoratorSign", 
                      "LambdaStartBlock", "Question", "Colon", "Semi", "Comma", 
                      "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "AsmBlock", "Directive", 
                      "WS", "Whitespace", "Newline" ]

    RULE_primaryExpression = 0
    RULE_lambdaFunction = 1
    RULE_lambdaBody = 2
    RULE_expressionLambda = 3
    RULE_statementLambda = 4
    RULE_genericSelection = 5
    RULE_genericAssocList = 6
    RULE_genericAssociation = 7
    RULE_postfixExpression = 8
    RULE_argumentExpressionList = 9
    RULE_unaryExpression = 10
    RULE_unaryOperator = 11
    RULE_castOrConvertExpression = 12
    RULE_multiplicativeExpression = 13
    RULE_additiveExpression = 14
    RULE_shiftExpression = 15
    RULE_relationalExpression = 16
    RULE_equalityExpression = 17
    RULE_andExpression = 18
    RULE_exclusiveOrExpression = 19
    RULE_inclusiveOrExpression = 20
    RULE_logicalAndExpression = 21
    RULE_logicalOrExpression = 22
    RULE_conditionalExpression = 23
    RULE_assignmentExpression = 24
    RULE_assignmentOperator = 25
    RULE_expression = 26
    RULE_constantExpression = 27
    RULE_declaration = 28
    RULE_declarationSpecifiers = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_entryPointSpecifier = 33
    RULE_storageClassSpecifier = 34
    RULE_typeSpecifier = 35
    RULE_structOrUnionSpecifier = 36
    RULE_structOrUnion = 37
    RULE_structDeclarationList = 38
    RULE_structDeclaration = 39
    RULE_specifierQualifierList = 40
    RULE_structDeclaratorList = 41
    RULE_structDeclarator = 42
    RULE_enumSpecifier = 43
    RULE_enumeratorList = 44
    RULE_enumerator = 45
    RULE_enumerationConstant = 46
    RULE_atomicTypeSpecifier = 47
    RULE_typeQualifier = 48
    RULE_functionSpecifier = 49
    RULE_alignmentSpecifier = 50
    RULE_declarator = 51
    RULE_directDeclarator = 52
    RULE_gccDeclaratorExtension = 53
    RULE_gccAttributeSpecifier = 54
    RULE_gccAttributeList = 55
    RULE_gccAttribute = 56
    RULE_nestedParenthesesBlock = 57
    RULE_pointer = 58
    RULE_typeQualifierList = 59
    RULE_parameterTypeList = 60
    RULE_parameterList = 61
    RULE_parameterDeclaration = 62
    RULE_identifierList = 63
    RULE_typeName = 64
    RULE_abstractDeclarator = 65
    RULE_directAbstractDeclarator = 66
    RULE_typedefName = 67
    RULE_initializer = 68
    RULE_initializerList = 69
    RULE_designation = 70
    RULE_designatorList = 71
    RULE_designator = 72
    RULE_staticAssertDeclaration = 73
    RULE_statement = 74
    RULE_labeledStatement = 75
    RULE_compoundStatement = 76
    RULE_blockItemList = 77
    RULE_blockItem = 78
    RULE_expressionStatement = 79
    RULE_tryExceptStatement = 80
    RULE_exceptBlock = 81
    RULE_finallyBlock = 82
    RULE_elseBlock = 83
    RULE_selectionStatement = 84
    RULE_iterationStatement = 85
    RULE_forCondition = 86
    RULE_forDeclaration = 87
    RULE_forExpression = 88
    RULE_jumpStatement = 89
    RULE_compilationUnit = 90
    RULE_translationUnit = 91
    RULE_externalItem = 92
    RULE_functionDefinition = 93
    RULE_functionDeclarationSpecifiers = 94
    RULE_decoratorSpecifier = 95
    RULE_extensionTaskDefinition = 96
    RULE_extensionTaskParameterList = 97
    RULE_extensionTaskParameter = 98
    RULE_declarationList = 99
    RULE_endOfItem = 100

    ruleNames =  [ "primaryExpression", "lambdaFunction", "lambdaBody", 
                   "expressionLambda", "statementLambda", "genericSelection", 
                   "genericAssocList", "genericAssociation", "postfixExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castOrConvertExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "entryPointSpecifier", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "tryExceptStatement", "exceptBlock", "finallyBlock", 
                   "elseBlock", "selectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalItem", 
                   "functionDefinition", "functionDeclarationSpecifiers", 
                   "decoratorSpecifier", "extensionTaskDefinition", "extensionTaskParameterList", 
                   "extensionTaskParameter", "declarationList", "endOfItem" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    As=18
    Auto=19
    Break=20
    Case=21
    Char=22
    Const=23
    Continue=24
    Default=25
    Do=26
    Double=27
    Else=28
    ExtensionTask=29
    Entry=30
    Enum=31
    Extern=32
    Float=33
    For=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Lambda=39
    Long=40
    Register=41
    Restrict=42
    Return=43
    Short=44
    Signed=45
    Sizeof=46
    Spawn=47
    Static=48
    Status=49
    Struct=50
    Switch=51
    Typeof=52
    Typedef=53
    Union=54
    Unsigned=55
    Void=56
    Volatile=57
    While=58
    Alignas=59
    Alignof=60
    Atomic=61
    Bool=62
    Complex=63
    Generic=64
    Imaginary=65
    Noreturn=66
    StaticAssert=67
    ThreadLocal=68
    LeftParen=69
    RightParen=70
    LeftBracket=71
    RightBracket=72
    LeftBrace=73
    RightBrace=74
    Less=75
    LessEqual=76
    Greater=77
    GreaterEqual=78
    LeftShift=79
    RightShift=80
    Plus=81
    PlusPlus=82
    Minus=83
    MinusMinus=84
    Star=85
    Div=86
    Mod=87
    And=88
    Or=89
    AndAnd=90
    OrOr=91
    Caret=92
    Not=93
    Tilde=94
    DecoratorSign=95
    LambdaStartBlock=96
    Question=97
    Colon=98
    Semi=99
    Comma=100
    Assign=101
    StarAssign=102
    DivAssign=103
    ModAssign=104
    PlusAssign=105
    MinusAssign=106
    LeftShiftAssign=107
    RightShiftAssign=108
    AndAssign=109
    XorAssign=110
    OrAssign=111
    Equal=112
    NotEqual=113
    Arrow=114
    Dot=115
    Ellipsis=116
    Identifier=117
    Constant=118
    DigitSequence=119
    StringLiteral=120
    AsmBlock=121
    Directive=122
    WS=123
    Whitespace=124
    Newline=125

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Spawn(self):
            return self.getToken(ParaCParser.Spawn, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(ParaCParser.GenericSelectionContext,0)


        def lambdaFunction(self):
            return self.getTypedRuleContext(ParaCParser.LambdaFunctionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 203
                self.match(ParaCParser.Spawn)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 204
                    self.match(ParaCParser.WS)
                    self.state = 209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 210
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 211
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 213 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 212
                        self.match(ParaCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 215 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 217
                self.match(ParaCParser.LeftParen)
                self.state = 218
                self.expression()
                self.state = 219
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 221
                self.genericSelection()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 222
                self.lambdaFunction()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 223
                    self.match(ParaCParser.T__0)


                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 226
                    self.match(ParaCParser.WS)
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 232
                self.match(ParaCParser.LeftParen)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 233
                    self.match(ParaCParser.WS)
                    self.state = 238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 239
                self.compoundStatement()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 240
                    self.match(ParaCParser.WS)
                    self.state = 245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 246
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 248
                self.match(ParaCParser.T__1)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 249
                    self.match(ParaCParser.WS)
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 255
                self.match(ParaCParser.LeftParen)
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 256
                        self.match(ParaCParser.WS) 
                    self.state = 261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 262
                self.unaryExpression()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 263
                    self.match(ParaCParser.WS)
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 269
                self.match(ParaCParser.Comma)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 270
                    self.match(ParaCParser.WS)
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 276
                self.typeName()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 277
                    self.match(ParaCParser.WS)
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 283
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 285
                self.match(ParaCParser.T__2)
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 286
                    self.match(ParaCParser.WS)
                    self.state = 291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 292
                self.match(ParaCParser.LeftParen)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 293
                    self.match(ParaCParser.WS)
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 299
                self.typeName()
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 300
                    self.match(ParaCParser.WS)
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 306
                self.match(ParaCParser.Comma)
                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 307
                        self.match(ParaCParser.WS) 
                    self.state = 312
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 313
                self.unaryExpression()
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 314
                    self.match(ParaCParser.WS)
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 320
                self.match(ParaCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(ParaCParser.LambdaBodyContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunction" ):
                listener.enterLambdaFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunction" ):
                listener.exitLambdaFunction(self)




    def lambdaFunction(self):

        localctx = ParaCParser.LambdaFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdaFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(ParaCParser.LeftParen)
            self.state = 328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 325
                    self.match(ParaCParser.WS) 
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                self.state = 331
                self.parameterList()


            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 334
                self.match(ParaCParser.WS)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 340
            self.match(ParaCParser.RightParen)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 341
                self.match(ParaCParser.WS)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 347
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)


        def statementLambda(self):
            return self.getTypedRuleContext(ParaCParser.StatementLambdaContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = ParaCParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_lambdaBody)
        try:
            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.expressionLambda()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.statementLambda()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expressionLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)




    def expressionLambda(self):

        localctx = ParaCParser.ExpressionLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.match(ParaCParser.WS) 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 360
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statementLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLambda" ):
                listener.enterStatementLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLambda" ):
                listener.exitStatementLambda(self)




    def statementLambda(self):

        localctx = ParaCParser.StatementLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 363
                self.match(ParaCParser.WS)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 369
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(ParaCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(ParaCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = ParaCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_genericSelection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(ParaCParser.Generic)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 372
                self.match(ParaCParser.WS)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 378
            self.match(ParaCParser.LeftParen)
            self.state = 382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 379
                    self.match(ParaCParser.WS) 
                self.state = 384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 385
            self.assignmentExpression()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 386
                self.match(ParaCParser.WS)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 392
            self.match(ParaCParser.Comma)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 393
                self.match(ParaCParser.WS)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 399
            self.genericAssocList()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 400
                self.match(ParaCParser.WS)
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GenericAssociationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = ParaCParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.genericAssociation()
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 409
                    self.match(ParaCParser.WS) 
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 415
                self.match(ParaCParser.Comma)
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 416
                    self.match(ParaCParser.WS)
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 422
                self.genericAssociation()
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 423
                        self.match(ParaCParser.WS) 
                    self.state = 428
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = ParaCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_genericAssociation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.state = 434
                self.typeName()
                pass
            elif token in [ParaCParser.Default]:
                self.state = 435
                self.match(ParaCParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 438
                self.match(ParaCParser.WS)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.match(ParaCParser.Colon)
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 445
                    self.match(ParaCParser.WS) 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 451
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 453
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 454
                    self.match(ParaCParser.T__0)


                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 457
                    self.match(ParaCParser.WS)
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 463
                self.match(ParaCParser.LeftParen)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 464
                    self.match(ParaCParser.WS)
                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 470
                self.typeName()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 471
                    self.match(ParaCParser.WS)
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 477
                self.match(ParaCParser.RightParen)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 478
                    self.match(ParaCParser.WS)
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 484
                self.match(ParaCParser.LeftBrace)
                self.state = 488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 485
                        self.match(ParaCParser.WS) 
                    self.state = 490
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                self.state = 491
                self.initializerList()
                self.state = 495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 492
                        self.match(ParaCParser.WS) 
                    self.state = 497
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 498
                    self.match(ParaCParser.Comma)


                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 501
                    self.match(ParaCParser.WS)
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 507
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    self.match(ParaCParser.WS) 
                self.state = 516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.LeftBracket]:
                        self.state = 517
                        self.match(ParaCParser.LeftBracket)
                        self.state = 521
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 518
                                self.match(ParaCParser.WS) 
                            self.state = 523
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                        self.state = 524
                        self.expression()
                        self.state = 528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 525
                            self.match(ParaCParser.WS)
                            self.state = 530
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 531
                        self.match(ParaCParser.RightBracket)
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 533
                        self.match(ParaCParser.LeftParen)
                        self.state = 537
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 534
                                self.match(ParaCParser.WS) 
                            self.state = 539
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                        self.state = 541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                        if la_ == 1:
                            self.state = 540
                            self.argumentExpressionList()


                        self.state = 546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 543
                            self.match(ParaCParser.WS)
                            self.state = 548
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 549
                        self.match(ParaCParser.RightParen)
                        pass
                    elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                        self.state = 550
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 551
                            self.match(ParaCParser.WS)
                            self.state = 556
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 557
                        self.match(ParaCParser.Identifier)
                        pass
                    elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                        self.state = 558
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.assignmentExpression()
            self.state = 568
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 565
                    self.match(ParaCParser.WS) 
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 571
                self.match(ParaCParser.Comma)
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 572
                        self.match(ParaCParser.WS) 
                    self.state = 577
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                self.state = 578
                self.assignmentExpression()
                self.state = 582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 579
                        self.match(ParaCParser.WS) 
                    self.state = 584
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 590
                    _la = self._input.LA(1)
                    if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (ParaCParser.Sizeof - 46)) | (1 << (ParaCParser.PlusPlus - 46)) | (1 << (ParaCParser.MinusMinus - 46)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 596
                    self.match(ParaCParser.WS) 
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Spawn, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral, ParaCParser.WS]:
                self.state = 602
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 603
                self.unaryOperator()
                self.state = 607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 604
                        self.match(ParaCParser.WS) 
                    self.state = 609
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                self.state = 610
                self.castOrConvertExpression(0)
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 612
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 613
                    self.match(ParaCParser.WS)
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 619
                self.match(ParaCParser.LeftParen)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 620
                    self.match(ParaCParser.WS)
                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 626
                self.typeName()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 627
                    self.match(ParaCParser.WS)
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 633
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 635
                self.match(ParaCParser.AndAnd)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 636
                    self.match(ParaCParser.WS)
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 642
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            _la = self._input.LA(1)
            if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (ParaCParser.Plus - 81)) | (1 << (ParaCParser.Minus - 81)) | (1 << (ParaCParser.Star - 81)) | (1 << (ParaCParser.And - 81)) | (1 << (ParaCParser.Not - 81)) | (1 << (ParaCParser.Tilde - 81)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOrConvertExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castOrConvertExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOrConvertExpression" ):
                listener.enterCastOrConvertExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOrConvertExpression" ):
                listener.exitCastOrConvertExpression(self)



    def castOrConvertExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.CastOrConvertExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_castOrConvertExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 648
                    self.match(ParaCParser.T__0)


                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 651
                    self.match(ParaCParser.WS)
                    self.state = 656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 657
                self.match(ParaCParser.LeftParen)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 658
                    self.match(ParaCParser.WS)
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 664
                self.typeName()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 665
                    self.match(ParaCParser.WS)
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 671
                self.match(ParaCParser.RightParen)
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 672
                        self.match(ParaCParser.WS) 
                    self.state = 677
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                self.state = 678
                self.castOrConvertExpression(4)
                pass

            elif la_ == 2:
                self.state = 680
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 681
                self.match(ParaCParser.DigitSequence)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.CastOrConvertExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_castOrConvertExpression)
                    self.state = 684
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 685
                        self.match(ParaCParser.WS)
                        self.state = 690
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 691
                    self.match(ParaCParser.As)
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 692
                        self.match(ParaCParser.WS)
                        self.state = 697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 698
                    self.typeName() 
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castOrConvertExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastOrConvertExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.castOrConvertExpression(0)
            self.state = 708
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 705
                    self.match(ParaCParser.WS) 
                self.state = 710
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 727
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 711
                    _la = self._input.LA(1)
                    if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (ParaCParser.Star - 85)) | (1 << (ParaCParser.Div - 85)) | (1 << (ParaCParser.Mod - 85)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 715
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 712
                            self.match(ParaCParser.WS) 
                        self.state = 717
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    self.state = 718
                    self.castOrConvertExpression(0)
                    self.state = 722
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 719
                            self.match(ParaCParser.WS) 
                        self.state = 724
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
             
                self.state = 729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.multiplicativeExpression()
            self.state = 734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 731
                    self.match(ParaCParser.WS) 
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 753
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 737
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 741
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 738
                            self.match(ParaCParser.WS) 
                        self.state = 743
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                    self.state = 744
                    self.multiplicativeExpression()
                    self.state = 748
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 745
                            self.match(ParaCParser.WS) 
                        self.state = 750
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
             
                self.state = 755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.additiveExpression()
            self.state = 760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 757
                    self.match(ParaCParser.WS) 
                self.state = 762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 779
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 763
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 767
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 764
                            self.match(ParaCParser.WS) 
                        self.state = 769
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                    self.state = 770
                    self.additiveExpression()
                    self.state = 774
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 771
                            self.match(ParaCParser.WS) 
                        self.state = 776
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
             
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.shiftExpression()
            self.state = 786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 783
                    self.match(ParaCParser.WS) 
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    _la = self._input.LA(1)
                    if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (ParaCParser.Less - 75)) | (1 << (ParaCParser.LessEqual - 75)) | (1 << (ParaCParser.Greater - 75)) | (1 << (ParaCParser.GreaterEqual - 75)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 793
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 790
                            self.match(ParaCParser.WS) 
                        self.state = 795
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                    self.state = 796
                    self.shiftExpression()
                    self.state = 800
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 797
                            self.match(ParaCParser.WS) 
                        self.state = 802
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
             
                self.state = 807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.relationalExpression()
            self.state = 812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 809
                    self.match(ParaCParser.WS) 
                self.state = 814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 831
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 815
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 819
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 816
                            self.match(ParaCParser.WS) 
                        self.state = 821
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                    self.state = 822
                    self.relationalExpression()
                    self.state = 826
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 823
                            self.match(ParaCParser.WS) 
                        self.state = 828
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
             
                self.state = 833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.equalityExpression()
            self.state = 838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 835
                    self.match(ParaCParser.WS) 
                self.state = 840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 841
                    self.match(ParaCParser.And)
                    self.state = 845
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 842
                            self.match(ParaCParser.WS) 
                        self.state = 847
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                    self.state = 848
                    self.equalityExpression()
                    self.state = 852
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 849
                            self.match(ParaCParser.WS) 
                        self.state = 854
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
             
                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_exclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.andExpression()
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 861
                    self.match(ParaCParser.WS) 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 867
                    self.match(ParaCParser.Caret)
                    self.state = 871
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 868
                            self.match(ParaCParser.WS) 
                        self.state = 873
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                    self.state = 874
                    self.andExpression()
                    self.state = 878
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 875
                            self.match(ParaCParser.WS) 
                        self.state = 880
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
             
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_inclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.exclusiveOrExpression()
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self.match(ParaCParser.WS) 
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 893
                    self.match(ParaCParser.Or)
                    self.state = 897
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 894
                            self.match(ParaCParser.WS) 
                        self.state = 899
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                    self.state = 900
                    self.exclusiveOrExpression()
                    self.state = 904
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 901
                            self.match(ParaCParser.WS) 
                        self.state = 906
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
             
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.inclusiveOrExpression()
            self.state = 916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 913
                    self.match(ParaCParser.WS) 
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 919
                    self.match(ParaCParser.AndAnd)
                    self.state = 923
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 920
                            self.match(ParaCParser.WS) 
                        self.state = 925
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                    self.state = 926
                    self.inclusiveOrExpression()
                    self.state = 930
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 927
                            self.match(ParaCParser.WS) 
                        self.state = 932
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
             
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_logicalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.logicalAndExpression()
            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 939
                    self.match(ParaCParser.WS) 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 945
                    self.match(ParaCParser.OrOr)
                    self.state = 949
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 946
                            self.match(ParaCParser.WS) 
                        self.state = 951
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                    self.state = 952
                    self.logicalAndExpression()
                    self.state = 956
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 953
                            self.match(ParaCParser.WS) 
                        self.state = 958
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
             
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.logicalOrExpression()
            self.state = 968
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 965
                    self.match(ParaCParser.WS) 
                self.state = 970
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 971
                self.match(ParaCParser.Question)
                self.state = 975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 972
                        self.match(ParaCParser.WS) 
                    self.state = 977
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                self.state = 978
                self.expression()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 979
                    self.match(ParaCParser.WS)
                    self.state = 984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 985
                self.match(ParaCParser.Colon)
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 986
                        self.match(ParaCParser.WS) 
                    self.state = 991
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 992
                self.conditionalExpression()
                self.state = 996
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 993
                        self.match(ParaCParser.WS) 
                    self.state = 998
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignmentExpression)
        self._la = 0 # Token type
        try:
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.unaryExpression()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1003
                    self.match(ParaCParser.WS)
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1009
                self.assignmentOperator()
                self.state = 1013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1010
                        self.match(ParaCParser.WS) 
                    self.state = 1015
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                self.state = 1016
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1018
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (ParaCParser.Assign - 101)) | (1 << (ParaCParser.StarAssign - 101)) | (1 << (ParaCParser.DivAssign - 101)) | (1 << (ParaCParser.ModAssign - 101)) | (1 << (ParaCParser.PlusAssign - 101)) | (1 << (ParaCParser.MinusAssign - 101)) | (1 << (ParaCParser.LeftShiftAssign - 101)) | (1 << (ParaCParser.RightShiftAssign - 101)) | (1 << (ParaCParser.AndAssign - 101)) | (1 << (ParaCParser.XorAssign - 101)) | (1 << (ParaCParser.OrAssign - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.assignmentExpression()
            self.state = 1027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1024
                    self.match(ParaCParser.WS) 
                self.state = 1029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1046
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1030
                    self.match(ParaCParser.Comma)
                    self.state = 1034
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1031
                            self.match(ParaCParser.WS) 
                        self.state = 1036
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                    self.state = 1037
                    self.assignmentExpression()
                    self.state = 1041
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1038
                            self.match(ParaCParser.WS) 
                        self.state = 1043
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
             
                self.state = 1048
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1064
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1051
                self.declarationSpecifiers()
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1052
                        self.match(ParaCParser.WS) 
                    self.state = 1057
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Identifier - 69)) | (1 << (ParaCParser.WS - 69)))) != 0):
                    self.state = 1058
                    self.initDeclaratorList()


                self.state = 1061
                self.endOfItem()
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1066
                    self.declarationSpecifier()
                    self.state = 1070
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1067
                            self.match(ParaCParser.WS) 
                        self.state = 1072
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,132,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1075 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.entryPointSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1079
                self.typeSpecifier(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1080
                self.typeQualifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1081
                self.functionSpecifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1082
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.initDeclarator()
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1086
                self.match(ParaCParser.WS)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1092
                self.match(ParaCParser.Comma)
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1093
                        self.match(ParaCParser.WS) 
                    self.state = 1098
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

                self.state = 1099
                self.initDeclarator()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1100
                    self.match(ParaCParser.WS)
                    self.state = 1105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.declarator()
            self.state = 1115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1112
                    self.match(ParaCParser.WS) 
                self.state = 1117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 1118
                self.match(ParaCParser.Assign)
                self.state = 1122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1119
                        self.match(ParaCParser.WS) 
                    self.state = 1124
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                self.state = 1125
                self.initializer()
                self.state = 1129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1126
                        self.match(ParaCParser.WS) 
                    self.state = 1131
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryPointSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_entryPointSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryPointSpecifier" ):
                listener.enterEntryPointSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryPointSpecifier" ):
                listener.exitEntryPointSpecifier(self)




    def entryPointSpecifier(self):

        localctx = ParaCParser.EntryPointSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_entryPointSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(ParaCParser.Entry)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            _la = self._input.LA(1)
            if not(((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ParaCParser.Auto - 19)) | (1 << (ParaCParser.Extern - 19)) | (1 << (ParaCParser.Register - 19)) | (1 << (ParaCParser.Static - 19)) | (1 << (ParaCParser.Typedef - 19)) | (1 << (ParaCParser.ThreadLocal - 19)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def Lambda(self):
            return self.getToken(ParaCParser.Lambda, 0)

        def Less(self):
            return self.getToken(ParaCParser.Less, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def Greater(self):
            return self.getToken(ParaCParser.Greater, 0)

        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def Complex(self):
            return self.getToken(ParaCParser.Complex, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Typeof(self):
            return self.getToken(ParaCParser.Typeof, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool, ParaCParser.Complex]:
                self.state = 1177
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.Void]:
                    self.state = 1139
                    self.match(ParaCParser.Void)
                    pass
                elif token in [ParaCParser.Char]:
                    self.state = 1140
                    self.match(ParaCParser.Char)
                    pass
                elif token in [ParaCParser.Short]:
                    self.state = 1141
                    self.match(ParaCParser.Short)
                    pass
                elif token in [ParaCParser.Int]:
                    self.state = 1142
                    self.match(ParaCParser.Int)
                    pass
                elif token in [ParaCParser.Status]:
                    self.state = 1143
                    self.match(ParaCParser.Status)
                    pass
                elif token in [ParaCParser.Long]:
                    self.state = 1144
                    self.match(ParaCParser.Long)
                    pass
                elif token in [ParaCParser.Float]:
                    self.state = 1145
                    self.match(ParaCParser.Float)
                    pass
                elif token in [ParaCParser.Double]:
                    self.state = 1146
                    self.match(ParaCParser.Double)
                    pass
                elif token in [ParaCParser.Signed]:
                    self.state = 1147
                    self.match(ParaCParser.Signed)
                    pass
                elif token in [ParaCParser.Lambda]:
                    self.state = 1148
                    self.match(ParaCParser.Lambda)
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1149
                        self.match(ParaCParser.WS)
                        self.state = 1154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1155
                    self.match(ParaCParser.Less)
                    self.state = 1159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1156
                        self.match(ParaCParser.WS)
                        self.state = 1161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1162
                    self.parameterTypeList()
                    self.state = 1166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1163
                        self.match(ParaCParser.WS)
                        self.state = 1168
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1169
                    self.match(ParaCParser.Greater)
                    pass
                elif token in [ParaCParser.Unsigned]:
                    self.state = 1171
                    self.match(ParaCParser.Unsigned)
                    pass
                elif token in [ParaCParser.Bool]:
                    self.state = 1172
                    self.match(ParaCParser.Bool)
                    pass
                elif token in [ParaCParser.Complex]:
                    self.state = 1173
                    self.match(ParaCParser.Complex)
                    pass
                elif token in [ParaCParser.T__3]:
                    self.state = 1174
                    self.match(ParaCParser.T__3)
                    pass
                elif token in [ParaCParser.T__4]:
                    self.state = 1175
                    self.match(ParaCParser.T__4)
                    pass
                elif token in [ParaCParser.T__5]:
                    self.state = 1176
                    self.match(ParaCParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ParaCParser.T__0]:
                self.state = 1179
                self.match(ParaCParser.T__0)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1180
                    self.match(ParaCParser.WS)
                    self.state = 1185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1186
                self.match(ParaCParser.LeftParen)
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1187
                    self.match(ParaCParser.WS)
                    self.state = 1192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1193
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1194
                    self.match(ParaCParser.WS)
                    self.state = 1199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1200
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 1201
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 1202
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 1203
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 1204
                self.typedefName()
                pass
            elif token in [ParaCParser.T__6, ParaCParser.Typeof]:
                self.state = 1205
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__6 or _la==ParaCParser.Typeof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1206
                    self.match(ParaCParser.WS)
                    self.state = 1211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1212
                self.match(ParaCParser.LeftParen)
                self.state = 1216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1213
                        self.match(ParaCParser.WS) 
                    self.state = 1218
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1219
                self.constantExpression()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1220
                    self.match(ParaCParser.WS)
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1226
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 1230
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1231
                        self.match(ParaCParser.WS)
                        self.state = 1236
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1237
                    self.pointer() 
                self.state = 1242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def structDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1243
                self.structOrUnion()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1244
                    self.match(ParaCParser.WS)
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 1250
                    self.match(ParaCParser.Identifier)
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1251
                        self.match(ParaCParser.WS)
                        self.state = 1256
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1259
                self.match(ParaCParser.LeftBrace)
                self.state = 1263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1260
                        self.match(ParaCParser.WS) 
                    self.state = 1265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1266
                        self.structDeclarationList() 
                    self.state = 1271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1272
                    self.match(ParaCParser.WS)
                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1278
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                self.structOrUnion()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1281
                    self.match(ParaCParser.WS)
                    self.state = 1286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1287
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1293
                        self.match(ParaCParser.WS)
                        self.state = 1298
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1299
                    self.structDeclaration()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1300
                            self.match(ParaCParser.WS) 
                        self.state = 1305
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,165,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1308 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.specifierQualifierList()
                self.state = 1314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1311
                        self.match(ParaCParser.WS) 
                    self.state = 1316
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Colon - 69)) | (1 << (ParaCParser.Identifier - 69)) | (1 << (ParaCParser.WS - 69)))) != 0):
                    self.state = 1317
                    self.structDeclaratorList()


                self.state = 1320
                self.endOfItem()
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1322
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 1326
                self.typeQualifier()
                pass


            self.state = 1332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1329
                    self.match(ParaCParser.WS) 
                self.state = 1334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1335
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.structDeclarator()
            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1339
                self.match(ParaCParser.WS)
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1345
                self.match(ParaCParser.Comma)
                self.state = 1349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1346
                        self.match(ParaCParser.WS) 
                    self.state = 1351
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

                self.state = 1352
                self.structDeclarator()
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1359
                    self.declarator()


                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1362
                    self.match(ParaCParser.WS)
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1368
                self.match(ParaCParser.Colon)
                self.state = 1372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1369
                        self.match(ParaCParser.WS) 
                    self.state = 1374
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                self.state = 1375
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.match(ParaCParser.Enum)
                self.state = 1382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1379
                        self.match(ParaCParser.WS) 
                    self.state = 1384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 1385
                    self.match(ParaCParser.Identifier)


                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1388
                    self.match(ParaCParser.WS)
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1394
                self.match(ParaCParser.LeftBrace)
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1395
                    self.match(ParaCParser.WS)
                    self.state = 1400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1401
                self.enumeratorList()
                self.state = 1405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1402
                        self.match(ParaCParser.WS) 
                    self.state = 1407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 1408
                    self.match(ParaCParser.Comma)


                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1411
                    self.match(ParaCParser.WS)
                    self.state = 1416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1417
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self.match(ParaCParser.Enum)
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1420
                    self.match(ParaCParser.WS)
                    self.state = 1425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1426
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumeratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.enumerator()
            self.state = 1433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1430
                    self.match(ParaCParser.WS) 
                self.state = 1435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

            self.state = 1452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1436
                    self.match(ParaCParser.Comma)
                    self.state = 1440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1437
                        self.match(ParaCParser.WS)
                        self.state = 1442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1443
                    self.enumerator()
                    self.state = 1447
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1444
                            self.match(ParaCParser.WS) 
                        self.state = 1449
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
             
                self.state = 1454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.enumerationConstant()
            self.state = 1459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1456
                    self.match(ParaCParser.WS) 
                self.state = 1461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 1462
                self.match(ParaCParser.Assign)
                self.state = 1466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1463
                        self.match(ParaCParser.WS) 
                    self.state = 1468
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                self.state = 1469
                self.constantExpression()
                self.state = 1473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1470
                        self.match(ParaCParser.WS) 
                    self.state = 1475
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,195,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_atomicTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(ParaCParser.Atomic)
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1481
                self.match(ParaCParser.WS)
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1487
            self.match(ParaCParser.LeftParen)
            self.state = 1491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1488
                self.match(ParaCParser.WS)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1494
            self.typeName()
            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1495
                self.match(ParaCParser.WS)
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1501
            self.match(ParaCParser.RightParen)
            self.state = 1505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1502
                    self.match(ParaCParser.WS) 
                self.state = 1507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ParaCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__7, ParaCParser.T__8, ParaCParser.Inline, ParaCParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1510
                _la = self._input.LA(1)
                if not(((((_la - 8)) & ~0x3f) == 0 and ((1 << (_la - 8)) & ((1 << (ParaCParser.T__7 - 8)) | (1 << (ParaCParser.T__8 - 8)) | (1 << (ParaCParser.Inline - 8)) | (1 << (ParaCParser.Noreturn - 8)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1511
                self.gccAttributeSpecifier()
                pass
            elif token in [ParaCParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1512
                self.match(ParaCParser.T__9)
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1513
                    self.match(ParaCParser.WS)
                    self.state = 1518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1519
                self.match(ParaCParser.LeftParen)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1520
                    self.match(ParaCParser.WS)
                    self.state = 1525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1526
                self.match(ParaCParser.Identifier)
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1527
                    self.match(ParaCParser.WS)
                    self.state = 1532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1533
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Entry]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1534
                self.entryPointSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alignmentSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.match(ParaCParser.Alignas)
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1538
                self.match(ParaCParser.WS)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1544
            self.match(ParaCParser.LeftParen)
            self.state = 1548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1545
                    self.match(ParaCParser.WS) 
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

            self.state = 1553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1551
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 1552
                self.constantExpression()
                pass


            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1555
                self.match(ParaCParser.WS)
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1561
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 1563
                self.pointer()


            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1566
                self.match(ParaCParser.WS)
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1572
            self.directDeclarator(0)
            self.state = 1576
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1573
                    self.match(ParaCParser.WS) 
                self.state = 1578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

            self.state = 1582
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1579
                    self.gccDeclaratorExtension() 
                self.state = 1584
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1586
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1587
                self.match(ParaCParser.LeftParen)
                self.state = 1591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1588
                        self.match(ParaCParser.WS) 
                    self.state = 1593
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                self.state = 1594
                self.declarator()
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1595
                    self.match(ParaCParser.WS)
                    self.state = 1600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1601
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 1603
                self.match(ParaCParser.Identifier)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1604
                    self.match(ParaCParser.WS)
                    self.state = 1609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1610
                self.match(ParaCParser.Colon)
                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1611
                    self.match(ParaCParser.WS)
                    self.state = 1616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1617
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 1618
                self.match(ParaCParser.LeftParen)
                self.state = 1622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1619
                        self.match(ParaCParser.WS) 
                    self.state = 1624
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 1625
                    self.typeSpecifier(0)


                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1628
                    self.match(ParaCParser.WS)
                    self.state = 1633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1634
                self.pointer()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1635
                    self.match(ParaCParser.WS)
                    self.state = 1640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1641
                self.directDeclarator(0)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1642
                    self.match(ParaCParser.WS)
                    self.state = 1647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1648
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1833
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1652
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1656
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1653
                            self.match(ParaCParser.WS)
                            self.state = 1658
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1659
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1663
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1660
                                self.match(ParaCParser.WS) 
                            self.state = 1665
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

                        self.state = 1667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1666
                            self.typeQualifierList()


                        self.state = 1672
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1669
                                self.match(ParaCParser.WS) 
                            self.state = 1674
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

                        self.state = 1676
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                        if la_ == 1:
                            self.state = 1675
                            self.assignmentExpression()


                        self.state = 1681
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1678
                            self.match(ParaCParser.WS)
                            self.state = 1683
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1684
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1685
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1686
                            self.match(ParaCParser.WS)
                            self.state = 1691
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1692
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1693
                            self.match(ParaCParser.WS)
                            self.state = 1698
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1699
                        self.match(ParaCParser.Static)
                        self.state = 1703
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1700
                                self.match(ParaCParser.WS) 
                            self.state = 1705
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                        self.state = 1707
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1706
                            self.typeQualifierList()


                        self.state = 1712
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1709
                                self.match(ParaCParser.WS) 
                            self.state = 1714
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

                        self.state = 1715
                        self.assignmentExpression()
                        self.state = 1719
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1716
                            self.match(ParaCParser.WS)
                            self.state = 1721
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1722
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1724
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1728
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1725
                            self.match(ParaCParser.WS)
                            self.state = 1730
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1731
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1735
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1732
                            self.match(ParaCParser.WS)
                            self.state = 1737
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1738
                        self.typeQualifierList()
                        self.state = 1742
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1739
                            self.match(ParaCParser.WS)
                            self.state = 1744
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1745
                        self.match(ParaCParser.Static)
                        self.state = 1746
                        self.assignmentExpression()
                        self.state = 1750
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1747
                            self.match(ParaCParser.WS)
                            self.state = 1752
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1753
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1755
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1759
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1756
                            self.match(ParaCParser.WS)
                            self.state = 1761
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1762
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1766
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1763
                                self.match(ParaCParser.WS) 
                            self.state = 1768
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

                        self.state = 1770
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1769
                            self.typeQualifierList()


                        self.state = 1775
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1772
                            self.match(ParaCParser.WS)
                            self.state = 1777
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1778
                        self.match(ParaCParser.Star)
                        self.state = 1782
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1779
                            self.match(ParaCParser.WS)
                            self.state = 1784
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1785
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1786
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1790
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1787
                            self.match(ParaCParser.WS)
                            self.state = 1792
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1793
                        self.match(ParaCParser.LeftParen)
                        self.state = 1797
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1794
                            self.match(ParaCParser.WS)
                            self.state = 1799
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1800
                        self.parameterTypeList()
                        self.state = 1804
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1801
                            self.match(ParaCParser.WS)
                            self.state = 1806
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1807
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1809
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1813
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1810
                            self.match(ParaCParser.WS)
                            self.state = 1815
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1816
                        self.match(ParaCParser.LeftParen)
                        self.state = 1820
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1817
                                self.match(ParaCParser.WS) 
                            self.state = 1822
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

                        self.state = 1824
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 1823
                            self.identifierList()


                        self.state = 1829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1826
                            self.match(ParaCParser.WS)
                            self.state = 1831
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1832
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 1837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = ParaCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 1865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.match(ParaCParser.T__10)
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1839
                    self.match(ParaCParser.WS)
                    self.state = 1844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1845
                self.match(ParaCParser.LeftParen)
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1846
                    self.match(ParaCParser.WS)
                    self.state = 1851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1853 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1852
                    self.match(ParaCParser.StringLiteral)
                    self.state = 1855 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ParaCParser.StringLiteral):
                        break

                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1857
                    self.match(ParaCParser.WS)
                    self.state = 1862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1863
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = ParaCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccAttributeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(ParaCParser.T__11)
            self.state = 1871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1868
                self.match(ParaCParser.WS)
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1874
            self.match(ParaCParser.LeftParen)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1875
                self.match(ParaCParser.WS)
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1881
            self.match(ParaCParser.LeftParen)
            self.state = 1885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1882
                    self.match(ParaCParser.WS) 
                self.state = 1887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

            self.state = 1888
            self.gccAttributeList()
            self.state = 1892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1889
                self.match(ParaCParser.WS)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1895
            self.match(ParaCParser.RightParen)
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1896
                self.match(ParaCParser.WS)
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1902
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccAttributeContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = ParaCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1904
                self.gccAttribute()


            self.state = 1910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1907
                    self.match(ParaCParser.WS) 
                self.state = 1912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1913
                self.match(ParaCParser.Comma)
                self.state = 1917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1914
                        self.match(ParaCParser.WS) 
                    self.state = 1919
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

                self.state = 1921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 1920
                    self.gccAttribute()


                self.state = 1926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1923
                        self.match(ParaCParser.WS) 
                    self.state = 1928
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = ParaCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.RightParen - 69)) | (1 << (ParaCParser.Comma - 69)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftParen:
                self.state = 1935
                self.match(ParaCParser.LeftParen)
                self.state = 1939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1936
                        self.match(ParaCParser.WS) 
                    self.state = 1941
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

                self.state = 1943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 1942
                    self.argumentExpressionList()


                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1945
                    self.match(ParaCParser.WS)
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1951
                self.match(ParaCParser.RightParen)
                self.state = 1955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1952
                        self.match(ParaCParser.WS) 
                    self.state = 1957
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,272,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1977
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__10, ParaCParser.T__11, ParaCParser.T__12, ParaCParser.T__13, ParaCParser.T__14, ParaCParser.T__15, ParaCParser.T__16, ParaCParser.As, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Generic, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.DecoratorSign, ParaCParser.LambdaStartBlock, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.AsmBlock, ParaCParser.Directive, ParaCParser.WS, ParaCParser.Whitespace, ParaCParser.Newline]:
                        self.state = 1960
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 1961
                        self.match(ParaCParser.LeftParen)
                        self.state = 1965
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1962
                                self.match(ParaCParser.WS) 
                            self.state = 1967
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                        self.state = 1968
                        self.nestedParenthesesBlock()
                        self.state = 1972
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1969
                            self.match(ParaCParser.WS)
                            self.state = 1974
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1975
                        self.match(ParaCParser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1982
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1986
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1983
                            self.match(ParaCParser.WS) 
                        self.state = 1988
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

                    self.state = 1990
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                    if la_ == 1:
                        self.state = 1989
                        self.typeQualifierList()


                    self.state = 1995
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1992
                            self.match(ParaCParser.WS) 
                        self.state = 1997
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,280,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 2000 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2002
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2005 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.parameterList()
            self.state = 2011
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2008
                    self.match(ParaCParser.WS) 
                self.state = 2013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

            self.state = 2028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 2014
                self.match(ParaCParser.Comma)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2015
                    self.match(ParaCParser.WS)
                    self.state = 2020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2021
                self.match(ParaCParser.Ellipsis)
                self.state = 2025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2022
                        self.match(ParaCParser.WS) 
                    self.state = 2027
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,285,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.parameterDeclaration()
            self.state = 2034
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2031
                    self.match(ParaCParser.WS) 
                self.state = 2036
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

            self.state = 2053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2037
                    self.match(ParaCParser.Comma)
                    self.state = 2041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 2038
                        self.match(ParaCParser.WS)
                        self.state = 2043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2044
                    self.parameterDeclaration()
                    self.state = 2048
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2045
                            self.match(ParaCParser.WS) 
                        self.state = 2050
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
             
                self.state = 2055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AbstractParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractParameterDeclaration" ):
                listener.enterAbstractParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractParameterDeclaration" ):
                listener.exitAbstractParameterDeclaration(self)


    class RegularParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularParameterDeclaration" ):
                listener.enterRegularParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularParameterDeclaration" ):
                listener.exitRegularParameterDeclaration(self)



    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameterDeclaration)
        try:
            self.state = 2075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.RegularParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2056
                self.declarationSpecifiers()
                self.state = 2060
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2057
                        self.match(ParaCParser.WS) 
                    self.state = 2062
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

                self.state = 2063
                self.declarator()
                pass

            elif la_ == 2:
                localctx = ParaCParser.AbstractParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2065
                self.declarationSpecifiers()
                self.state = 2069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2066
                        self.match(ParaCParser.WS) 
                    self.state = 2071
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

                self.state = 2073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                if la_ == 1:
                    self.state = 2072
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.match(ParaCParser.Identifier)
            self.state = 2081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2078
                    self.match(ParaCParser.WS) 
                self.state = 2083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

            self.state = 2100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 2084
                self.match(ParaCParser.Comma)
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2085
                    self.match(ParaCParser.WS)
                    self.state = 2090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2091
                self.match(ParaCParser.Identifier)
                self.state = 2095
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2092
                        self.match(ParaCParser.WS) 
                    self.state = 2097
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self.specifierQualifierList()
            self.state = 2107
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,299,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2104
                    self.match(ParaCParser.WS) 
                self.state = 2109
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

            self.state = 2111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 2110
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 2114
                    self.pointer()


                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2117
                    self.match(ParaCParser.WS)
                    self.state = 2122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2123
                self.directAbstractDeclarator(0)
                self.state = 2127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2124
                        self.match(ParaCParser.WS) 
                    self.state = 2129
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

                self.state = 2133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2130
                        self.gccDeclaratorExtension() 
                    self.state = 2135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2139
                self.match(ParaCParser.LeftParen)
                self.state = 2143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2140
                        self.match(ParaCParser.WS) 
                    self.state = 2145
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                self.state = 2146
                self.abstractDeclarator()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2147
                    self.match(ParaCParser.WS)
                    self.state = 2152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2153
                self.match(ParaCParser.RightParen)
                self.state = 2157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2154
                        self.match(ParaCParser.WS) 
                    self.state = 2159
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

                self.state = 2163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2160
                        self.gccDeclaratorExtension() 
                    self.state = 2165
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2166
                self.match(ParaCParser.LeftBracket)
                self.state = 2170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2167
                        self.match(ParaCParser.WS) 
                    self.state = 2172
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 2173
                    self.typeQualifierList()


                self.state = 2179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2176
                        self.match(ParaCParser.WS) 
                    self.state = 2181
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

                self.state = 2183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2182
                    self.assignmentExpression()


                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2185
                    self.match(ParaCParser.WS)
                    self.state = 2190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2191
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 2192
                self.match(ParaCParser.LeftBracket)
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2193
                    self.match(ParaCParser.WS)
                    self.state = 2198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2199
                self.match(ParaCParser.Static)
                self.state = 2203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2200
                        self.match(ParaCParser.WS) 
                    self.state = 2205
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 2206
                    self.typeQualifierList()


                self.state = 2212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2209
                        self.match(ParaCParser.WS) 
                    self.state = 2214
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

                self.state = 2215
                self.assignmentExpression()
                self.state = 2219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2216
                    self.match(ParaCParser.WS)
                    self.state = 2221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2222
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 2224
                self.match(ParaCParser.LeftBracket)
                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2225
                    self.match(ParaCParser.WS)
                    self.state = 2230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2231
                self.typeQualifierList()
                self.state = 2235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2232
                    self.match(ParaCParser.WS)
                    self.state = 2237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2238
                self.match(ParaCParser.Static)
                self.state = 2242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2239
                        self.match(ParaCParser.WS) 
                    self.state = 2244
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                self.state = 2245
                self.assignmentExpression()
                self.state = 2249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2246
                    self.match(ParaCParser.WS)
                    self.state = 2251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2252
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 2254
                self.match(ParaCParser.LeftBracket)
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2255
                    self.match(ParaCParser.WS)
                    self.state = 2260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2261
                self.match(ParaCParser.Star)
                self.state = 2265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2262
                    self.match(ParaCParser.WS)
                    self.state = 2267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2268
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 2269
                self.match(ParaCParser.LeftParen)
                self.state = 2273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2270
                        self.match(ParaCParser.WS) 
                    self.state = 2275
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

                self.state = 2277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                    self.state = 2276
                    self.parameterTypeList()


                self.state = 2282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2279
                    self.match(ParaCParser.WS)
                    self.state = 2284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2285
                self.match(ParaCParser.RightParen)
                self.state = 2289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2286
                        self.match(ParaCParser.WS) 
                    self.state = 2291
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

                self.state = 2295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2292
                        self.gccDeclaratorExtension() 
                    self.state = 2297
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2469
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,359,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2467
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 2300
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2301
                            self.match(ParaCParser.WS)
                            self.state = 2306
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2307
                        self.match(ParaCParser.LeftBracket)
                        self.state = 2311
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2308
                                self.match(ParaCParser.WS) 
                            self.state = 2313
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

                        self.state = 2315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 2314
                            self.typeQualifierList()


                        self.state = 2320
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2317
                                self.match(ParaCParser.WS) 
                            self.state = 2322
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

                        self.state = 2324
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                        if la_ == 1:
                            self.state = 2323
                            self.assignmentExpression()


                        self.state = 2329
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2326
                            self.match(ParaCParser.WS)
                            self.state = 2331
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2332
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 2333
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2334
                            self.match(ParaCParser.WS)
                            self.state = 2339
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2340
                        self.match(ParaCParser.LeftBracket)
                        self.state = 2344
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2341
                            self.match(ParaCParser.WS)
                            self.state = 2346
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2347
                        self.match(ParaCParser.Static)
                        self.state = 2351
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2348
                                self.match(ParaCParser.WS) 
                            self.state = 2353
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

                        self.state = 2355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 2354
                            self.typeQualifierList()


                        self.state = 2360
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2357
                                self.match(ParaCParser.WS) 
                            self.state = 2362
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

                        self.state = 2363
                        self.assignmentExpression()
                        self.state = 2367
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2364
                            self.match(ParaCParser.WS)
                            self.state = 2369
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2370
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 2372
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2376
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2373
                            self.match(ParaCParser.WS)
                            self.state = 2378
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2379
                        self.match(ParaCParser.LeftBracket)
                        self.state = 2383
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2380
                            self.match(ParaCParser.WS)
                            self.state = 2385
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2386
                        self.typeQualifierList()
                        self.state = 2390
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2387
                            self.match(ParaCParser.WS)
                            self.state = 2392
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2393
                        self.match(ParaCParser.Static)
                        self.state = 2397
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2394
                                self.match(ParaCParser.WS) 
                            self.state = 2399
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

                        self.state = 2400
                        self.assignmentExpression()
                        self.state = 2404
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2401
                            self.match(ParaCParser.WS)
                            self.state = 2406
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2407
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 2409
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2410
                            self.match(ParaCParser.WS)
                            self.state = 2415
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2416
                        self.match(ParaCParser.LeftBracket)
                        self.state = 2420
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2417
                            self.match(ParaCParser.WS)
                            self.state = 2422
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2423
                        self.match(ParaCParser.Star)
                        self.state = 2427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2424
                            self.match(ParaCParser.WS)
                            self.state = 2429
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2430
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 2431
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2435
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2432
                            self.match(ParaCParser.WS)
                            self.state = 2437
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2438
                        self.match(ParaCParser.LeftParen)
                        self.state = 2442
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2439
                                self.match(ParaCParser.WS) 
                            self.state = 2444
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

                        self.state = 2446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                            self.state = 2445
                            self.parameterTypeList()


                        self.state = 2451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2448
                            self.match(ParaCParser.WS)
                            self.state = 2453
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2454
                        self.match(ParaCParser.RightParen)
                        self.state = 2458
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2455
                                self.match(ParaCParser.WS) 
                            self.state = 2460
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,356,self._ctx)

                        self.state = 2464
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2461
                                self.gccDeclaratorExtension() 
                            self.state = 2466
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

                        pass

             
                self.state = 2471
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2472
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Alignof, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.WS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2474
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2475
                self.match(ParaCParser.LeftBrace)
                self.state = 2479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,360,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2476
                        self.match(ParaCParser.WS) 
                    self.state = 2481
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,360,self._ctx)

                self.state = 2483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2482
                    self.initializerList()


                self.state = 2488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,362,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2485
                        self.match(ParaCParser.WS) 
                    self.state = 2490
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 2491
                    self.match(ParaCParser.Comma)


                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2494
                    self.match(ParaCParser.WS)
                    self.state = 2499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2500
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 2503
                self.designation()


            self.state = 2509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2506
                    self.match(ParaCParser.WS) 
                self.state = 2511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

            self.state = 2512
            self.initializer()
            self.state = 2516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2513
                    self.match(ParaCParser.WS) 
                self.state = 2518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

            self.state = 2544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,373,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2519
                    self.match(ParaCParser.Comma)
                    self.state = 2523
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2520
                            self.match(ParaCParser.WS) 
                        self.state = 2525
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

                    self.state = 2527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 2526
                        self.designation()


                    self.state = 2532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,371,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2529
                            self.match(ParaCParser.WS) 
                        self.state = 2534
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,371,self._ctx)

                    self.state = 2535
                    self.initializer()
                    self.state = 2539
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2536
                            self.match(ParaCParser.WS) 
                        self.state = 2541
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
             
                self.state = 2546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,373,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_designation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            self.designatorList()
            self.state = 2551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2548
                self.match(ParaCParser.WS)
                self.state = 2553
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2554
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2557 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2556
                self.designator()
                self.state = 2559 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_designator)
        self._la = 0 # Token type
        try:
            self.state = 2585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2561
                self.match(ParaCParser.LeftBracket)
                self.state = 2565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2562
                        self.match(ParaCParser.WS) 
                    self.state = 2567
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

                self.state = 2568
                self.constantExpression()
                self.state = 2572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2569
                    self.match(ParaCParser.WS)
                    self.state = 2574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2575
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2577
                self.match(ParaCParser.Dot)
                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2578
                    self.match(ParaCParser.WS)
                    self.state = 2583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2584
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            self.match(ParaCParser.StaticAssert)
            self.state = 2591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2588
                self.match(ParaCParser.WS)
                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2594
            self.match(ParaCParser.LeftParen)
            self.state = 2598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2595
                    self.match(ParaCParser.WS) 
                self.state = 2600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

            self.state = 2601
            self.constantExpression()
            self.state = 2605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2602
                self.match(ParaCParser.WS)
                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2608
            self.match(ParaCParser.Comma)
            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2609
                self.match(ParaCParser.WS)
                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2616 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2615
                self.match(ParaCParser.StringLiteral)
                self.state = 2618 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2620
                self.match(ParaCParser.WS)
                self.state = 2625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2626
            self.match(ParaCParser.RightParen)
            self.state = 2627
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def tryExceptStatement(self):
            return self.getTypedRuleContext(ParaCParser.TryExceptStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 2733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2629
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2630
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2631
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2632
                self.tryExceptStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2633
                self.selectionStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2634
                self.iterationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2635
                self.jumpStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2636
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__10 or _la==ParaCParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2637
                    self.match(ParaCParser.WS)
                    self.state = 2642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2643
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__13 or _la==ParaCParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2644
                    self.match(ParaCParser.WS)
                    self.state = 2649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2650
                self.match(ParaCParser.LeftParen)
                self.state = 2654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2651
                        self.match(ParaCParser.WS) 
                    self.state = 2656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

                self.state = 2683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                if la_ == 1:
                    self.state = 2657
                    self.logicalOrExpression()
                    self.state = 2661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,389,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2658
                            self.match(ParaCParser.WS) 
                        self.state = 2663
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,389,self._ctx)

                    self.state = 2680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 2664
                        self.match(ParaCParser.Comma)
                        self.state = 2668
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2665
                                self.match(ParaCParser.WS) 
                            self.state = 2670
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                        self.state = 2671
                        self.logicalOrExpression()
                        self.state = 2675
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2672
                                self.match(ParaCParser.WS) 
                            self.state = 2677
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

                        self.state = 2682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2685
                        self.match(ParaCParser.WS) 
                    self.state = 2690
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

                self.state = 2722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 2691
                    self.match(ParaCParser.Colon)
                    self.state = 2695
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2692
                            self.match(ParaCParser.WS) 
                        self.state = 2697
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

                    self.state = 2718
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                    if la_ == 1:
                        self.state = 2698
                        self.logicalOrExpression()
                        self.state = 2702
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,396,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2699
                                self.match(ParaCParser.WS) 
                            self.state = 2704
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,396,self._ctx)

                        self.state = 2715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 2705
                            self.match(ParaCParser.Comma)
                            self.state = 2709
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,397,self._ctx)
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt==1:
                                    self.state = 2706
                                    self.match(ParaCParser.WS) 
                                self.state = 2711
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,397,self._ctx)

                            self.state = 2712
                            self.logicalOrExpression()
                            self.state = 2717
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2725
                    self.match(ParaCParser.WS)
                    self.state = 2730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2731
                self.match(ParaCParser.RightParen)
                self.state = 2732
                self.endOfItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.state = 2788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2735
                self.match(ParaCParser.Identifier)
                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2736
                    self.match(ParaCParser.WS)
                    self.state = 2741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2742
                self.match(ParaCParser.Colon)
                self.state = 2746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2743
                        self.match(ParaCParser.WS) 
                    self.state = 2748
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

                self.state = 2749
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2750
                self.match(ParaCParser.Case)
                self.state = 2754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,405,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2751
                        self.match(ParaCParser.WS) 
                    self.state = 2756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,405,self._ctx)

                self.state = 2757
                self.constantExpression()
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2758
                    self.match(ParaCParser.WS)
                    self.state = 2763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2764
                self.match(ParaCParser.Colon)
                self.state = 2768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2765
                        self.match(ParaCParser.WS) 
                    self.state = 2770
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

                self.state = 2771
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2773
                self.match(ParaCParser.Default)
                self.state = 2777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2774
                    self.match(ParaCParser.WS)
                    self.state = 2779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2780
                self.match(ParaCParser.Colon)
                self.state = 2784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2781
                        self.match(ParaCParser.WS) 
                    self.state = 2786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

                self.state = 2787
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.match(ParaCParser.LeftBrace)
            self.state = 2794
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2791
                    self.match(ParaCParser.WS) 
                self.state = 2796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

            self.state = 2798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 2797
                self.blockItemList()


            self.state = 2803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2800
                self.match(ParaCParser.WS)
                self.state = 2805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2806
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_blockItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2808
                    self.blockItem()

                else:
                    raise NoViableAltException(self)
                self.state = 2811 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2813
                    self.match(ParaCParser.WS) 
                self.state = 2818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

            self.state = 2821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 2819
                self.statement()
                pass

            elif la_ == 2:
                self.state = 2820
                self.declaration()
                pass


            self.state = 2826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,417,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2823
                    self.match(ParaCParser.WS) 
                self.state = 2828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.WS - 64)))) != 0):
                self.state = 2829
                self.expression()


            self.state = 2832
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def exceptBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExceptBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExceptBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(ParaCParser.FinallyBlockContext,0)


        def elseBlock(self):
            return self.getTypedRuleContext(ParaCParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_tryExceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExceptStatement" ):
                listener.enterTryExceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExceptStatement" ):
                listener.exitTryExceptStatement(self)




    def tryExceptStatement(self):

        localctx = ParaCParser.TryExceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tryExceptStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2834
            self.match(ParaCParser.T__14)
            self.state = 2838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2835
                self.match(ParaCParser.WS)
                self.state = 2840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2841
            self.compoundStatement()
            self.state = 2845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2842
                self.match(ParaCParser.WS)
                self.state = 2847
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2849 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2848
                self.exceptBlock()
                self.state = 2851 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.T__15):
                    break

            self.state = 2856
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2853
                    self.match(ParaCParser.WS) 
                self.state = 2858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

            self.state = 2891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 2859
                self.finallyBlock()
                self.state = 2863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2860
                        self.match(ParaCParser.WS) 
                    self.state = 2865
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

                self.state = 2867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 2866
                    self.elseBlock()


                self.state = 2872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,425,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2869
                        self.match(ParaCParser.WS) 
                    self.state = 2874
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,425,self._ctx)


            elif la_ == 2:
                self.state = 2875
                self.elseBlock()
                self.state = 2879
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,426,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2876
                        self.match(ParaCParser.WS) 
                    self.state = 2881
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,426,self._ctx)

                self.state = 2883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__16:
                    self.state = 2882
                    self.finallyBlock()


                self.state = 2888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,428,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2885
                        self.match(ParaCParser.WS) 
                    self.state = 2890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,428,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = ParaCParser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exceptBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2893
            self.match(ParaCParser.T__15)
            self.state = 2897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2894
                self.match(ParaCParser.WS)
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2900
            self.match(ParaCParser.LeftParen)
            self.state = 2904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2901
                self.match(ParaCParser.WS)
                self.state = 2906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 2907
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 2908
                self.identifierList()
                pass


            self.state = 2914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2911
                self.match(ParaCParser.WS)
                self.state = 2916
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2917
            self.match(ParaCParser.RightParen)
            self.state = 2921
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2918
                    self.match(ParaCParser.WS) 
                self.state = 2923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.As:
                self.state = 2924
                self.match(ParaCParser.As)
                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2925
                    self.match(ParaCParser.WS)
                    self.state = 2930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2931
                self.match(ParaCParser.Identifier)


            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2934
                self.match(ParaCParser.WS)
                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2940
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = ParaCParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2942
            self.match(ParaCParser.T__16)
            self.state = 2946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2943
                self.match(ParaCParser.WS)
                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2949
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)




    def elseBlock(self):

        localctx = ParaCParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            self.match(ParaCParser.Else)
            self.state = 2955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2952
                self.match(ParaCParser.WS)
                self.state = 2957
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2958
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selectionStatement)
        self._la = 0 # Token type
        try:
            self.state = 3035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2960
                self.match(ParaCParser.If)
                self.state = 2964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2961
                    self.match(ParaCParser.WS)
                    self.state = 2966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2967
                self.match(ParaCParser.LeftParen)
                self.state = 2971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,441,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2968
                        self.match(ParaCParser.WS) 
                    self.state = 2973
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,441,self._ctx)

                self.state = 2974
                self.expression()
                self.state = 2978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2975
                    self.match(ParaCParser.WS)
                    self.state = 2980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2981
                self.match(ParaCParser.RightParen)
                self.state = 2985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,443,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2982
                        self.match(ParaCParser.WS) 
                    self.state = 2987
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,443,self._ctx)

                self.state = 2988
                self.statement()
                self.state = 2992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2989
                        self.match(ParaCParser.WS) 
                    self.state = 2994
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

                self.state = 3003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
                if la_ == 1:
                    self.state = 2995
                    self.match(ParaCParser.Else)
                    self.state = 2999
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,445,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2996
                            self.match(ParaCParser.WS) 
                        self.state = 3001
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,445,self._ctx)

                    self.state = 3002
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3005
                self.match(ParaCParser.Switch)
                self.state = 3009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3006
                    self.match(ParaCParser.WS)
                    self.state = 3011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3012
                self.match(ParaCParser.LeftParen)
                self.state = 3016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,448,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3013
                        self.match(ParaCParser.WS) 
                    self.state = 3018
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,448,self._ctx)

                self.state = 3019
                self.expression()
                self.state = 3023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3020
                    self.match(ParaCParser.WS)
                    self.state = 3025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3026
                self.match(ParaCParser.RightParen)
                self.state = 3030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3027
                        self.match(ParaCParser.WS) 
                    self.state = 3032
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

                self.state = 3033
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 3135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3037
                self.match(ParaCParser.While)
                self.state = 3041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3038
                    self.match(ParaCParser.WS)
                    self.state = 3043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3044
                self.match(ParaCParser.LeftParen)
                self.state = 3048
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,453,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3045
                        self.match(ParaCParser.WS) 
                    self.state = 3050
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,453,self._ctx)

                self.state = 3051
                self.expression()
                self.state = 3055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3052
                    self.match(ParaCParser.WS)
                    self.state = 3057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3058
                self.match(ParaCParser.RightParen)
                self.state = 3062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,455,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3059
                        self.match(ParaCParser.WS) 
                    self.state = 3064
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,455,self._ctx)

                self.state = 3065
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3067
                self.match(ParaCParser.Do)
                self.state = 3071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,456,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3068
                        self.match(ParaCParser.WS) 
                    self.state = 3073
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,456,self._ctx)

                self.state = 3074
                self.statement()
                self.state = 3078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3075
                    self.match(ParaCParser.WS)
                    self.state = 3080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3081
                self.match(ParaCParser.While)
                self.state = 3085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3082
                    self.match(ParaCParser.WS)
                    self.state = 3087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3088
                self.match(ParaCParser.LeftParen)
                self.state = 3092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,459,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3089
                        self.match(ParaCParser.WS) 
                    self.state = 3094
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,459,self._ctx)

                self.state = 3095
                self.expression()
                self.state = 3099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3096
                    self.match(ParaCParser.WS)
                    self.state = 3101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3102
                self.match(ParaCParser.RightParen)
                self.state = 3103
                self.endOfItem()
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3105
                self.match(ParaCParser.For)
                self.state = 3109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3106
                    self.match(ParaCParser.WS)
                    self.state = 3111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3112
                self.match(ParaCParser.LeftParen)
                self.state = 3116
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,462,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3113
                        self.match(ParaCParser.WS) 
                    self.state = 3118
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,462,self._ctx)

                self.state = 3119
                self.forCondition()
                self.state = 3123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3120
                    self.match(ParaCParser.WS)
                    self.state = 3125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3126
                self.match(ParaCParser.RightParen)
                self.state = 3130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,464,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3127
                        self.match(ParaCParser.WS) 
                    self.state = 3132
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

                self.state = 3133
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EndOfItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EndOfItemContext,i)


        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 3137
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 3139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.WS - 64)))) != 0):
                    self.state = 3138
                    self.expression()


                pass


            self.state = 3143
            self.endOfItem()
            self.state = 3145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.WS - 64)))) != 0):
                self.state = 3144
                self.forExpression()


            self.state = 3147
            self.endOfItem()
            self.state = 3149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
            if la_ == 1:
                self.state = 3148
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3151
            self.declarationSpecifiers()
            self.state = 3155
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,470,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3152
                    self.match(ParaCParser.WS) 
                self.state = 3157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,470,self._ctx)

            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ParaCParser.LeftParen - 69)) | (1 << (ParaCParser.Star - 69)) | (1 << (ParaCParser.Caret - 69)) | (1 << (ParaCParser.Identifier - 69)) | (1 << (ParaCParser.WS - 69)))) != 0):
                self.state = 3158
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.assignmentExpression()
            self.state = 3165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3162
                    self.match(ParaCParser.WS) 
                self.state = 3167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 3168
                self.match(ParaCParser.Comma)
                self.state = 3172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,473,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3169
                        self.match(ParaCParser.WS) 
                    self.state = 3174
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,473,self._ctx)

                self.state = 3175
                self.assignmentExpression()
                self.state = 3179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,474,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3176
                        self.match(ParaCParser.WS) 
                    self.state = 3181
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,474,self._ctx)

                self.state = 3186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                self.state = 3187
                self.match(ParaCParser.Goto)
                self.state = 3191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3188
                    self.match(ParaCParser.WS)
                    self.state = 3193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3194
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 3195
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 3196
                self.match(ParaCParser.Return)
                self.state = 3200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,477,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3197
                        self.match(ParaCParser.WS) 
                    self.state = 3202
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,477,self._ctx)

                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.WS - 64)))) != 0):
                    self.state = 3203
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 3206
                self.match(ParaCParser.Goto)
                self.state = 3210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3207
                        self.match(ParaCParser.WS) 
                    self.state = 3212
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

                self.state = 3213
                self.unaryExpression()
                pass


            self.state = 3216
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.LeftParen - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.Caret - 66)) | (1 << (ParaCParser.DecoratorSign - 66)) | (1 << (ParaCParser.Semi - 66)) | (1 << (ParaCParser.Identifier - 66)) | (1 << (ParaCParser.WS - 66)) | (1 << (ParaCParser.Whitespace - 66)))) != 0):
                self.state = 3218
                self.translationUnit()


            self.state = 3221
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalItemContext,i)


        def endOfItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EndOfItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EndOfItemContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3230 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 3223
                    self.externalItem()
                    pass

                elif la_ == 2:
                    self.state = 3224
                    self.endOfItem()
                    pass

                elif la_ == 3:
                    self.state = 3226 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3225
                            self.match(ParaCParser.WS)

                        else:
                            raise NoViableAltException(self)
                        self.state = 3228 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,482,self._ctx)

                    pass


                self.state = 3232 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.LeftParen - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.Caret - 66)) | (1 << (ParaCParser.DecoratorSign - 66)) | (1 << (ParaCParser.Semi - 66)) | (1 << (ParaCParser.Identifier - 66)) | (1 << (ParaCParser.WS - 66)) | (1 << (ParaCParser.Whitespace - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_externalItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalFunctionDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunctionDefinition" ):
                listener.enterExternalFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunctionDefinition" ):
                listener.exitExternalFunctionDefinition(self)


    class ExternalDeclarationContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)


    class ExternalExtTaskDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionTaskDefinition(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalExtTaskDefinition" ):
                listener.enterExternalExtTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalExtTaskDefinition" ):
                listener.exitExternalExtTaskDefinition(self)



    def externalItem(self):

        localctx = ParaCParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalItem)
        try:
            self.state = 3237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.ExternalFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3234
                self.functionDefinition()
                pass

            elif la_ == 2:
                localctx = ParaCParser.ExternalDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3235
                self.declaration()
                pass

            elif la_ == 3:
                localctx = ParaCParser.ExternalExtTaskDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3236
                self.extensionTaskDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StandardFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFunctionDefinition" ):
                listener.enterStandardFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFunctionDefinition" ):
                listener.exitStandardFunctionDefinition(self)


    class SimpleFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionDefinition" ):
                listener.enterSimpleFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionDefinition" ):
                listener.exitSimpleFunctionDefinition(self)



    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 3290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.StandardFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3239
                self.functionDeclarationSpecifiers()
                self.state = 3243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,486,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3240
                        self.match(ParaCParser.WS) 
                    self.state = 3245
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,486,self._ctx)

                self.state = 3246
                self.declarator()
                self.state = 3250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3247
                        self.match(ParaCParser.WS) 
                    self.state = 3252
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

                self.state = 3254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                    self.state = 3253
                    self.declarationList()


                self.state = 3259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3256
                    self.match(ParaCParser.WS)
                    self.state = 3261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3262
                self.compoundStatement()
                pass

            elif la_ == 2:
                localctx = ParaCParser.SimpleFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3264
                self.functionDeclarationSpecifiers()
                self.state = 3268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,490,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3265
                        self.match(ParaCParser.WS) 
                    self.state = 3270
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,490,self._ctx)

                self.state = 3271
                self.declarator()
                self.state = 3275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,491,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3272
                        self.match(ParaCParser.WS) 
                    self.state = 3277
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,491,self._ctx)

                self.state = 3279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                    self.state = 3278
                    self.declarationList()


                self.state = 3284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3281
                    self.match(ParaCParser.WS)
                    self.state = 3286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3287
                self.expressionLambda()
                self.state = 3288
                self.endOfItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decoratorSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DecoratorSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DecoratorSpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationSpecifiers" ):
                listener.enterFunctionDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationSpecifiers" ):
                listener.exitFunctionDeclarationSpecifiers(self)




    def functionDeclarationSpecifiers(self):

        localctx = ParaCParser.FunctionDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_functionDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.DecoratorSign:
                self.state = 3292
                self.decoratorSpecifier()
                self.state = 3297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,496,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3298
                    self.match(ParaCParser.WS) 
                self.state = 3303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,496,self._ctx)

            self.state = 3305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.state = 3304
                self.declarationSpecifiers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecoratorSign(self):
            return self.getToken(ParaCParser.DecoratorSign, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_decoratorSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorSpecifier" ):
                listener.enterDecoratorSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorSpecifier" ):
                listener.exitDecoratorSpecifier(self)




    def decoratorSpecifier(self):

        localctx = ParaCParser.DecoratorSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_decoratorSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            self.match(ParaCParser.DecoratorSign)
            self.state = 3308
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExtensionTask(self):
            return self.getToken(ParaCParser.ExtensionTask, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def extensionTaskParameterList(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskDefinition" ):
                listener.enterExtensionTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskDefinition" ):
                listener.exitExtensionTaskDefinition(self)




    def extensionTaskDefinition(self):

        localctx = ParaCParser.ExtensionTaskDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionTaskDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3310
            self.match(ParaCParser.ExtensionTask)
            self.state = 3314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 3311
                self.match(ParaCParser.WS)
                self.state = 3316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3317
            self.match(ParaCParser.Identifier)
            self.state = 3321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 3318
                self.match(ParaCParser.WS)
                self.state = 3323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3324
            self.directDeclarator(0)
            self.state = 3328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,500,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3325
                    self.match(ParaCParser.WS) 
                self.state = 3330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,500,self._ctx)

            self.state = 3332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0):
                self.state = 3331
                self.declarationList()


            self.state = 3337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 3334
                self.match(ParaCParser.WS)
                self.state = 3339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3340
            self.extensionTaskParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def extensionTaskParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExtensionTaskParameterContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameterList" ):
                listener.enterExtensionTaskParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameterList" ):
                listener.exitExtensionTaskParameterList(self)




    def extensionTaskParameterList(self):

        localctx = ParaCParser.ExtensionTaskParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_extensionTaskParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self.match(ParaCParser.LeftBrace)
            self.state = 3346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 3343
                self.match(ParaCParser.WS)
                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Identifier:
                self.state = 3349
                self.extensionTaskParameter()
                self.state = 3353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 3350
                    self.match(ParaCParser.WS)
                    self.state = 3355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Comma:
                    self.state = 3356
                    self.match(ParaCParser.Comma)
                    self.state = 3360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 3357
                        self.match(ParaCParser.WS)
                        self.state = 3362
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3363
                    self.extensionTaskParameter()
                    self.state = 3367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 3364
                        self.match(ParaCParser.WS)
                        self.state = 3369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3377
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameter" ):
                listener.enterExtensionTaskParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameter" ):
                listener.exitExtensionTaskParameter(self)




    def extensionTaskParameter(self):

        localctx = ParaCParser.ExtensionTaskParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_extensionTaskParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3379
            self.match(ParaCParser.Identifier)
            self.state = 3383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 3380
                self.match(ParaCParser.WS)
                self.state = 3385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3386
            self.match(ParaCParser.Colon)
            self.state = 3390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,510,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3387
                    self.match(ParaCParser.WS) 
                self.state = 3392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,510,self._ctx)

            self.state = 3393
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3402 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3395
                self.declaration()
                self.state = 3399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,511,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3396
                        self.match(ParaCParser.WS) 
                    self.state = 3401
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,511,self._ctx)

                self.state = 3404 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Noreturn - 66)) | (1 << (ParaCParser.StaticAssert - 66)) | (1 << (ParaCParser.ThreadLocal - 66)) | (1 << (ParaCParser.Identifier - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Whitespace(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Whitespace)
            else:
                return self.getToken(ParaCParser.Whitespace, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_endOfItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfItem" ):
                listener.enterEndOfItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfItem" ):
                listener.exitEndOfItem(self)




    def endOfItem(self):

        localctx = ParaCParser.EndOfItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_endOfItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Whitespace:
                self.state = 3406
                self.match(ParaCParser.Whitespace)
                self.state = 3411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3412
            self.match(ParaCParser.Semi)
            self.state = 3416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,514,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3413
                    self.match(ParaCParser.Whitespace) 
                self.state = 3418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,514,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.castOrConvertExpression_sempred
        self._predicates[35] = self.typeSpecifier_sempred
        self._predicates[52] = self.directDeclarator_sempred
        self._predicates[66] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def castOrConvertExpression_sempred(self, localctx:CastOrConvertExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




