# Generated from ./grammar/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3p")
        buf.write("\u0b7d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\3\2\3\2\3\2\7\2\u00c2\n\2\f\2\16\2\u00c5\13\2\3\2")
        buf.write("\3\2\3\2\6\2\u00ca\n\2\r\2\16\2\u00cb\3\2\3\2\3\2\3\2")
        buf.write("\3\2\5\2\u00d3\n\2\3\3\3\3\7\3\u00d7\n\3\f\3\16\3\u00da")
        buf.write("\13\3\3\3\5\3\u00dd\n\3\3\3\7\3\u00e0\n\3\f\3\16\3\u00e3")
        buf.write("\13\3\3\3\3\3\7\3\u00e7\n\3\f\3\16\3\u00ea\13\3\3\3\3")
        buf.write("\3\3\4\3\4\5\4\u00f0\n\4\3\5\3\5\7\5\u00f4\n\5\f\5\16")
        buf.write("\5\u00f7\13\5\3\5\3\5\3\6\3\6\7\6\u00fd\n\6\f\6\16\6\u0100")
        buf.write("\13\6\3\6\3\6\3\7\3\7\3\7\7\7\u0107\n\7\f\7\16\7\u010a")
        buf.write("\13\7\3\7\3\7\7\7\u010e\n\7\f\7\16\7\u0111\13\7\3\7\3")
        buf.write("\7\7\7\u0115\n\7\f\7\16\7\u0118\13\7\3\7\3\7\7\7\u011c")
        buf.write("\n\7\f\7\16\7\u011f\13\7\3\7\3\7\7\7\u0123\n\7\f\7\16")
        buf.write("\7\u0126\13\7\3\7\5\7\u0129\n\7\3\7\7\7\u012c\n\7\f\7")
        buf.write("\16\7\u012f\13\7\3\7\3\7\5\7\u0133\n\7\3\7\7\7\u0136\n")
        buf.write("\7\f\7\16\7\u0139\13\7\3\7\3\7\7\7\u013d\n\7\f\7\16\7")
        buf.write("\u0140\13\7\3\7\3\7\7\7\u0144\n\7\f\7\16\7\u0147\13\7")
        buf.write("\3\7\3\7\3\7\3\7\7\7\u014d\n\7\f\7\16\7\u0150\13\7\3\7")
        buf.write("\5\7\u0153\n\7\3\7\7\7\u0156\n\7\f\7\16\7\u0159\13\7\3")
        buf.write("\7\3\7\3\7\7\7\u015e\n\7\f\7\16\7\u0161\13\7\3\7\3\7\7")
        buf.write("\7\u0165\n\7\f\7\16\7\u0168\13\7\3\b\3\b\7\b\u016c\n\b")
        buf.write("\f\b\16\b\u016f\13\b\3\b\3\b\7\b\u0173\n\b\f\b\16\b\u0176")
        buf.write("\13\b\3\b\3\b\7\b\u017a\n\b\f\b\16\b\u017d\13\b\7\b\u017f")
        buf.write("\n\b\f\b\16\b\u0182\13\b\3\t\7\t\u0185\n\t\f\t\16\t\u0188")
        buf.write("\13\t\3\t\7\t\u018b\n\t\f\t\16\t\u018e\13\t\3\t\3\t\3")
        buf.write("\t\7\t\u0193\n\t\f\t\16\t\u0196\13\t\3\t\3\t\3\t\3\t\7")
        buf.write("\t\u019c\n\t\f\t\16\t\u019f\13\t\3\t\3\t\7\t\u01a3\n\t")
        buf.write("\f\t\16\t\u01a6\13\t\3\t\3\t\7\t\u01aa\n\t\f\t\16\t\u01ad")
        buf.write("\13\t\3\t\3\t\3\t\3\t\7\t\u01b3\n\t\f\t\16\t\u01b6\13")
        buf.write("\t\3\t\5\t\u01b9\n\t\3\n\3\n\3\13\3\13\3\13\7\13\u01c0")
        buf.write("\n\13\f\13\16\13\u01c3\13\13\3\13\3\13\7\13\u01c7\n\13")
        buf.write("\f\13\16\13\u01ca\13\13\3\13\3\13\7\13\u01ce\n\13\f\13")
        buf.write("\16\13\u01d1\13\13\3\13\3\13\3\13\3\13\5\13\u01d7\n\13")
        buf.write("\3\13\3\13\7\13\u01db\n\13\f\13\16\13\u01de\13\13\3\13")
        buf.write("\3\13\7\13\u01e2\n\13\f\13\16\13\u01e5\13\13\3\13\7\13")
        buf.write("\u01e8\n\13\f\13\16\13\u01eb\13\13\3\f\3\f\7\f\u01ef\n")
        buf.write("\f\f\f\16\f\u01f2\13\f\3\f\3\f\7\f\u01f6\n\f\f\f\16\f")
        buf.write("\u01f9\13\f\3\f\3\f\7\f\u01fd\n\f\f\f\16\f\u0200\13\f")
        buf.write("\7\f\u0202\n\f\f\f\16\f\u0205\13\f\3\r\3\r\7\r\u0209\n")
        buf.write("\r\f\r\16\r\u020c\13\r\3\r\3\r\7\r\u0210\n\r\f\r\16\r")
        buf.write("\u0213\13\r\3\r\3\r\7\r\u0217\n\r\f\r\16\r\u021a\13\r")
        buf.write("\7\r\u021c\n\r\f\r\16\r\u021f\13\r\3\16\3\16\7\16\u0223")
        buf.write("\n\16\f\16\16\16\u0226\13\16\3\16\3\16\7\16\u022a\n\16")
        buf.write("\f\16\16\16\u022d\13\16\3\16\3\16\7\16\u0231\n\16\f\16")
        buf.write("\16\16\u0234\13\16\7\16\u0236\n\16\f\16\16\16\u0239\13")
        buf.write("\16\3\17\3\17\7\17\u023d\n\17\f\17\16\17\u0240\13\17\3")
        buf.write("\17\3\17\7\17\u0244\n\17\f\17\16\17\u0247\13\17\3\17\3")
        buf.write("\17\7\17\u024b\n\17\f\17\16\17\u024e\13\17\7\17\u0250")
        buf.write("\n\17\f\17\16\17\u0253\13\17\3\20\3\20\7\20\u0257\n\20")
        buf.write("\f\20\16\20\u025a\13\20\3\20\3\20\7\20\u025e\n\20\f\20")
        buf.write("\16\20\u0261\13\20\3\20\3\20\7\20\u0265\n\20\f\20\16\20")
        buf.write("\u0268\13\20\7\20\u026a\n\20\f\20\16\20\u026d\13\20\3")
        buf.write("\21\3\21\7\21\u0271\n\21\f\21\16\21\u0274\13\21\3\21\3")
        buf.write("\21\7\21\u0278\n\21\f\21\16\21\u027b\13\21\3\21\3\21\7")
        buf.write("\21\u027f\n\21\f\21\16\21\u0282\13\21\7\21\u0284\n\21")
        buf.write("\f\21\16\21\u0287\13\21\3\22\3\22\7\22\u028b\n\22\f\22")
        buf.write("\16\22\u028e\13\22\3\22\3\22\7\22\u0292\n\22\f\22\16\22")
        buf.write("\u0295\13\22\3\22\3\22\7\22\u0299\n\22\f\22\16\22\u029c")
        buf.write("\13\22\7\22\u029e\n\22\f\22\16\22\u02a1\13\22\3\23\3\23")
        buf.write("\7\23\u02a5\n\23\f\23\16\23\u02a8\13\23\3\23\3\23\7\23")
        buf.write("\u02ac\n\23\f\23\16\23\u02af\13\23\3\23\3\23\7\23\u02b3")
        buf.write("\n\23\f\23\16\23\u02b6\13\23\7\23\u02b8\n\23\f\23\16\23")
        buf.write("\u02bb\13\23\3\24\3\24\7\24\u02bf\n\24\f\24\16\24\u02c2")
        buf.write("\13\24\3\24\3\24\7\24\u02c6\n\24\f\24\16\24\u02c9\13\24")
        buf.write("\3\24\3\24\7\24\u02cd\n\24\f\24\16\24\u02d0\13\24\7\24")
        buf.write("\u02d2\n\24\f\24\16\24\u02d5\13\24\3\25\3\25\7\25\u02d9")
        buf.write("\n\25\f\25\16\25\u02dc\13\25\3\25\3\25\7\25\u02e0\n\25")
        buf.write("\f\25\16\25\u02e3\13\25\3\25\3\25\7\25\u02e7\n\25\f\25")
        buf.write("\16\25\u02ea\13\25\7\25\u02ec\n\25\f\25\16\25\u02ef\13")
        buf.write("\25\3\26\3\26\7\26\u02f3\n\26\f\26\16\26\u02f6\13\26\3")
        buf.write("\26\3\26\7\26\u02fa\n\26\f\26\16\26\u02fd\13\26\3\26\3")
        buf.write("\26\7\26\u0301\n\26\f\26\16\26\u0304\13\26\3\26\3\26\7")
        buf.write("\26\u0308\n\26\f\26\16\26\u030b\13\26\3\26\3\26\7\26\u030f")
        buf.write("\n\26\f\26\16\26\u0312\13\26\5\26\u0314\n\26\3\27\3\27")
        buf.write("\3\27\7\27\u0319\n\27\f\27\16\27\u031c\13\27\3\27\3\27")
        buf.write("\7\27\u0320\n\27\f\27\16\27\u0323\13\27\3\27\3\27\3\27")
        buf.write("\5\27\u0328\n\27\3\30\3\30\3\31\3\31\7\31\u032e\n\31\f")
        buf.write("\31\16\31\u0331\13\31\3\31\3\31\7\31\u0335\n\31\f\31\16")
        buf.write("\31\u0338\13\31\3\31\3\31\7\31\u033c\n\31\f\31\16\31\u033f")
        buf.write("\13\31\7\31\u0341\n\31\f\31\16\31\u0344\13\31\3\32\3\32")
        buf.write("\3\33\3\33\7\33\u034a\n\33\f\33\16\33\u034d\13\33\3\33")
        buf.write("\5\33\u0350\n\33\3\33\3\33\3\33\5\33\u0355\n\33\3\34\3")
        buf.write("\34\7\34\u0359\n\34\f\34\16\34\u035c\13\34\6\34\u035e")
        buf.write("\n\34\r\34\16\34\u035f\3\35\3\35\3\35\3\35\3\35\5\35\u0367")
        buf.write("\n\35\3\36\3\36\7\36\u036b\n\36\f\36\16\36\u036e\13\36")
        buf.write("\3\36\3\36\7\36\u0372\n\36\f\36\16\36\u0375\13\36\3\36")
        buf.write("\3\36\7\36\u0379\n\36\f\36\16\36\u037c\13\36\7\36\u037e")
        buf.write("\n\36\f\36\16\36\u0381\13\36\3\37\3\37\7\37\u0385\n\37")
        buf.write("\f\37\16\37\u0388\13\37\3\37\3\37\7\37\u038c\n\37\f\37")
        buf.write("\16\37\u038f\13\37\3\37\3\37\7\37\u0393\n\37\f\37\16\37")
        buf.write("\u0396\13\37\5\37\u0398\n\37\3 \3 \3!\3!\7!\u039e\n!\f")
        buf.write("!\16!\u03a1\13!\3!\5!\u03a4\n!\3!\7!\u03a7\n!\f!\16!\u03aa")
        buf.write("\13!\3!\5!\u03ad\n!\3!\7!\u03b0\n!\f!\16!\u03b3\13!\3")
        buf.write("!\3!\3!\7!\u03b8\n!\f!\16!\u03bb\13!\3!\3!\7!\u03bf\n")
        buf.write("!\f!\16!\u03c2\13!\3!\5!\u03c5\n!\3!\7!\u03c8\n!\f!\16")
        buf.write("!\u03cb\13!\3!\3!\7!\u03cf\n!\f!\16!\u03d2\13!\3!\3!\3")
        buf.write("!\3!\7!\u03d8\n!\f!\16!\u03db\13!\3!\3!\7!\u03df\n!\f")
        buf.write("!\16!\u03e2\13!\3!\3!\3!\7!\u03e7\n!\f!\16!\u03ea\13!")
        buf.write("\3!\3!\3!\3!\7!\u03f0\n!\f!\16!\u03f3\13!\3!\5!\u03f6")
        buf.write("\n!\3!\7!\u03f9\n!\f!\16!\u03fc\13!\3!\3!\7!\u0400\n!")
        buf.write("\f!\16!\u0403\13!\3!\5!\u0406\n!\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u0414\n\"\f\"\16\"\u0417")
        buf.write("\13\"\3\"\3\"\7\"\u041b\n\"\f\"\16\"\u041e\13\"\3\"\3")
        buf.write("\"\7\"\u0422\n\"\f\"\16\"\u0425\13\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\5\"\u042c\n\"\3\"\7\"\u042f\n\"\f\"\16\"\u0432\13\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u043a\n\"\f\"\16\"\u043d")
        buf.write("\13\"\3\"\3\"\7\"\u0441\n\"\f\"\16\"\u0444\13\"\3\"\3")
        buf.write("\"\7\"\u0448\n\"\f\"\16\"\u044b\13\"\3\"\3\"\5\"\u044f")
        buf.write("\n\"\3\"\3\"\7\"\u0453\n\"\f\"\16\"\u0456\13\"\3\"\7\"")
        buf.write("\u0459\n\"\f\"\16\"\u045c\13\"\3#\3#\7#\u0460\n#\f#\16")
        buf.write("#\u0463\13#\3#\3#\7#\u0467\n#\f#\16#\u046a\13#\5#\u046c")
        buf.write("\n#\3#\3#\7#\u0470\n#\f#\16#\u0473\13#\3#\7#\u0476\n#")
        buf.write("\f#\16#\u0479\13#\3#\7#\u047c\n#\f#\16#\u047f\13#\3#\3")
        buf.write("#\3#\3#\7#\u0485\n#\f#\16#\u0488\13#\3#\3#\5#\u048c\n")
        buf.write("#\3$\3$\3%\7%\u0491\n%\f%\16%\u0494\13%\3%\3%\7%\u0498")
        buf.write("\n%\f%\16%\u049b\13%\6%\u049d\n%\r%\16%\u049e\3&\3&\7")
        buf.write("&\u04a3\n&\f&\16&\u04a6\13&\3&\5&\u04a9\n&\3&\3&\3&\5")
        buf.write("&\u04ae\n&\3\'\3\'\5\'\u04b2\n\'\3\'\7\'\u04b5\n\'\f\'")
        buf.write("\16\'\u04b8\13\'\3\'\5\'\u04bb\n\'\3(\3(\7(\u04bf\n(\f")
        buf.write("(\16(\u04c2\13(\3(\3(\7(\u04c6\n(\f(\16(\u04c9\13(\3(")
        buf.write("\7(\u04cc\n(\f(\16(\u04cf\13(\3)\3)\5)\u04d3\n)\3)\7)")
        buf.write("\u04d6\n)\f)\16)\u04d9\13)\3)\3)\7)\u04dd\n)\f)\16)\u04e0")
        buf.write("\13)\3)\5)\u04e3\n)\3*\3*\7*\u04e7\n*\f*\16*\u04ea\13")
        buf.write("*\3*\5*\u04ed\n*\3*\7*\u04f0\n*\f*\16*\u04f3\13*\3*\3")
        buf.write("*\7*\u04f7\n*\f*\16*\u04fa\13*\3*\3*\7*\u04fe\n*\f*\16")
        buf.write("*\u0501\13*\3*\5*\u0504\n*\3*\7*\u0507\n*\f*\16*\u050a")
        buf.write("\13*\3*\3*\3*\3*\7*\u0510\n*\f*\16*\u0513\13*\3*\5*\u0516")
        buf.write("\n*\3+\3+\7+\u051a\n+\f+\16+\u051d\13+\3+\3+\7+\u0521")
        buf.write("\n+\f+\16+\u0524\13+\3+\3+\7+\u0528\n+\f+\16+\u052b\13")
        buf.write("+\7+\u052d\n+\f+\16+\u0530\13+\3,\3,\7,\u0534\n,\f,\16")
        buf.write(",\u0537\13,\3,\3,\7,\u053b\n,\f,\16,\u053e\13,\3,\3,\7")
        buf.write(",\u0542\n,\f,\16,\u0545\13,\5,\u0547\n,\3-\3-\3.\3.\7")
        buf.write(".\u054d\n.\f.\16.\u0550\13.\3.\3.\7.\u0554\n.\f.\16.\u0557")
        buf.write("\13.\3.\3.\7.\u055b\n.\f.\16.\u055e\13.\3.\3.\7.\u0562")
        buf.write("\n.\f.\16.\u0565\13.\3/\3/\3\60\3\60\3\61\3\61\7\61\u056d")
        buf.write("\n\61\f\61\16\61\u0570\13\61\3\61\3\61\7\61\u0574\n\61")
        buf.write("\f\61\16\61\u0577\13\61\3\61\3\61\5\61\u057b\n\61\3\61")
        buf.write("\7\61\u057e\n\61\f\61\16\61\u0581\13\61\3\61\3\61\3\62")
        buf.write("\5\62\u0586\n\62\3\62\7\62\u0589\n\62\f\62\16\62\u058c")
        buf.write("\13\62\3\62\3\62\3\63\3\63\3\63\3\63\7\63\u0594\n\63\f")
        buf.write("\63\16\63\u0597\13\63\3\63\3\63\7\63\u059b\n\63\f\63\16")
        buf.write("\63\u059e\13\63\3\63\3\63\3\63\3\63\7\63\u05a4\n\63\f")
        buf.write("\63\16\63\u05a7\13\63\3\63\3\63\7\63\u05ab\n\63\f\63\16")
        buf.write("\63\u05ae\13\63\3\63\3\63\3\63\7\63\u05b3\n\63\f\63\16")
        buf.write("\63\u05b6\13\63\3\63\5\63\u05b9\n\63\3\63\7\63\u05bc\n")
        buf.write("\63\f\63\16\63\u05bf\13\63\3\63\3\63\7\63\u05c3\n\63\f")
        buf.write("\63\16\63\u05c6\13\63\3\63\3\63\7\63\u05ca\n\63\f\63\16")
        buf.write("\63\u05cd\13\63\3\63\3\63\5\63\u05d1\n\63\3\63\3\63\7")
        buf.write("\63\u05d5\n\63\f\63\16\63\u05d8\13\63\3\63\3\63\7\63\u05dc")
        buf.write("\n\63\f\63\16\63\u05df\13\63\3\63\3\63\7\63\u05e3\n\63")
        buf.write("\f\63\16\63\u05e6\13\63\3\63\3\63\3\63\3\63\7\63\u05ec")
        buf.write("\n\63\f\63\16\63\u05ef\13\63\3\63\3\63\7\63\u05f3\n\63")
        buf.write("\f\63\16\63\u05f6\13\63\3\63\5\63\u05f9\n\63\3\63\7\63")
        buf.write("\u05fc\n\63\f\63\16\63\u05ff\13\63\3\63\7\63\u0602\n\63")
        buf.write("\f\63\16\63\u0605\13\63\3\64\3\64\3\64\7\64\u060a\n\64")
        buf.write("\f\64\16\64\u060d\13\64\3\64\3\64\7\64\u0611\n\64\f\64")
        buf.write("\16\64\u0614\13\64\3\64\3\64\7\64\u0618\n\64\f\64\16\64")
        buf.write("\u061b\13\64\3\65\3\65\7\65\u061f\n\65\f\65\16\65\u0622")
        buf.write("\13\65\3\65\5\65\u0625\n\65\3\65\7\65\u0628\n\65\f\65")
        buf.write("\16\65\u062b\13\65\6\65\u062d\n\65\r\65\16\65\u062e\3")
        buf.write("\66\6\66\u0632\n\66\r\66\16\66\u0633\3\67\3\67\7\67\u0638")
        buf.write("\n\67\f\67\16\67\u063b\13\67\3\67\3\67\7\67\u063f\n\67")
        buf.write("\f\67\16\67\u0642\13\67\3\67\3\67\7\67\u0646\n\67\f\67")
        buf.write("\16\67\u0649\13\67\5\67\u064b\n\67\38\38\78\u064f\n8\f")
        buf.write("8\168\u0652\138\38\38\78\u0656\n8\f8\168\u0659\138\38")
        buf.write("\38\78\u065d\n8\f8\168\u0660\138\78\u0662\n8\f8\168\u0665")
        buf.write("\138\39\39\79\u0669\n9\f9\169\u066c\139\39\39\39\39\7")
        buf.write("9\u0672\n9\f9\169\u0675\139\39\59\u0678\n9\59\u067a\n")
        buf.write("9\3:\3:\7:\u067e\n:\f:\16:\u0681\13:\3:\3:\7:\u0685\n")
        buf.write(":\f:\16:\u0688\13:\3:\3:\7:\u068c\n:\f:\16:\u068f\13:")
        buf.write("\7:\u0691\n:\f:\16:\u0694\13:\3;\3;\7;\u0698\n;\f;\16")
        buf.write(";\u069b\13;\3;\5;\u069e\n;\3<\3<\5<\u06a2\n<\3<\7<\u06a5")
        buf.write("\n<\f<\16<\u06a8\13<\3<\5<\u06ab\n<\3=\3=\3=\7=\u06b0")
        buf.write("\n=\f=\16=\u06b3\13=\3=\3=\7=\u06b7\n=\f=\16=\u06ba\13")
        buf.write("=\3=\3=\3=\3=\7=\u06c0\n=\f=\16=\u06c3\13=\3=\5=\u06c6")
        buf.write("\n=\3=\7=\u06c9\n=\f=\16=\u06cc\13=\3=\5=\u06cf\n=\3=")
        buf.write("\7=\u06d2\n=\f=\16=\u06d5\13=\3=\3=\3=\7=\u06da\n=\f=")
        buf.write("\16=\u06dd\13=\3=\3=\7=\u06e1\n=\f=\16=\u06e4\13=\3=\5")
        buf.write("=\u06e7\n=\3=\7=\u06ea\n=\f=\16=\u06ed\13=\3=\3=\7=\u06f1")
        buf.write("\n=\f=\16=\u06f4\13=\3=\3=\3=\3=\7=\u06fa\n=\f=\16=\u06fd")
        buf.write("\13=\3=\3=\7=\u0701\n=\f=\16=\u0704\13=\3=\3=\7=\u0708")
        buf.write("\n=\f=\16=\u070b\13=\3=\3=\7=\u070f\n=\f=\16=\u0712\13")
        buf.write("=\3=\3=\3=\3=\7=\u0718\n=\f=\16=\u071b\13=\3=\3=\7=\u071f")
        buf.write("\n=\f=\16=\u0722\13=\3=\3=\3=\7=\u0727\n=\f=\16=\u072a")
        buf.write("\13=\3=\5=\u072d\n=\3=\7=\u0730\n=\f=\16=\u0733\13=\3")
        buf.write("=\5=\u0736\n=\3=\3=\7=\u073a\n=\f=\16=\u073d\13=\3=\3")
        buf.write("=\7=\u0741\n=\f=\16=\u0744\13=\3=\5=\u0747\n=\3=\7=\u074a")
        buf.write("\n=\f=\16=\u074d\13=\3=\5=\u0750\n=\3=\7=\u0753\n=\f=")
        buf.write("\16=\u0756\13=\3=\3=\3=\7=\u075b\n=\f=\16=\u075e\13=\3")
        buf.write("=\3=\7=\u0762\n=\f=\16=\u0765\13=\3=\3=\7=\u0769\n=\f")
        buf.write("=\16=\u076c\13=\3=\5=\u076f\n=\3=\7=\u0772\n=\f=\16=\u0775")
        buf.write("\13=\3=\3=\7=\u0779\n=\f=\16=\u077c\13=\3=\3=\3=\3=\7")
        buf.write("=\u0782\n=\f=\16=\u0785\13=\3=\3=\7=\u0789\n=\f=\16=\u078c")
        buf.write("\13=\3=\3=\7=\u0790\n=\f=\16=\u0793\13=\3=\3=\7=\u0797")
        buf.write("\n=\f=\16=\u079a\13=\3=\3=\7=\u079e\n=\f=\16=\u07a1\13")
        buf.write("=\3=\3=\3=\3=\7=\u07a7\n=\f=\16=\u07aa\13=\3=\3=\7=\u07ae")
        buf.write("\n=\f=\16=\u07b1\13=\3=\3=\7=\u07b5\n=\f=\16=\u07b8\13")
        buf.write("=\3=\3=\3=\7=\u07bd\n=\f=\16=\u07c0\13=\3=\3=\7=\u07c4")
        buf.write("\n=\f=\16=\u07c7\13=\3=\5=\u07ca\n=\3=\7=\u07cd\n=\f=")
        buf.write("\16=\u07d0\13=\3=\7=\u07d3\n=\f=\16=\u07d6\13=\3>\3>\3")
        buf.write("?\3?\3?\7?\u07dd\n?\f?\16?\u07e0\13?\3?\5?\u07e3\n?\3")
        buf.write("?\7?\u07e6\n?\f?\16?\u07e9\13?\3?\5?\u07ec\n?\3?\7?\u07ef")
        buf.write("\n?\f?\16?\u07f2\13?\3?\5?\u07f5\n?\3@\5@\u07f8\n@\3@")
        buf.write("\7@\u07fb\n@\f@\16@\u07fe\13@\3@\3@\7@\u0802\n@\f@\16")
        buf.write("@\u0805\13@\3@\3@\7@\u0809\n@\f@\16@\u080c\13@\3@\5@\u080f")
        buf.write("\n@\3@\7@\u0812\n@\f@\16@\u0815\13@\3@\3@\7@\u0819\n@")
        buf.write("\f@\16@\u081c\13@\7@\u081e\n@\f@\16@\u0821\13@\3A\3A\7")
        buf.write("A\u0825\nA\fA\16A\u0828\13A\3A\3A\3B\6B\u082d\nB\rB\16")
        buf.write("B\u082e\3C\3C\7C\u0833\nC\fC\16C\u0836\13C\3C\3C\7C\u083a")
        buf.write("\nC\fC\16C\u083d\13C\3C\3C\3C\3C\7C\u0843\nC\fC\16C\u0846")
        buf.write("\13C\3C\5C\u0849\nC\3D\3D\7D\u084d\nD\fD\16D\u0850\13")
        buf.write("D\3D\3D\7D\u0854\nD\fD\16D\u0857\13D\3D\3D\7D\u085b\n")
        buf.write("D\fD\16D\u085e\13D\3D\3D\7D\u0862\nD\fD\16D\u0865\13D")
        buf.write("\3D\6D\u0868\nD\rD\16D\u0869\3D\7D\u086d\nD\fD\16D\u0870")
        buf.write("\13D\3D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u087e\nE\f")
        buf.write("E\16E\u0881\13E\3E\3E\7E\u0885\nE\fE\16E\u0888\13E\3E")
        buf.write("\3E\7E\u088c\nE\fE\16E\u088f\13E\3E\3E\7E\u0893\nE\fE")
        buf.write("\16E\u0896\13E\7E\u0898\nE\fE\16E\u089b\13E\5E\u089d\n")
        buf.write("E\3E\7E\u08a0\nE\fE\16E\u08a3\13E\3E\3E\7E\u08a7\nE\f")
        buf.write("E\16E\u08aa\13E\3E\3E\7E\u08ae\nE\fE\16E\u08b1\13E\3E")
        buf.write("\3E\7E\u08b5\nE\fE\16E\u08b8\13E\3E\7E\u08bb\nE\fE\16")
        buf.write("E\u08be\13E\5E\u08c0\nE\7E\u08c2\nE\fE\16E\u08c5\13E\3")
        buf.write("E\7E\u08c8\nE\fE\16E\u08cb\13E\3E\3E\5E\u08cf\nE\3F\3")
        buf.write("F\7F\u08d3\nF\fF\16F\u08d6\13F\3F\3F\7F\u08da\nF\fF\16")
        buf.write("F\u08dd\13F\3F\3F\3F\7F\u08e2\nF\fF\16F\u08e5\13F\3F\3")
        buf.write("F\7F\u08e9\nF\fF\16F\u08ec\13F\3F\3F\7F\u08f0\nF\fF\16")
        buf.write("F\u08f3\13F\3F\3F\3F\3F\7F\u08f9\nF\fF\16F\u08fc\13F\3")
        buf.write("F\3F\7F\u0900\nF\fF\16F\u0903\13F\3F\5F\u0906\nF\3G\3")
        buf.write("G\7G\u090a\nG\fG\16G\u090d\13G\3G\5G\u0910\nG\3G\7G\u0913")
        buf.write("\nG\fG\16G\u0916\13G\3G\3G\3H\6H\u091b\nH\rH\16H\u091c")
        buf.write("\3I\7I\u0920\nI\fI\16I\u0923\13I\3I\3I\5I\u0927\nI\3I")
        buf.write("\7I\u092a\nI\fI\16I\u092d\13I\3J\5J\u0930\nJ\3J\3J\3K")
        buf.write("\3K\7K\u0936\nK\fK\16K\u0939\13K\3K\3K\7K\u093d\nK\fK")
        buf.write("\16K\u0940\13K\3K\6K\u0943\nK\rK\16K\u0944\3K\7K\u0948")
        buf.write("\nK\fK\16K\u094b\13K\3K\3K\7K\u094f\nK\fK\16K\u0952\13")
        buf.write("K\3K\5K\u0955\nK\3K\7K\u0958\nK\fK\16K\u095b\13K\3K\3")
        buf.write("K\7K\u095f\nK\fK\16K\u0962\13K\3K\5K\u0965\nK\3K\7K\u0968")
        buf.write("\nK\fK\16K\u096b\13K\5K\u096d\nK\3L\3L\7L\u0971\nL\fL")
        buf.write("\16L\u0974\13L\3L\3L\7L\u0978\nL\fL\16L\u097b\13L\3L\3")
        buf.write("L\5L\u097f\nL\3L\7L\u0982\nL\fL\16L\u0985\13L\3L\3L\7")
        buf.write("L\u0989\nL\fL\16L\u098c\13L\3L\3L\7L\u0990\nL\fL\16L\u0993")
        buf.write("\13L\3L\5L\u0996\nL\3L\7L\u0999\nL\fL\16L\u099c\13L\3")
        buf.write("L\3L\3M\3M\7M\u09a2\nM\fM\16M\u09a5\13M\3M\3M\3N\3N\7")
        buf.write("N\u09ab\nN\fN\16N\u09ae\13N\3N\3N\3O\3O\7O\u09b4\nO\f")
        buf.write("O\16O\u09b7\13O\3O\3O\7O\u09bb\nO\fO\16O\u09be\13O\3O")
        buf.write("\3O\7O\u09c2\nO\fO\16O\u09c5\13O\3O\3O\7O\u09c9\nO\fO")
        buf.write("\16O\u09cc\13O\3O\3O\7O\u09d0\nO\fO\16O\u09d3\13O\3O\3")
        buf.write("O\7O\u09d7\nO\fO\16O\u09da\13O\3O\5O\u09dd\nO\3O\3O\7")
        buf.write("O\u09e1\nO\fO\16O\u09e4\13O\3O\3O\7O\u09e8\nO\fO\16O\u09eb")
        buf.write("\13O\3O\3O\7O\u09ef\nO\fO\16O\u09f2\13O\3O\3O\7O\u09f6")
        buf.write("\nO\fO\16O\u09f9\13O\3O\3O\5O\u09fd\nO\3P\3P\7P\u0a01")
        buf.write("\nP\fP\16P\u0a04\13P\3P\3P\7P\u0a08\nP\fP\16P\u0a0b\13")
        buf.write("P\3P\3P\7P\u0a0f\nP\fP\16P\u0a12\13P\3P\3P\7P\u0a16\n")
        buf.write("P\fP\16P\u0a19\13P\3P\3P\3P\3P\7P\u0a1f\nP\fP\16P\u0a22")
        buf.write("\13P\3P\3P\7P\u0a26\nP\fP\16P\u0a29\13P\3P\3P\7P\u0a2d")
        buf.write("\nP\fP\16P\u0a30\13P\3P\3P\7P\u0a34\nP\fP\16P\u0a37\13")
        buf.write("P\3P\3P\7P\u0a3b\nP\fP\16P\u0a3e\13P\3P\3P\3P\3P\3P\7")
        buf.write("P\u0a45\nP\fP\16P\u0a48\13P\3P\3P\7P\u0a4c\nP\fP\16P\u0a4f")
        buf.write("\13P\3P\3P\7P\u0a53\nP\fP\16P\u0a56\13P\3P\3P\7P\u0a5a")
        buf.write("\nP\fP\16P\u0a5d\13P\3P\3P\5P\u0a61\nP\3Q\3Q\5Q\u0a65")
        buf.write("\nQ\5Q\u0a67\nQ\3Q\3Q\5Q\u0a6b\nQ\3Q\3Q\5Q\u0a6f\nQ\3")
        buf.write("R\3R\7R\u0a73\nR\fR\16R\u0a76\13R\3R\5R\u0a79\nR\3S\3")
        buf.write("S\7S\u0a7d\nS\fS\16S\u0a80\13S\3S\3S\7S\u0a84\nS\fS\16")
        buf.write("S\u0a87\13S\3S\3S\7S\u0a8b\nS\fS\16S\u0a8e\13S\7S\u0a90")
        buf.write("\nS\fS\16S\u0a93\13S\3T\3T\7T\u0a97\nT\fT\16T\u0a9a\13")
        buf.write("T\3T\3T\3T\3T\7T\u0aa0\nT\fT\16T\u0aa3\13T\3T\5T\u0aa6")
        buf.write("\nT\3T\3T\7T\u0aaa\nT\fT\16T\u0aad\13T\3T\5T\u0ab0\nT")
        buf.write("\3T\3T\3U\5U\u0ab5\nU\3U\3U\3V\3V\3V\6V\u0abc\nV\rV\16")
        buf.write("V\u0abd\6V\u0ac0\nV\rV\16V\u0ac1\3W\3W\3W\5W\u0ac7\nW")
        buf.write("\3X\3X\7X\u0acb\nX\fX\16X\u0ace\13X\3X\3X\7X\u0ad2\nX")
        buf.write("\fX\16X\u0ad5\13X\3X\5X\u0ad8\nX\3X\7X\u0adb\nX\fX\16")
        buf.write("X\u0ade\13X\3X\3X\3X\3X\7X\u0ae4\nX\fX\16X\u0ae7\13X\3")
        buf.write("X\3X\7X\u0aeb\nX\fX\16X\u0aee\13X\3X\5X\u0af1\nX\3X\7")
        buf.write("X\u0af4\nX\fX\16X\u0af7\13X\3X\3X\3X\5X\u0afc\nX\3Y\7")
        buf.write("Y\u0aff\nY\fY\16Y\u0b02\13Y\3Y\7Y\u0b05\nY\fY\16Y\u0b08")
        buf.write("\13Y\3Y\5Y\u0b0b\nY\3Z\3Z\3Z\3[\3[\7[\u0b12\n[\f[\16[")
        buf.write("\u0b15\13[\3[\3[\7[\u0b19\n[\f[\16[\u0b1c\13[\3[\3[\7")
        buf.write("[\u0b20\n[\f[\16[\u0b23\13[\3[\5[\u0b26\n[\3[\7[\u0b29")
        buf.write("\n[\f[\16[\u0b2c\13[\3[\3[\3\\\3\\\7\\\u0b32\n\\\f\\\16")
        buf.write("\\\u0b35\13\\\3\\\3\\\7\\\u0b39\n\\\f\\\16\\\u0b3c\13")
        buf.write("\\\3\\\3\\\7\\\u0b40\n\\\f\\\16\\\u0b43\13\\\3\\\3\\\7")
        buf.write("\\\u0b47\n\\\f\\\16\\\u0b4a\13\\\7\\\u0b4c\n\\\f\\\16")
        buf.write("\\\u0b4f\13\\\5\\\u0b51\n\\\3\\\3\\\3]\3]\7]\u0b57\n]")
        buf.write("\f]\16]\u0b5a\13]\3]\3]\7]\u0b5e\n]\f]\16]\u0b61\13]\3")
        buf.write("]\3]\3^\3^\7^\u0b67\n^\f^\16^\u0b6a\13^\6^\u0b6c\n^\r")
        buf.write("^\16^\u0b6d\3_\7_\u0b71\n_\f_\16_\u0b74\13_\3_\3_\7_\u0b78")
        buf.write("\n_\f_\16_\u0b7b\13_\3_\2\6\24Bdx`\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\2\24")
        buf.write("\3\2ef\4\2EEGG\5\2\"\"EEGG\4\2\"\"\60\60\7\2DDFFHHKKP")
        buf.write("Q\3\2HJ\4\2DDFF\3\2BC\3\2>A\3\2cd\3\2Xb\b\2\7\7\24\24")
        buf.write("\35\35$$))\67\67\4\2&&**\6\2\13\13\36\36--\61\61\4\2\22")
        buf.write("\22\65\65\3\289\4\2HHOO\4\2\b\b\f\f\2\u0d0d\2\u00d2\3")
        buf.write("\2\2\2\4\u00d4\3\2\2\2\6\u00ef\3\2\2\2\b\u00f1\3\2\2\2")
        buf.write("\n\u00fa\3\2\2\2\f\u0132\3\2\2\2\16\u0169\3\2\2\2\20\u0186")
        buf.write("\3\2\2\2\22\u01ba\3\2\2\2\24\u01d6\3\2\2\2\26\u01ec\3")
        buf.write("\2\2\2\30\u0206\3\2\2\2\32\u0220\3\2\2\2\34\u023a\3\2")
        buf.write("\2\2\36\u0254\3\2\2\2 \u026e\3\2\2\2\"\u0288\3\2\2\2$")
        buf.write("\u02a2\3\2\2\2&\u02bc\3\2\2\2(\u02d6\3\2\2\2*\u02f0\3")
        buf.write("\2\2\2,\u0327\3\2\2\2.\u0329\3\2\2\2\60\u032b\3\2\2\2")
        buf.write("\62\u0345\3\2\2\2\64\u0354\3\2\2\2\66\u035d\3\2\2\28\u0366")
        buf.write("\3\2\2\2:\u0368\3\2\2\2<\u0382\3\2\2\2>\u0399\3\2\2\2")
        buf.write("@\u0405\3\2\2\2B\u044e\3\2\2\2D\u048b\3\2\2\2F\u048d\3")
        buf.write("\2\2\2H\u049c\3\2\2\2J\u04ad\3\2\2\2L\u04b1\3\2\2\2N\u04bc")
        buf.write("\3\2\2\2P\u04e2\3\2\2\2R\u0515\3\2\2\2T\u0517\3\2\2\2")
        buf.write("V\u0531\3\2\2\2X\u0548\3\2\2\2Z\u054a\3\2\2\2\\\u0566")
        buf.write("\3\2\2\2^\u0568\3\2\2\2`\u056a\3\2\2\2b\u0585\3\2\2\2")
        buf.write("d\u05d0\3\2\2\2f\u0619\3\2\2\2h\u062c\3\2\2\2j\u0631\3")
        buf.write("\2\2\2l\u0635\3\2\2\2n\u064c\3\2\2\2p\u0679\3\2\2\2r\u067b")
        buf.write("\3\2\2\2t\u0695\3\2\2\2v\u06aa\3\2\2\2x\u0735\3\2\2\2")
        buf.write("z\u07d7\3\2\2\2|\u07f4\3\2\2\2~\u07f7\3\2\2\2\u0080\u0822")
        buf.write("\3\2\2\2\u0082\u082c\3\2\2\2\u0084\u0848\3\2\2\2\u0086")
        buf.write("\u084a\3\2\2\2\u0088\u08ce\3\2\2\2\u008a\u0905\3\2\2\2")
        buf.write("\u008c\u0907\3\2\2\2\u008e\u091a\3\2\2\2\u0090\u0921\3")
        buf.write("\2\2\2\u0092\u092f\3\2\2\2\u0094\u0933\3\2\2\2\u0096\u096e")
        buf.write("\3\2\2\2\u0098\u099f\3\2\2\2\u009a\u09a8\3\2\2\2\u009c")
        buf.write("\u09fc\3\2\2\2\u009e\u0a60\3\2\2\2\u00a0\u0a66\3\2\2\2")
        buf.write("\u00a2\u0a70\3\2\2\2\u00a4\u0a7a\3\2\2\2\u00a6\u0aaf\3")
        buf.write("\2\2\2\u00a8\u0ab4\3\2\2\2\u00aa\u0abf\3\2\2\2\u00ac\u0ac6")
        buf.write("\3\2\2\2\u00ae\u0afb\3\2\2\2\u00b0\u0b00\3\2\2\2\u00b2")
        buf.write("\u0b0c\3\2\2\2\u00b4\u0b0f\3\2\2\2\u00b6\u0b2f\3\2\2\2")
        buf.write("\u00b8\u0b54\3\2\2\2\u00ba\u0b6b\3\2\2\2\u00bc\u0b72\3")
        buf.write("\2\2\2\u00be\u00d3\7h\2\2\u00bf\u00c3\7#\2\2\u00c0\u00c2")
        buf.write("\7n\2\2\u00c1\u00c0\3\2\2\2\u00c2\u00c5\3\2\2\2\u00c3")
        buf.write("\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c6\3\2\2\2")
        buf.write("\u00c5\u00c3\3\2\2\2\u00c6\u00d3\7h\2\2\u00c7\u00d3\7")
        buf.write("i\2\2\u00c8\u00ca\7k\2\2\u00c9\u00c8\3\2\2\2\u00ca\u00cb")
        buf.write("\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc")
        buf.write("\u00d3\3\2\2\2\u00cd\u00ce\78\2\2\u00ce\u00cf\5\60\31")
        buf.write("\2\u00cf\u00d0\79\2\2\u00d0\u00d3\3\2\2\2\u00d1\u00d3")
        buf.write("\5\4\3\2\u00d2\u00be\3\2\2\2\u00d2\u00bf\3\2\2\2\u00d2")
        buf.write("\u00c7\3\2\2\2\u00d2\u00c9\3\2\2\2\u00d2\u00cd\3\2\2\2")
        buf.write("\u00d2\u00d1\3\2\2\2\u00d3\3\3\2\2\2\u00d4\u00d8\78\2")
        buf.write("\2\u00d5\u00d7\7n\2\2\u00d6\u00d5\3\2\2\2\u00d7\u00da")
        buf.write("\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9")
        buf.write("\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2\u00db\u00dd\5n8\2\u00dc")
        buf.write("\u00db\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e1\3\2\2\2")
        buf.write("\u00de\u00e0\7n\2\2\u00df\u00de\3\2\2\2\u00e0\u00e3\3")
        buf.write("\2\2\2\u00e1\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e4")
        buf.write("\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e4\u00e8\79\2\2\u00e5")
        buf.write("\u00e7\7n\2\2\u00e6\u00e5\3\2\2\2\u00e7\u00ea\3\2\2\2")
        buf.write("\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00eb\3")
        buf.write("\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ec\5\6\4\2\u00ec\5")
        buf.write("\3\2\2\2\u00ed\u00f0\5\b\5\2\u00ee\u00f0\5\n\6\2\u00ef")
        buf.write("\u00ed\3\2\2\2\u00ef\u00ee\3\2\2\2\u00f0\7\3\2\2\2\u00f1")
        buf.write("\u00f5\7S\2\2\u00f2\u00f4\7n\2\2\u00f3\u00f2\3\2\2\2\u00f4")
        buf.write("\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f6\3\2\2\2")
        buf.write("\u00f6\u00f8\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8\u00f9\5")
        buf.write("\60\31\2\u00f9\t\3\2\2\2\u00fa\u00fe\7S\2\2\u00fb\u00fd")
        buf.write("\7n\2\2\u00fc\u00fb\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe")
        buf.write("\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\3\2\2\2")
        buf.write("\u0100\u00fe\3\2\2\2\u0101\u0102\5\u008cG\2\u0102\13\3")
        buf.write("\2\2\2\u0103\u0133\5\2\2\2\u0104\u0108\78\2\2\u0105\u0107")
        buf.write("\7n\2\2\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108")
        buf.write("\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010b\3\2\2\2")
        buf.write("\u010a\u0108\3\2\2\2\u010b\u010f\5t;\2\u010c\u010e\7n")
        buf.write("\2\2\u010d\u010c\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u010d")
        buf.write("\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0112\u0116\79\2\2\u0113\u0115\7n\2\2\u0114")
        buf.write("\u0113\3\2\2\2\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2")
        buf.write("\u0116\u0117\3\2\2\2\u0117\u0119\3\2\2\2\u0118\u0116\3")
        buf.write("\2\2\2\u0119\u011d\7<\2\2\u011a\u011c\7n\2\2\u011b\u011a")
        buf.write("\3\2\2\2\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2\u011d")
        buf.write("\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u011d\3\2\2\2")
        buf.write("\u0120\u0124\5~@\2\u0121\u0123\7n\2\2\u0122\u0121\3\2")
        buf.write("\2\2\u0123\u0126\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0125")
        buf.write("\3\2\2\2\u0125\u0128\3\2\2\2\u0126\u0124\3\2\2\2\u0127")
        buf.write("\u0129\7W\2\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2")
        buf.write("\u0129\u012d\3\2\2\2\u012a\u012c\7n\2\2\u012b\u012a\3")
        buf.write("\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e")
        buf.write("\3\2\2\2\u012e\u0130\3\2\2\2\u012f\u012d\3\2\2\2\u0130")
        buf.write("\u0131\7=\2\2\u0131\u0133\3\2\2\2\u0132\u0103\3\2\2\2")
        buf.write("\u0132\u0104\3\2\2\2\u0133\u0137\3\2\2\2\u0134\u0136\7")
        buf.write("n\2\2\u0135\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135")
        buf.write("\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0166\3\2\2\2\u0139")
        buf.write("\u0137\3\2\2\2\u013a\u013e\7:\2\2\u013b\u013d\7n\2\2\u013c")
        buf.write("\u013b\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3\2\2\2")
        buf.write("\u013e\u013f\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u013e\3")
        buf.write("\2\2\2\u0141\u0145\5\60\31\2\u0142\u0144\7n\2\2\u0143")
        buf.write("\u0142\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2")
        buf.write("\u0145\u0146\3\2\2\2\u0146\u0148\3\2\2\2\u0147\u0145\3")
        buf.write("\2\2\2\u0148\u0149\7;\2\2\u0149\u0165\3\2\2\2\u014a\u014e")
        buf.write("\78\2\2\u014b\u014d\7n\2\2\u014c\u014b\3\2\2\2\u014d\u0150")
        buf.write("\3\2\2\2\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f")
        buf.write("\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0151\u0153\5\16\b")
        buf.write("\2\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0157")
        buf.write("\3\2\2\2\u0154\u0156\7n\2\2\u0155\u0154\3\2\2\2\u0156")
        buf.write("\u0159\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2")
        buf.write("\u0158\u015a\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u0165\7")
        buf.write("9\2\2\u015b\u015f\t\2\2\2\u015c\u015e\7n\2\2\u015d\u015c")
        buf.write("\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0162\3\2\2\2\u0161\u015f\3\2\2\2")
        buf.write("\u0162\u0165\7h\2\2\u0163\u0165\t\3\2\2\u0164\u013a\3")
        buf.write("\2\2\2\u0164\u014a\3\2\2\2\u0164\u015b\3\2\2\2\u0164\u0163")
        buf.write("\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2\u0166")
        buf.write("\u0167\3\2\2\2\u0167\r\3\2\2\2\u0168\u0166\3\2\2\2\u0169")
        buf.write("\u016d\5,\27\2\u016a\u016c\7n\2\2\u016b\u016a\3\2\2\2")
        buf.write("\u016c\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016e\3")
        buf.write("\2\2\2\u016e\u0180\3\2\2\2\u016f\u016d\3\2\2\2\u0170\u0174")
        buf.write("\7W\2\2\u0171\u0173\7n\2\2\u0172\u0171\3\2\2\2\u0173\u0176")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175")
        buf.write("\u0177\3\2\2\2\u0176\u0174\3\2\2\2\u0177\u017b\5,\27\2")
        buf.write("\u0178\u017a\7n\2\2\u0179\u0178\3\2\2\2\u017a\u017d\3")
        buf.write("\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017f")
        buf.write("\3\2\2\2\u017d\u017b\3\2\2\2\u017e\u0170\3\2\2\2\u017f")
        buf.write("\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\17\3\2\2\2\u0182\u0180\3\2\2\2\u0183\u0185\t\4")
        buf.write("\2\2\u0184\u0183\3\2\2\2\u0185\u0188\3\2\2\2\u0186\u0184")
        buf.write("\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u018c\3\2\2\2\u0188")
        buf.write("\u0186\3\2\2\2\u0189\u018b\7n\2\2\u018a\u0189\3\2\2\2")
        buf.write("\u018b\u018e\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3")
        buf.write("\2\2\2\u018d\u01b8\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u01b9")
        buf.write("\5\f\7\2\u0190\u0194\5\22\n\2\u0191\u0193\7n\2\2\u0192")
        buf.write("\u0191\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2")
        buf.write("\u0194\u0195\3\2\2\2\u0195\u0197\3\2\2\2\u0196\u0194\3")
        buf.write("\2\2\2\u0197\u0198\5\24\13\2\u0198\u01b9\3\2\2\2\u0199")
        buf.write("\u019d\t\5\2\2\u019a\u019c\7n\2\2\u019b\u019a\3\2\2\2")
        buf.write("\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e\3")
        buf.write("\2\2\2\u019e\u01a0\3\2\2\2\u019f\u019d\3\2\2\2\u01a0\u01a4")
        buf.write("\78\2\2\u01a1\u01a3\7n\2\2\u01a2\u01a1\3\2\2\2\u01a3\u01a6")
        buf.write("\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5")
        buf.write("\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01ab\5t;\2\u01a8")
        buf.write("\u01aa\7n\2\2\u01a9\u01a8\3\2\2\2\u01aa\u01ad\3\2\2\2")
        buf.write("\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ae\3")
        buf.write("\2\2\2\u01ad\u01ab\3\2\2\2\u01ae\u01af\79\2\2\u01af\u01b9")
        buf.write("\3\2\2\2\u01b0\u01b4\7M\2\2\u01b1\u01b3\7n\2\2\u01b2\u01b1")
        buf.write("\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4")
        buf.write("\u01b5\3\2\2\2\u01b5\u01b7\3\2\2\2\u01b6\u01b4\3\2\2\2")
        buf.write("\u01b7\u01b9\7h\2\2\u01b8\u018f\3\2\2\2\u01b8\u0190\3")
        buf.write("\2\2\2\u01b8\u0199\3\2\2\2\u01b8\u01b0\3\2\2\2\u01b9\21")
        buf.write("\3\2\2\2\u01ba\u01bb\t\6\2\2\u01bb\23\3\2\2\2\u01bc\u01bd")
        buf.write("\b\13\1\2\u01bd\u01c1\78\2\2\u01be\u01c0\7n\2\2\u01bf")
        buf.write("\u01be\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2")
        buf.write("\u01c1\u01c2\3\2\2\2\u01c2\u01c4\3\2\2\2\u01c3\u01c1\3")
        buf.write("\2\2\2\u01c4\u01c8\5t;\2\u01c5\u01c7\7n\2\2\u01c6\u01c5")
        buf.write("\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8")
        buf.write("\u01c9\3\2\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01c8\3\2\2\2")
        buf.write("\u01cb\u01cf\79\2\2\u01cc\u01ce\7n\2\2\u01cd\u01cc\3\2")
        buf.write("\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0")
        buf.write("\3\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2")
        buf.write("\u01d3\5\24\13\6\u01d3\u01d7\3\2\2\2\u01d4\u01d7\5\20")
        buf.write("\t\2\u01d5\u01d7\7j\2\2\u01d6\u01bc\3\2\2\2\u01d6\u01d4")
        buf.write("\3\2\2\2\u01d6\u01d5\3\2\2\2\u01d7\u01e9\3\2\2\2\u01d8")
        buf.write("\u01dc\f\5\2\2\u01d9\u01db\7n\2\2\u01da\u01d9\3\2\2\2")
        buf.write("\u01db\u01de\3\2\2\2\u01dc\u01da\3\2\2\2\u01dc\u01dd\3")
        buf.write("\2\2\2\u01dd\u01df\3\2\2\2\u01de\u01dc\3\2\2\2\u01df\u01e3")
        buf.write("\7\6\2\2\u01e0\u01e2\7n\2\2\u01e1\u01e0\3\2\2\2\u01e2")
        buf.write("\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2")
        buf.write("\u01e4\u01e6\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e6\u01e8\5")
        buf.write("t;\2\u01e7\u01d8\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7")
        buf.write("\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\25\3\2\2\2\u01eb\u01e9")
        buf.write("\3\2\2\2\u01ec\u01f0\5\24\13\2\u01ed\u01ef\7n\2\2\u01ee")
        buf.write("\u01ed\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0\u01ee\3\2\2\2")
        buf.write("\u01f0\u01f1\3\2\2\2\u01f1\u0203\3\2\2\2\u01f2\u01f0\3")
        buf.write("\2\2\2\u01f3\u01f7\t\7\2\2\u01f4\u01f6\7n\2\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7")
        buf.write("\u01f8\3\2\2\2\u01f8\u01fa\3\2\2\2\u01f9\u01f7\3\2\2\2")
        buf.write("\u01fa\u01fe\5\24\13\2\u01fb\u01fd\7n\2\2\u01fc\u01fb")
        buf.write("\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe\u01fc\3\2\2\2\u01fe")
        buf.write("\u01ff\3\2\2\2\u01ff\u0202\3\2\2\2\u0200\u01fe\3\2\2\2")
        buf.write("\u0201\u01f3\3\2\2\2\u0202\u0205\3\2\2\2\u0203\u0201\3")
        buf.write("\2\2\2\u0203\u0204\3\2\2\2\u0204\27\3\2\2\2\u0205\u0203")
        buf.write("\3\2\2\2\u0206\u020a\5\26\f\2\u0207\u0209\7n\2\2\u0208")
        buf.write("\u0207\3\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2")
        buf.write("\u020a\u020b\3\2\2\2\u020b\u021d\3\2\2\2\u020c\u020a\3")
        buf.write("\2\2\2\u020d\u0211\t\b\2\2\u020e\u0210\7n\2\2\u020f\u020e")
        buf.write("\3\2\2\2\u0210\u0213\3\2\2\2\u0211\u020f\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0214\3\2\2\2\u0213\u0211\3\2\2\2")
        buf.write("\u0214\u0218\5\26\f\2\u0215\u0217\7n\2\2\u0216\u0215\3")
        buf.write("\2\2\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2\2\u021b")
        buf.write("\u020d\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2")
        buf.write("\u021d\u021e\3\2\2\2\u021e\31\3\2\2\2\u021f\u021d\3\2")
        buf.write("\2\2\u0220\u0224\5\30\r\2\u0221\u0223\7n\2\2\u0222\u0221")
        buf.write("\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0237\3\2\2\2\u0226\u0224\3\2\2\2")
        buf.write("\u0227\u022b\t\t\2\2\u0228\u022a\7n\2\2\u0229\u0228\3")
        buf.write("\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022b\u022c")
        buf.write("\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u022b\3\2\2\2\u022e")
        buf.write("\u0232\5\30\r\2\u022f\u0231\7n\2\2\u0230\u022f\3\2\2\2")
        buf.write("\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2\u0232\u0233\3")
        buf.write("\2\2\2\u0233\u0236\3\2\2\2\u0234\u0232\3\2\2\2\u0235\u0227")
        buf.write("\3\2\2\2\u0236\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0237")
        buf.write("\u0238\3\2\2\2\u0238\33\3\2\2\2\u0239\u0237\3\2\2\2\u023a")
        buf.write("\u023e\5\32\16\2\u023b\u023d\7n\2\2\u023c\u023b\3\2\2")
        buf.write("\2\u023d\u0240\3\2\2\2\u023e\u023c\3\2\2\2\u023e\u023f")
        buf.write("\3\2\2\2\u023f\u0251\3\2\2\2\u0240\u023e\3\2\2\2\u0241")
        buf.write("\u0245\t\n\2\2\u0242\u0244\7n\2\2\u0243\u0242\3\2\2\2")
        buf.write("\u0244\u0247\3\2\2\2\u0245\u0243\3\2\2\2\u0245\u0246\3")
        buf.write("\2\2\2\u0246\u0248\3\2\2\2\u0247\u0245\3\2\2\2\u0248\u024c")
        buf.write("\5\32\16\2\u0249\u024b\7n\2\2\u024a\u0249\3\2\2\2\u024b")
        buf.write("\u024e\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024d\3\2\2\2")
        buf.write("\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024f\u0241\3")
        buf.write("\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252\35\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u0258")
        buf.write("\5\34\17\2\u0255\u0257\7n\2\2\u0256\u0255\3\2\2\2\u0257")
        buf.write("\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259\3\2\2\2")
        buf.write("\u0259\u026b\3\2\2\2\u025a\u0258\3\2\2\2\u025b\u025f\t")
        buf.write("\13\2\2\u025c\u025e\7n\2\2\u025d\u025c\3\2\2\2\u025e\u0261")
        buf.write("\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260")
        buf.write("\u0262\3\2\2\2\u0261\u025f\3\2\2\2\u0262\u0266\5\34\17")
        buf.write("\2\u0263\u0265\7n\2\2\u0264\u0263\3\2\2\2\u0265\u0268")
        buf.write("\3\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u026a\3\2\2\2\u0268\u0266\3\2\2\2\u0269\u025b\3\2\2\2")
        buf.write("\u026a\u026d\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3")
        buf.write("\2\2\2\u026c\37\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u0272")
        buf.write("\5\36\20\2\u026f\u0271\7n\2\2\u0270\u026f\3\2\2\2\u0271")
        buf.write("\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u0285\3\2\2\2\u0274\u0272\3\2\2\2\u0275\u0279\7")
        buf.write("K\2\2\u0276\u0278\7n\2\2\u0277\u0276\3\2\2\2\u0278\u027b")
        buf.write("\3\2\2\2\u0279\u0277\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u027c\3\2\2\2\u027b\u0279\3\2\2\2\u027c\u0280\5\36\20")
        buf.write("\2\u027d\u027f\7n\2\2\u027e\u027d\3\2\2\2\u027f\u0282")
        buf.write("\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u0281")
        buf.write("\u0284\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0275\3\2\2\2")
        buf.write("\u0284\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0286\3")
        buf.write("\2\2\2\u0286!\3\2\2\2\u0287\u0285\3\2\2\2\u0288\u028c")
        buf.write("\5 \21\2\u0289\u028b\7n\2\2\u028a\u0289\3\2\2\2\u028b")
        buf.write("\u028e\3\2\2\2\u028c\u028a\3\2\2\2\u028c\u028d\3\2\2\2")
        buf.write("\u028d\u029f\3\2\2\2\u028e\u028c\3\2\2\2\u028f\u0293\7")
        buf.write("O\2\2\u0290\u0292\7n\2\2\u0291\u0290\3\2\2\2\u0292\u0295")
        buf.write("\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2\2\u0294")
        buf.write("\u0296\3\2\2\2\u0295\u0293\3\2\2\2\u0296\u029a\5 \21\2")
        buf.write("\u0297\u0299\7n\2\2\u0298\u0297\3\2\2\2\u0299\u029c\3")
        buf.write("\2\2\2\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029e")
        buf.write("\3\2\2\2\u029c\u029a\3\2\2\2\u029d\u028f\3\2\2\2\u029e")
        buf.write("\u02a1\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0#\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a6\5\"\22")
        buf.write("\2\u02a3\u02a5\7n\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02b9\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02ad\7L\2\2")
        buf.write("\u02aa\u02ac\7n\2\2\u02ab\u02aa\3\2\2\2\u02ac\u02af\3")
        buf.write("\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b0")
        buf.write("\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0\u02b4\5\"\22\2\u02b1")
        buf.write("\u02b3\7n\2\2\u02b2\u02b1\3\2\2\2\u02b3\u02b6\3\2\2\2")
        buf.write("\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b8\3")
        buf.write("\2\2\2\u02b6\u02b4\3\2\2\2\u02b7\u02a9\3\2\2\2\u02b8\u02bb")
        buf.write("\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("%\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02c0\5$\23\2\u02bd")
        buf.write("\u02bf\7n\2\2\u02be\u02bd\3\2\2\2\u02bf\u02c2\3\2\2\2")
        buf.write("\u02c0\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02d3\3")
        buf.write("\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c7\7M\2\2\u02c4\u02c6")
        buf.write("\7n\2\2\u02c5\u02c4\3\2\2\2\u02c6\u02c9\3\2\2\2\u02c7")
        buf.write("\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02ca\3\2\2\2")
        buf.write("\u02c9\u02c7\3\2\2\2\u02ca\u02ce\5$\23\2\u02cb\u02cd\7")
        buf.write("n\2\2\u02cc\u02cb\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc")
        buf.write("\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0")
        buf.write("\u02ce\3\2\2\2\u02d1\u02c3\3\2\2\2\u02d2\u02d5\3\2\2\2")
        buf.write("\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\'\3\2\2")
        buf.write("\2\u02d5\u02d3\3\2\2\2\u02d6\u02da\5&\24\2\u02d7\u02d9")
        buf.write("\7n\2\2\u02d8\u02d7\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da")
        buf.write("\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02ed\3\2\2\2")
        buf.write("\u02dc\u02da\3\2\2\2\u02dd\u02e1\7N\2\2\u02de\u02e0\7")
        buf.write("n\2\2\u02df\u02de\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df")
        buf.write("\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2\u02e3")
        buf.write("\u02e1\3\2\2\2\u02e4\u02e8\5&\24\2\u02e5\u02e7\7n\2\2")
        buf.write("\u02e6\u02e5\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3")
        buf.write("\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02e8")
        buf.write("\3\2\2\2\u02eb\u02dd\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed")
        buf.write("\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee)\3\2\2\2\u02ef")
        buf.write("\u02ed\3\2\2\2\u02f0\u02f4\5(\25\2\u02f1\u02f3\7n\2\2")
        buf.write("\u02f2\u02f1\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3")
        buf.write("\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u0313\3\2\2\2\u02f6\u02f4")
        buf.write("\3\2\2\2\u02f7\u02fb\7T\2\2\u02f8\u02fa\7n\2\2\u02f9\u02f8")
        buf.write("\3\2\2\2\u02fa\u02fd\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fb")
        buf.write("\u02fc\3\2\2\2\u02fc\u02fe\3\2\2\2\u02fd\u02fb\3\2\2\2")
        buf.write("\u02fe\u0302\5\60\31\2\u02ff\u0301\7n\2\2\u0300\u02ff")
        buf.write("\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302")
        buf.write("\u0303\3\2\2\2\u0303\u0305\3\2\2\2\u0304\u0302\3\2\2\2")
        buf.write("\u0305\u0309\7U\2\2\u0306\u0308\7n\2\2\u0307\u0306\3\2")
        buf.write("\2\2\u0308\u030b\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a")
        buf.write("\3\2\2\2\u030a\u030c\3\2\2\2\u030b\u0309\3\2\2\2\u030c")
        buf.write("\u0310\5*\26\2\u030d\u030f\7n\2\2\u030e\u030d\3\2\2\2")
        buf.write("\u030f\u0312\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3")
        buf.write("\2\2\2\u0311\u0314\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u02f7")
        buf.write("\3\2\2\2\u0313\u0314\3\2\2\2\u0314+\3\2\2\2\u0315\u0328")
        buf.write("\5*\26\2\u0316\u031a\5\20\t\2\u0317\u0319\7n\2\2\u0318")
        buf.write("\u0317\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031a\u031b\3\2\2\2\u031b\u031d\3\2\2\2\u031c\u031a\3")
        buf.write("\2\2\2\u031d\u0321\5.\30\2\u031e\u0320\7n\2\2\u031f\u031e")
        buf.write("\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0321")
        buf.write("\u0322\3\2\2\2\u0322\u0324\3\2\2\2\u0323\u0321\3\2\2\2")
        buf.write("\u0324\u0325\5,\27\2\u0325\u0328\3\2\2\2\u0326\u0328\7")
        buf.write("j\2\2\u0327\u0315\3\2\2\2\u0327\u0316\3\2\2\2\u0327\u0326")
        buf.write("\3\2\2\2\u0328-\3\2\2\2\u0329\u032a\t\f\2\2\u032a/\3\2")
        buf.write("\2\2\u032b\u032f\5,\27\2\u032c\u032e\7n\2\2\u032d\u032c")
        buf.write("\3\2\2\2\u032e\u0331\3\2\2\2\u032f\u032d\3\2\2\2\u032f")
        buf.write("\u0330\3\2\2\2\u0330\u0342\3\2\2\2\u0331\u032f\3\2\2\2")
        buf.write("\u0332\u0336\7W\2\2\u0333\u0335\7n\2\2\u0334\u0333\3\2")
        buf.write("\2\2\u0335\u0338\3\2\2\2\u0336\u0334\3\2\2\2\u0336\u0337")
        buf.write("\3\2\2\2\u0337\u0339\3\2\2\2\u0338\u0336\3\2\2\2\u0339")
        buf.write("\u033d\5,\27\2\u033a\u033c\7n\2\2\u033b\u033a\3\2\2\2")
        buf.write("\u033c\u033f\3\2\2\2\u033d\u033b\3\2\2\2\u033d\u033e\3")
        buf.write("\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3\2\2\2\u0340\u0332")
        buf.write("\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342")
        buf.write("\u0343\3\2\2\2\u0343\61\3\2\2\2\u0344\u0342\3\2\2\2\u0345")
        buf.write("\u0346\5*\26\2\u0346\63\3\2\2\2\u0347\u034b\5\66\34\2")
        buf.write("\u0348\u034a\7n\2\2\u0349\u0348\3\2\2\2\u034a\u034d\3")
        buf.write("\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034f")
        buf.write("\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u0350\5:\36\2\u034f")
        buf.write("\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351\3\2\2\2")
        buf.write("\u0351\u0352\5\u00bc_\2\u0352\u0355\3\2\2\2\u0353\u0355")
        buf.write("\5\u0086D\2\u0354\u0347\3\2\2\2\u0354\u0353\3\2\2\2\u0355")
        buf.write("\65\3\2\2\2\u0356\u035a\58\35\2\u0357\u0359\7n\2\2\u0358")
        buf.write("\u0357\3\2\2\2\u0359\u035c\3\2\2\2\u035a\u0358\3\2\2\2")
        buf.write("\u035a\u035b\3\2\2\2\u035b\u035e\3\2\2\2\u035c\u035a\3")
        buf.write("\2\2\2\u035d\u0356\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u035d")
        buf.write("\3\2\2\2\u035f\u0360\3\2\2\2\u0360\67\3\2\2\2\u0361\u0367")
        buf.write("\5> \2\u0362\u0367\5B\"\2\u0363\u0367\5\\/\2\u0364\u0367")
        buf.write("\5^\60\2\u0365\u0367\5`\61\2\u0366\u0361\3\2\2\2\u0366")
        buf.write("\u0362\3\2\2\2\u0366\u0363\3\2\2\2\u0366\u0364\3\2\2\2")
        buf.write("\u0366\u0365\3\2\2\2\u03679\3\2\2\2\u0368\u036c\5<\37")
        buf.write("\2\u0369\u036b\7n\2\2\u036a\u0369\3\2\2\2\u036b\u036e")
        buf.write("\3\2\2\2\u036c\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u037f\3\2\2\2\u036e\u036c\3\2\2\2\u036f\u0373\7W\2\2")
        buf.write("\u0370\u0372\7n\2\2\u0371\u0370\3\2\2\2\u0372\u0375\3")
        buf.write("\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376")
        buf.write("\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u037a\5<\37\2\u0377")
        buf.write("\u0379\7n\2\2\u0378\u0377\3\2\2\2\u0379\u037c\3\2\2\2")
        buf.write("\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037e\3")
        buf.write("\2\2\2\u037c\u037a\3\2\2\2\u037d\u036f\3\2\2\2\u037e\u0381")
        buf.write("\3\2\2\2\u037f\u037d\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write(";\3\2\2\2\u0381\u037f\3\2\2\2\u0382\u0386\5b\62\2\u0383")
        buf.write("\u0385\7n\2\2\u0384\u0383\3\2\2\2\u0385\u0388\3\2\2\2")
        buf.write("\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0397\3")
        buf.write("\2\2\2\u0388\u0386\3\2\2\2\u0389\u038d\7X\2\2\u038a\u038c")
        buf.write("\7n\2\2\u038b\u038a\3\2\2\2\u038c\u038f\3\2\2\2\u038d")
        buf.write("\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2")
        buf.write("\u038f\u038d\3\2\2\2\u0390\u0394\5|?\2\u0391\u0393\7n")
        buf.write("\2\2\u0392\u0391\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0392")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0398\3\2\2\2\u0396")
        buf.write("\u0394\3\2\2\2\u0397\u0389\3\2\2\2\u0397\u0398\3\2\2\2")
        buf.write("\u0398=\3\2\2\2\u0399\u039a\t\r\2\2\u039a?\3\2\2\2\u039b")
        buf.write("\u039f\7:\2\2\u039c\u039e\7n\2\2\u039d\u039c\3\2\2\2\u039e")
        buf.write("\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3\2\2\2")
        buf.write("\u03a0\u03a3\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2\u03a4\5")
        buf.write("j\66\2\u03a3\u03a2\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a8")
        buf.write("\3\2\2\2\u03a5\u03a7\7n\2\2\u03a6\u03a5\3\2\2\2\u03a7")
        buf.write("\u03aa\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u03ac\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab\u03ad\5")
        buf.write(",\27\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03b1")
        buf.write("\3\2\2\2\u03ae\u03b0\7n\2\2\u03af\u03ae\3\2\2\2\u03b0")
        buf.write("\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b2\3\2\2\2")
        buf.write("\u03b2\u03b4\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b4\u0406\7")
        buf.write(";\2\2\u03b5\u03b9\7:\2\2\u03b6\u03b8\7n\2\2\u03b7\u03b6")
        buf.write("\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9")
        buf.write("\u03ba\3\2\2\2\u03ba\u03bc\3\2\2\2\u03bb\u03b9\3\2\2\2")
        buf.write("\u03bc\u03c0\7$\2\2\u03bd\u03bf\7n\2\2\u03be\u03bd\3\2")
        buf.write("\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1")
        buf.write("\3\2\2\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3")
        buf.write("\u03c5\5j\66\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2")
        buf.write("\u03c5\u03c9\3\2\2\2\u03c6\u03c8\7n\2\2\u03c7\u03c6\3")
        buf.write("\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7\3\2\2\2\u03c9\u03ca")
        buf.write("\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cc")
        buf.write("\u03d0\5,\27\2\u03cd\u03cf\7n\2\2\u03ce\u03cd\3\2\2\2")
        buf.write("\u03cf\u03d2\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0\u03d1\3")
        buf.write("\2\2\2\u03d1\u03d3\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d3\u03d4")
        buf.write("\7;\2\2\u03d4\u0406\3\2\2\2\u03d5\u03d9\7:\2\2\u03d6\u03d8")
        buf.write("\7n\2\2\u03d7\u03d6\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03dc\3\2\2\2")
        buf.write("\u03db\u03d9\3\2\2\2\u03dc\u03e0\5j\66\2\u03dd\u03df\7")
        buf.write("n\2\2\u03de\u03dd\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de")
        buf.write("\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2")
        buf.write("\u03e0\3\2\2\2\u03e3\u03e4\7$\2\2\u03e4\u03e8\5,\27\2")
        buf.write("\u03e5\u03e7\7n\2\2\u03e6\u03e5\3\2\2\2\u03e7\u03ea\3")
        buf.write("\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03eb")
        buf.write("\3\2\2\2\u03ea\u03e8\3\2\2\2\u03eb\u03ec\7;\2\2\u03ec")
        buf.write("\u0406\3\2\2\2\u03ed\u03f1\7:\2\2\u03ee\u03f0\7n\2\2\u03ef")
        buf.write("\u03ee\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1\u03ef\3\2\2\2")
        buf.write("\u03f1\u03f2\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3")
        buf.write("\2\2\2\u03f4\u03f6\5j\66\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6")
        buf.write("\3\2\2\2\u03f6\u03fa\3\2\2\2\u03f7\u03f9\7n\2\2\u03f8")
        buf.write("\u03f7\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8\3\2\2\2")
        buf.write("\u03fa\u03fb\3\2\2\2\u03fb\u03fd\3\2\2\2\u03fc\u03fa\3")
        buf.write("\2\2\2\u03fd\u0401\7H\2\2\u03fe\u0400\7n\2\2\u03ff\u03fe")
        buf.write("\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff\3\2\2\2\u0401")
        buf.write("\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u0401\3\2\2\2")
        buf.write("\u0404\u0406\7;\2\2\u0405\u039b\3\2\2\2\u0405\u03b5\3")
        buf.write("\2\2\2\u0405\u03d5\3\2\2\2\u0405\u03ed\3\2\2\2\u0406A")
        buf.write("\3\2\2\2\u0407\u042b\b\"\1\2\u0408\u042c\7,\2\2\u0409")
        buf.write("\u042c\7\n\2\2\u040a\u042c\7 \2\2\u040b\u042c\7\32\2\2")
        buf.write("\u040c\u042c\7%\2\2\u040d\u042c\7\34\2\2\u040e\u042c\7")
        buf.write("\25\2\2\u040f\u042c\7\17\2\2\u0410\u042c\7!\2\2\u0411")
        buf.write("\u0415\7\33\2\2\u0412\u0414\7n\2\2\u0413\u0412\3\2\2\2")
        buf.write("\u0414\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3")
        buf.write("\2\2\2\u0416\u0418\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u041c")
        buf.write("\7>\2\2\u0419\u041b\7n\2\2\u041a\u0419\3\2\2\2\u041b\u041e")
        buf.write("\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d")
        buf.write("\u041f\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u0423\5l\67\2")
        buf.write("\u0420\u0422\7n\2\2\u0421\u0420\3\2\2\2\u0422\u0425\3")
        buf.write("\2\2\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0426")
        buf.write("\3\2\2\2\u0425\u0423\3\2\2\2\u0426\u0427\7@\2\2\u0427")
        buf.write("\u042c\3\2\2\2\u0428\u042c\7+\2\2\u0429\u042c\7\62\2\2")
        buf.write("\u042a\u042c\7\63\2\2\u042b\u0408\3\2\2\2\u042b\u0409")
        buf.write("\3\2\2\2\u042b\u040a\3\2\2\2\u042b\u040b\3\2\2\2\u042b")
        buf.write("\u040c\3\2\2\2\u042b\u040d\3\2\2\2\u042b\u040e\3\2\2\2")
        buf.write("\u042b\u040f\3\2\2\2\u042b\u0410\3\2\2\2\u042b\u0411\3")
        buf.write("\2\2\2\u042b\u0428\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042a")
        buf.write("\3\2\2\2\u042c\u0430\3\2\2\2\u042d\u042f\5@!\2\u042e\u042d")
        buf.write("\3\2\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430")
        buf.write("\u0431\3\2\2\2\u0431\u044f\3\2\2\2\u0432\u0430\3\2\2\2")
        buf.write("\u0433\u044f\5Z.\2\u0434\u044f\5D#\2\u0435\u044f\5R*\2")
        buf.write("\u0436\u044f\5z>\2\u0437\u043b\7(\2\2\u0438\u043a\7n\2")
        buf.write("\2\u0439\u0438\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439")
        buf.write("\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043e\3\2\2\2\u043d")
        buf.write("\u043b\3\2\2\2\u043e\u0442\78\2\2\u043f\u0441\7n\2\2\u0440")
        buf.write("\u043f\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440\3\2\2\2")
        buf.write("\u0442\u0443\3\2\2\2\u0443\u0445\3\2\2\2\u0444\u0442\3")
        buf.write("\2\2\2\u0445\u0449\5\62\32\2\u0446\u0448\7n\2\2\u0447")
        buf.write("\u0446\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u0447\3\2\2\2")
        buf.write("\u0449\u044a\3\2\2\2\u044a\u044c\3\2\2\2\u044b\u0449\3")
        buf.write("\2\2\2\u044c\u044d\79\2\2\u044d\u044f\3\2\2\2\u044e\u0407")
        buf.write("\3\2\2\2\u044e\u0433\3\2\2\2\u044e\u0434\3\2\2\2\u044e")
        buf.write("\u0435\3\2\2\2\u044e\u0436\3\2\2\2\u044e\u0437\3\2\2\2")
        buf.write("\u044f\u045a\3\2\2\2\u0450\u0454\f\3\2\2\u0451\u0453\7")
        buf.write("n\2\2\u0452\u0451\3\2\2\2\u0453\u0456\3\2\2\2\u0454\u0452")
        buf.write("\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457\3\2\2\2\u0456")
        buf.write("\u0454\3\2\2\2\u0457\u0459\5h\65\2\u0458\u0450\3\2\2\2")
        buf.write("\u0459\u045c\3\2\2\2\u045a\u0458\3\2\2\2\u045a\u045b\3")
        buf.write("\2\2\2\u045bC\3\2\2\2\u045c\u045a\3\2\2\2\u045d\u0461")
        buf.write("\5F$\2\u045e\u0460\7n\2\2\u045f\u045e\3\2\2\2\u0460\u0463")
        buf.write("\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462")
        buf.write("\u046b\3\2\2\2\u0463\u0461\3\2\2\2\u0464\u0468\7h\2\2")
        buf.write("\u0465\u0467\7n\2\2\u0466\u0465\3\2\2\2\u0467\u046a\3")
        buf.write("\2\2\2\u0468\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046c")
        buf.write("\3\2\2\2\u046a\u0468\3\2\2\2\u046b\u0464\3\2\2\2\u046b")
        buf.write("\u046c\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u0471\7<\2\2")
        buf.write("\u046e\u0470\7n\2\2\u046f\u046e\3\2\2\2\u0470\u0473\3")
        buf.write("\2\2\2\u0471\u046f\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0477")
        buf.write("\3\2\2\2\u0473\u0471\3\2\2\2\u0474\u0476\5H%\2\u0475\u0474")
        buf.write("\3\2\2\2\u0476\u0479\3\2\2\2\u0477\u0475\3\2\2\2\u0477")
        buf.write("\u0478\3\2\2\2\u0478\u047d\3\2\2\2\u0479\u0477\3\2\2\2")
        buf.write("\u047a\u047c\7n\2\2\u047b\u047a\3\2\2\2\u047c\u047f\3")
        buf.write("\2\2\2\u047d\u047b\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0480")
        buf.write("\3\2\2\2\u047f\u047d\3\2\2\2\u0480\u0481\7=\2\2\u0481")
        buf.write("\u048c\3\2\2\2\u0482\u0486\5F$\2\u0483\u0485\7n\2\2\u0484")
        buf.write("\u0483\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484\3\2\2\2")
        buf.write("\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488\u0486\3")
        buf.write("\2\2\2\u0489\u048a\7h\2\2\u048a\u048c\3\2\2\2\u048b\u045d")
        buf.write("\3\2\2\2\u048b\u0482\3\2\2\2\u048cE\3\2\2\2\u048d\u048e")
        buf.write("\t\16\2\2\u048eG\3\2\2\2\u048f\u0491\7n\2\2\u0490\u048f")
        buf.write("\3\2\2\2\u0491\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492")
        buf.write("\u0493\3\2\2\2\u0493\u0495\3\2\2\2\u0494\u0492\3\2\2\2")
        buf.write("\u0495\u0499\5J&\2\u0496\u0498\7n\2\2\u0497\u0496\3\2")
        buf.write("\2\2\u0498\u049b\3\2\2\2\u0499\u0497\3\2\2\2\u0499\u049a")
        buf.write("\3\2\2\2\u049a\u049d\3\2\2\2\u049b\u0499\3\2\2\2\u049c")
        buf.write("\u0492\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u049c\3\2\2\2")
        buf.write("\u049e\u049f\3\2\2\2\u049fI\3\2\2\2\u04a0\u04a4\5L\'\2")
        buf.write("\u04a1\u04a3\7n\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3")
        buf.write("\2\2\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a8")
        buf.write("\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a7\u04a9\5N(\2\u04a8\u04a7")
        buf.write("\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa")
        buf.write("\u04ab\5\u00bc_\2\u04ab\u04ae\3\2\2\2\u04ac\u04ae\5\u0086")
        buf.write("D\2\u04ad\u04a0\3\2\2\2\u04ad\u04ac\3\2\2\2\u04aeK\3\2")
        buf.write("\2\2\u04af\u04b2\5B\"\2\u04b0\u04b2\5\\/\2\u04b1\u04af")
        buf.write("\3\2\2\2\u04b1\u04b0\3\2\2\2\u04b2\u04b6\3\2\2\2\u04b3")
        buf.write("\u04b5\7n\2\2\u04b4\u04b3\3\2\2\2\u04b5\u04b8\3\2\2\2")
        buf.write("\u04b6\u04b4\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04ba\3")
        buf.write("\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04bb\5L\'\2\u04ba\u04b9")
        buf.write("\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bbM\3\2\2\2\u04bc\u04c0")
        buf.write("\5P)\2\u04bd\u04bf\7n\2\2\u04be\u04bd\3\2\2\2\u04bf\u04c2")
        buf.write("\3\2\2\2\u04c0\u04be\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1")
        buf.write("\u04cd\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c3\u04c7\7W\2\2")
        buf.write("\u04c4\u04c6\7n\2\2\u04c5\u04c4\3\2\2\2\u04c6\u04c9\3")
        buf.write("\2\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca")
        buf.write("\3\2\2\2\u04c9\u04c7\3\2\2\2\u04ca\u04cc\5P)\2\u04cb\u04c3")
        buf.write("\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb\3\2\2\2\u04cd")
        buf.write("\u04ce\3\2\2\2\u04ceO\3\2\2\2\u04cf\u04cd\3\2\2\2\u04d0")
        buf.write("\u04e3\5b\62\2\u04d1\u04d3\5b\62\2\u04d2\u04d1\3\2\2\2")
        buf.write("\u04d2\u04d3\3\2\2\2\u04d3\u04d7\3\2\2\2\u04d4\u04d6\7")
        buf.write("n\2\2\u04d5\u04d4\3\2\2\2\u04d6\u04d9\3\2\2\2\u04d7\u04d5")
        buf.write("\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04da\3\2\2\2\u04d9")
        buf.write("\u04d7\3\2\2\2\u04da\u04de\7U\2\2\u04db\u04dd\7n\2\2\u04dc")
        buf.write("\u04db\3\2\2\2\u04dd\u04e0\3\2\2\2\u04de\u04dc\3\2\2\2")
        buf.write("\u04de\u04df\3\2\2\2\u04df\u04e1\3\2\2\2\u04e0\u04de\3")
        buf.write("\2\2\2\u04e1\u04e3\5\62\32\2\u04e2\u04d0\3\2\2\2\u04e2")
        buf.write("\u04d2\3\2\2\2\u04e3Q\3\2\2\2\u04e4\u04e8\7\23\2\2\u04e5")
        buf.write("\u04e7\7n\2\2\u04e6\u04e5\3\2\2\2\u04e7\u04ea\3\2\2\2")
        buf.write("\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ec\3")
        buf.write("\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ed\7h\2\2\u04ec\u04eb")
        buf.write("\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04f1\3\2\2\2\u04ee")
        buf.write("\u04f0\7n\2\2\u04ef\u04ee\3\2\2\2\u04f0\u04f3\3\2\2\2")
        buf.write("\u04f1\u04ef\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f4\3")
        buf.write("\2\2\2\u04f3\u04f1\3\2\2\2\u04f4\u04f8\7<\2\2\u04f5\u04f7")
        buf.write("\7n\2\2\u04f6\u04f5\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8")
        buf.write("\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fb\3\2\2\2")
        buf.write("\u04fa\u04f8\3\2\2\2\u04fb\u04ff\5T+\2\u04fc\u04fe\7n")
        buf.write("\2\2\u04fd\u04fc\3\2\2\2\u04fe\u0501\3\2\2\2\u04ff\u04fd")
        buf.write("\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0503\3\2\2\2\u0501")
        buf.write("\u04ff\3\2\2\2\u0502\u0504\7W\2\2\u0503\u0502\3\2\2\2")
        buf.write("\u0503\u0504\3\2\2\2\u0504\u0508\3\2\2\2\u0505\u0507\7")
        buf.write("n\2\2\u0506\u0505\3\2\2\2\u0507\u050a\3\2\2\2\u0508\u0506")
        buf.write("\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050b\3\2\2\2\u050a")
        buf.write("\u0508\3\2\2\2\u050b\u050c\7=\2\2\u050c\u0516\3\2\2\2")
        buf.write("\u050d\u0511\7\23\2\2\u050e\u0510\7n\2\2\u050f\u050e\3")
        buf.write("\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f\3\2\2\2\u0511\u0512")
        buf.write("\3\2\2\2\u0512\u0514\3\2\2\2\u0513\u0511\3\2\2\2\u0514")
        buf.write("\u0516\7h\2\2\u0515\u04e4\3\2\2\2\u0515\u050d\3\2\2\2")
        buf.write("\u0516S\3\2\2\2\u0517\u051b\5V,\2\u0518\u051a\7n\2\2\u0519")
        buf.write("\u0518\3\2\2\2\u051a\u051d\3\2\2\2\u051b\u0519\3\2\2\2")
        buf.write("\u051b\u051c\3\2\2\2\u051c\u052e\3\2\2\2\u051d\u051b\3")
        buf.write("\2\2\2\u051e\u0522\7W\2\2\u051f\u0521\7n\2\2\u0520\u051f")
        buf.write("\3\2\2\2\u0521\u0524\3\2\2\2\u0522\u0520\3\2\2\2\u0522")
        buf.write("\u0523\3\2\2\2\u0523\u0525\3\2\2\2\u0524\u0522\3\2\2\2")
        buf.write("\u0525\u0529\5V,\2\u0526\u0528\7n\2\2\u0527\u0526\3\2")
        buf.write("\2\2\u0528\u052b\3\2\2\2\u0529\u0527\3\2\2\2\u0529\u052a")
        buf.write("\3\2\2\2\u052a\u052d\3\2\2\2\u052b\u0529\3\2\2\2\u052c")
        buf.write("\u051e\3\2\2\2\u052d\u0530\3\2\2\2\u052e\u052c\3\2\2\2")
        buf.write("\u052e\u052f\3\2\2\2\u052fU\3\2\2\2\u0530\u052e\3\2\2")
        buf.write("\2\u0531\u0535\5X-\2\u0532\u0534\7n\2\2\u0533\u0532\3")
        buf.write("\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3\2\2\2\u0535\u0536")
        buf.write("\3\2\2\2\u0536\u0546\3\2\2\2\u0537\u0535\3\2\2\2\u0538")
        buf.write("\u053c\7X\2\2\u0539\u053b\7n\2\2\u053a\u0539\3\2\2\2\u053b")
        buf.write("\u053e\3\2\2\2\u053c\u053a\3\2\2\2\u053c\u053d\3\2\2\2")
        buf.write("\u053d\u053f\3\2\2\2\u053e\u053c\3\2\2\2\u053f\u0543\5")
        buf.write("\62\32\2\u0540\u0542\7n\2\2\u0541\u0540\3\2\2\2\u0542")
        buf.write("\u0545\3\2\2\2\u0543\u0541\3\2\2\2\u0543\u0544\3\2\2\2")
        buf.write("\u0544\u0547\3\2\2\2\u0545\u0543\3\2\2\2\u0546\u0538\3")
        buf.write("\2\2\2\u0546\u0547\3\2\2\2\u0547W\3\2\2\2\u0548\u0549")
        buf.write("\7h\2\2\u0549Y\3\2\2\2\u054a\u054e\7\61\2\2\u054b\u054d")
        buf.write("\7n\2\2\u054c\u054b\3\2\2\2\u054d\u0550\3\2\2\2\u054e")
        buf.write("\u054c\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551\3\2\2\2")
        buf.write("\u0550\u054e\3\2\2\2\u0551\u0555\78\2\2\u0552\u0554\7")
        buf.write("n\2\2\u0553\u0552\3\2\2\2\u0554\u0557\3\2\2\2\u0555\u0553")
        buf.write("\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0558\3\2\2\2\u0557")
        buf.write("\u0555\3\2\2\2\u0558\u055c\5t;\2\u0559\u055b\7n\2\2\u055a")
        buf.write("\u0559\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a\3\2\2\2")
        buf.write("\u055c\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u055c\3")
        buf.write("\2\2\2\u055f\u0563\79\2\2\u0560\u0562\7n\2\2\u0561\u0560")
        buf.write("\3\2\2\2\u0562\u0565\3\2\2\2\u0563\u0561\3\2\2\2\u0563")
        buf.write("\u0564\3\2\2\2\u0564[\3\2\2\2\u0565\u0563\3\2\2\2\u0566")
        buf.write("\u0567\t\17\2\2\u0567]\3\2\2\2\u0568\u0569\t\20\2\2\u0569")
        buf.write("_\3\2\2\2\u056a\u056e\7/\2\2\u056b\u056d\7n\2\2\u056c")
        buf.write("\u056b\3\2\2\2\u056d\u0570\3\2\2\2\u056e\u056c\3\2\2\2")
        buf.write("\u056e\u056f\3\2\2\2\u056f\u0571\3\2\2\2\u0570\u056e\3")
        buf.write("\2\2\2\u0571\u0575\78\2\2\u0572\u0574\7n\2\2\u0573\u0572")
        buf.write("\3\2\2\2\u0574\u0577\3\2\2\2\u0575\u0573\3\2\2\2\u0575")
        buf.write("\u0576\3\2\2\2\u0576\u057a\3\2\2\2\u0577\u0575\3\2\2\2")
        buf.write("\u0578\u057b\5t;\2\u0579\u057b\5\62\32\2\u057a\u0578\3")
        buf.write("\2\2\2\u057a\u0579\3\2\2\2\u057b\u057f\3\2\2\2\u057c\u057e")
        buf.write("\7n\2\2\u057d\u057c\3\2\2\2\u057e\u0581\3\2\2\2\u057f")
        buf.write("\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0582\3\2\2\2")
        buf.write("\u0581\u057f\3\2\2\2\u0582\u0583\79\2\2\u0583a\3\2\2\2")
        buf.write("\u0584\u0586\5h\65\2\u0585\u0584\3\2\2\2\u0585\u0586\3")
        buf.write("\2\2\2\u0586\u058a\3\2\2\2\u0587\u0589\7n\2\2\u0588\u0587")
        buf.write("\3\2\2\2\u0589\u058c\3\2\2\2\u058a\u0588\3\2\2\2\u058a")
        buf.write("\u058b\3\2\2\2\u058b\u058d\3\2\2\2\u058c\u058a\3\2\2\2")
        buf.write("\u058d\u058e\5d\63\2\u058ec\3\2\2\2\u058f\u0590\b\63\1")
        buf.write("\2\u0590\u05d1\7h\2\2\u0591\u0595\78\2\2\u0592\u0594\7")
        buf.write("n\2\2\u0593\u0592\3\2\2\2\u0594\u0597\3\2\2\2\u0595\u0593")
        buf.write("\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0598\3\2\2\2\u0597")
        buf.write("\u0595\3\2\2\2\u0598\u059c\5b\62\2\u0599\u059b\7n\2\2")
        buf.write("\u059a\u0599\3\2\2\2\u059b\u059e\3\2\2\2\u059c\u059a\3")
        buf.write("\2\2\2\u059c\u059d\3\2\2\2\u059d\u059f\3\2\2\2\u059e\u059c")
        buf.write("\3\2\2\2\u059f\u05a0\79\2\2\u05a0\u05d1\3\2\2\2\u05a1")
        buf.write("\u05a5\7h\2\2\u05a2\u05a4\7n\2\2\u05a3\u05a2\3\2\2\2\u05a4")
        buf.write("\u05a7\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a6\3\2\2\2")
        buf.write("\u05a6\u05a8\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a8\u05ac\7")
        buf.write("U\2\2\u05a9\u05ab\7n\2\2\u05aa\u05a9\3\2\2\2\u05ab\u05ae")
        buf.write("\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad")
        buf.write("\u05af\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af\u05d1\7j\2\2")
        buf.write("\u05b0\u05b4\78\2\2\u05b1\u05b3\7n\2\2\u05b2\u05b1\3\2")
        buf.write("\2\2\u05b3\u05b6\3\2\2\2\u05b4\u05b2\3\2\2\2\u05b4\u05b5")
        buf.write("\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b7")
        buf.write("\u05b9\5B\"\2\u05b8\u05b7\3\2\2\2\u05b8\u05b9\3\2\2\2")
        buf.write("\u05b9\u05bd\3\2\2\2\u05ba\u05bc\7n\2\2\u05bb\u05ba\3")
        buf.write("\2\2\2\u05bc\u05bf\3\2\2\2\u05bd\u05bb\3\2\2\2\u05bd\u05be")
        buf.write("\3\2\2\2\u05be\u05c0\3\2\2\2\u05bf\u05bd\3\2\2\2\u05c0")
        buf.write("\u05c4\5h\65\2\u05c1\u05c3\7n\2\2\u05c2\u05c1\3\2\2\2")
        buf.write("\u05c3\u05c6\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c4\u05c5\3")
        buf.write("\2\2\2\u05c5\u05c7\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c7\u05cb")
        buf.write("\5d\63\2\u05c8\u05ca\7n\2\2\u05c9\u05c8\3\2\2\2\u05ca")
        buf.write("\u05cd\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cb\u05cc\3\2\2\2")
        buf.write("\u05cc\u05ce\3\2\2\2\u05cd\u05cb\3\2\2\2\u05ce\u05cf\7")
        buf.write("9\2\2\u05cf\u05d1\3\2\2\2\u05d0\u058f\3\2\2\2\u05d0\u0591")
        buf.write("\3\2\2\2\u05d0\u05a1\3\2\2\2\u05d0\u05b0\3\2\2\2\u05d1")
        buf.write("\u0603\3\2\2\2\u05d2\u05d6\f\6\2\2\u05d3\u05d5\7n\2\2")
        buf.write("\u05d4\u05d3\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3")
        buf.write("\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05d6")
        buf.write("\3\2\2\2\u05d9\u05dd\78\2\2\u05da\u05dc\7n\2\2\u05db\u05da")
        buf.write("\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd")
        buf.write("\u05de\3\2\2\2\u05de\u05e0\3\2\2\2\u05df\u05dd\3\2\2\2")
        buf.write("\u05e0\u05e4\5l\67\2\u05e1\u05e3\7n\2\2\u05e2\u05e1\3")
        buf.write("\2\2\2\u05e3\u05e6\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5")
        buf.write("\3\2\2\2\u05e5\u05e7\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e7")
        buf.write("\u05e8\79\2\2\u05e8\u0602\3\2\2\2\u05e9\u05ed\f\5\2\2")
        buf.write("\u05ea\u05ec\7n\2\2\u05eb\u05ea\3\2\2\2\u05ec\u05ef\3")
        buf.write("\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f0")
        buf.write("\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0\u05f4\78\2\2\u05f1")
        buf.write("\u05f3\7n\2\2\u05f2\u05f1\3\2\2\2\u05f3\u05f6\3\2\2\2")
        buf.write("\u05f4\u05f2\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f8\3")
        buf.write("\2\2\2\u05f6\u05f4\3\2\2\2\u05f7\u05f9\5r:\2\u05f8\u05f7")
        buf.write("\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fd\3\2\2\2\u05fa")
        buf.write("\u05fc\7n\2\2\u05fb\u05fa\3\2\2\2\u05fc\u05ff\3\2\2\2")
        buf.write("\u05fd\u05fb\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u0600\3")
        buf.write("\2\2\2\u05ff\u05fd\3\2\2\2\u0600\u0602\79\2\2\u0601\u05d2")
        buf.write("\3\2\2\2\u0601\u05e9\3\2\2\2\u0602\u0605\3\2\2\2\u0603")
        buf.write("\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604e\3\2\2\2\u0605")
        buf.write("\u0603\3\2\2\2\u0606\u0618\n\21\2\2\u0607\u060b\78\2\2")
        buf.write("\u0608\u060a\7n\2\2\u0609\u0608\3\2\2\2\u060a\u060d\3")
        buf.write("\2\2\2\u060b\u0609\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e")
        buf.write("\3\2\2\2\u060d\u060b\3\2\2\2\u060e\u0612\5f\64\2\u060f")
        buf.write("\u0611\7n\2\2\u0610\u060f\3\2\2\2\u0611\u0614\3\2\2\2")
        buf.write("\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3")
        buf.write("\2\2\2\u0614\u0612\3\2\2\2\u0615\u0616\79\2\2\u0616\u0618")
        buf.write("\3\2\2\2\u0617\u0606\3\2\2\2\u0617\u0607\3\2\2\2\u0618")
        buf.write("\u061b\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a\3\2\2\2")
        buf.write("\u061ag\3\2\2\2\u061b\u0619\3\2\2\2\u061c\u0620\t\22\2")
        buf.write("\2\u061d\u061f\7n\2\2\u061e\u061d\3\2\2\2\u061f\u0622")
        buf.write("\3\2\2\2\u0620\u061e\3\2\2\2\u0620\u0621\3\2\2\2\u0621")
        buf.write("\u0624\3\2\2\2\u0622\u0620\3\2\2\2\u0623\u0625\5j\66\2")
        buf.write("\u0624\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0629\3")
        buf.write("\2\2\2\u0626\u0628\7n\2\2\u0627\u0626\3\2\2\2\u0628\u062b")
        buf.write("\3\2\2\2\u0629\u0627\3\2\2\2\u0629\u062a\3\2\2\2\u062a")
        buf.write("\u062d\3\2\2\2\u062b\u0629\3\2\2\2\u062c\u061c\3\2\2\2")
        buf.write("\u062d\u062e\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f\3")
        buf.write("\2\2\2\u062fi\3\2\2\2\u0630\u0632\5\\/\2\u0631\u0630\3")
        buf.write("\2\2\2\u0632\u0633\3\2\2\2\u0633\u0631\3\2\2\2\u0633\u0634")
        buf.write("\3\2\2\2\u0634k\3\2\2\2\u0635\u0639\5n8\2\u0636\u0638")
        buf.write("\7n\2\2\u0637\u0636\3\2\2\2\u0638\u063b\3\2\2\2\u0639")
        buf.write("\u0637\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u064a\3\2\2\2")
        buf.write("\u063b\u0639\3\2\2\2\u063c\u0640\7W\2\2\u063d\u063f\7")
        buf.write("n\2\2\u063e\u063d\3\2\2\2\u063f\u0642\3\2\2\2\u0640\u063e")
        buf.write("\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0643\3\2\2\2\u0642")
        buf.write("\u0640\3\2\2\2\u0643\u0647\7g\2\2\u0644\u0646\7n\2\2\u0645")
        buf.write("\u0644\3\2\2\2\u0646\u0649\3\2\2\2\u0647\u0645\3\2\2\2")
        buf.write("\u0647\u0648\3\2\2\2\u0648\u064b\3\2\2\2\u0649\u0647\3")
        buf.write("\2\2\2\u064a\u063c\3\2\2\2\u064a\u064b\3\2\2\2\u064bm")
        buf.write("\3\2\2\2\u064c\u0650\5p9\2\u064d\u064f\7n\2\2\u064e\u064d")
        buf.write("\3\2\2\2\u064f\u0652\3\2\2\2\u0650\u064e\3\2\2\2\u0650")
        buf.write("\u0651\3\2\2\2\u0651\u0663\3\2\2\2\u0652\u0650\3\2\2\2")
        buf.write("\u0653\u0657\7W\2\2\u0654\u0656\7n\2\2\u0655\u0654\3\2")
        buf.write("\2\2\u0656\u0659\3\2\2\2\u0657\u0655\3\2\2\2\u0657\u0658")
        buf.write("\3\2\2\2\u0658\u065a\3\2\2\2\u0659\u0657\3\2\2\2\u065a")
        buf.write("\u065e\5p9\2\u065b\u065d\7n\2\2\u065c\u065b\3\2\2\2\u065d")
        buf.write("\u0660\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065f\3\2\2\2")
        buf.write("\u065f\u0662\3\2\2\2\u0660\u065e\3\2\2\2\u0661\u0653\3")
        buf.write("\2\2\2\u0662\u0665\3\2\2\2\u0663\u0661\3\2\2\2\u0663\u0664")
        buf.write("\3\2\2\2\u0664o\3\2\2\2\u0665\u0663\3\2\2\2\u0666\u066a")
        buf.write("\5\66\34\2\u0667\u0669\7n\2\2\u0668\u0667\3\2\2\2\u0669")
        buf.write("\u066c\3\2\2\2\u066a\u0668\3\2\2\2\u066a\u066b\3\2\2\2")
        buf.write("\u066b\u066d\3\2\2\2\u066c\u066a\3\2\2\2\u066d\u066e\5")
        buf.write("b\62\2\u066e\u067a\3\2\2\2\u066f\u0673\5\66\34\2\u0670")
        buf.write("\u0672\7n\2\2\u0671\u0670\3\2\2\2\u0672\u0675\3\2\2\2")
        buf.write("\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0677\3")
        buf.write("\2\2\2\u0675\u0673\3\2\2\2\u0676\u0678\5v<\2\u0677\u0676")
        buf.write("\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\3\2\2\2\u0679")
        buf.write("\u0666\3\2\2\2\u0679\u066f\3\2\2\2\u067aq\3\2\2\2\u067b")
        buf.write("\u067f\7h\2\2\u067c\u067e\7n\2\2\u067d\u067c\3\2\2\2\u067e")
        buf.write("\u0681\3\2\2\2\u067f\u067d\3\2\2\2\u067f\u0680\3\2\2\2")
        buf.write("\u0680\u0692\3\2\2\2\u0681\u067f\3\2\2\2\u0682\u0686\7")
        buf.write("W\2\2\u0683\u0685\7n\2\2\u0684\u0683\3\2\2\2\u0685\u0688")
        buf.write("\3\2\2\2\u0686\u0684\3\2\2\2\u0686\u0687\3\2\2\2\u0687")
        buf.write("\u0689\3\2\2\2\u0688\u0686\3\2\2\2\u0689\u068d\7h\2\2")
        buf.write("\u068a\u068c\7n\2\2\u068b\u068a\3\2\2\2\u068c\u068f\3")
        buf.write("\2\2\2\u068d\u068b\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u0691")
        buf.write("\3\2\2\2\u068f\u068d\3\2\2\2\u0690\u0682\3\2\2\2\u0691")
        buf.write("\u0694\3\2\2\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2")
        buf.write("\u0693s\3\2\2\2\u0694\u0692\3\2\2\2\u0695\u0699\5L\'\2")
        buf.write("\u0696\u0698\7n\2\2\u0697\u0696\3\2\2\2\u0698\u069b\3")
        buf.write("\2\2\2\u0699\u0697\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069d")
        buf.write("\3\2\2\2\u069b\u0699\3\2\2\2\u069c\u069e\5v<\2\u069d\u069c")
        buf.write("\3\2\2\2\u069d\u069e\3\2\2\2\u069eu\3\2\2\2\u069f\u06ab")
        buf.write("\5h\65\2\u06a0\u06a2\5h\65\2\u06a1\u06a0\3\2\2\2\u06a1")
        buf.write("\u06a2\3\2\2\2\u06a2\u06a6\3\2\2\2\u06a3\u06a5\7n\2\2")
        buf.write("\u06a4\u06a3\3\2\2\2\u06a5\u06a8\3\2\2\2\u06a6\u06a4\3")
        buf.write("\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a9\3\2\2\2\u06a8\u06a6")
        buf.write("\3\2\2\2\u06a9\u06ab\5x=\2\u06aa\u069f\3\2\2\2\u06aa\u06a1")
        buf.write("\3\2\2\2\u06abw\3\2\2\2\u06ac\u06ad\b=\1\2\u06ad\u06b1")
        buf.write("\78\2\2\u06ae\u06b0\7n\2\2\u06af\u06ae\3\2\2\2\u06b0\u06b3")
        buf.write("\3\2\2\2\u06b1\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2")
        buf.write("\u06b4\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b4\u06b8\5v<\2\u06b5")
        buf.write("\u06b7\7n\2\2\u06b6\u06b5\3\2\2\2\u06b7\u06ba\3\2\2\2")
        buf.write("\u06b8\u06b6\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3")
        buf.write("\2\2\2\u06ba\u06b8\3\2\2\2\u06bb\u06bc\79\2\2\u06bc\u0736")
        buf.write("\3\2\2\2\u06bd\u06c1\7:\2\2\u06be\u06c0\7n\2\2\u06bf\u06be")
        buf.write("\3\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1")
        buf.write("\u06c2\3\2\2\2\u06c2\u06c5\3\2\2\2\u06c3\u06c1\3\2\2\2")
        buf.write("\u06c4\u06c6\5j\66\2\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3")
        buf.write("\2\2\2\u06c6\u06ca\3\2\2\2\u06c7\u06c9\7n\2\2\u06c8\u06c7")
        buf.write("\3\2\2\2\u06c9\u06cc\3\2\2\2\u06ca\u06c8\3\2\2\2\u06ca")
        buf.write("\u06cb\3\2\2\2\u06cb\u06ce\3\2\2\2\u06cc\u06ca\3\2\2\2")
        buf.write("\u06cd\u06cf\5,\27\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3")
        buf.write("\2\2\2\u06cf\u06d3\3\2\2\2\u06d0\u06d2\7n\2\2\u06d1\u06d0")
        buf.write("\3\2\2\2\u06d2\u06d5\3\2\2\2\u06d3\u06d1\3\2\2\2\u06d3")
        buf.write("\u06d4\3\2\2\2\u06d4\u06d6\3\2\2\2\u06d5\u06d3\3\2\2\2")
        buf.write("\u06d6\u0736\7;\2\2\u06d7\u06db\7:\2\2\u06d8\u06da\7n")
        buf.write("\2\2\u06d9\u06d8\3\2\2\2\u06da\u06dd\3\2\2\2\u06db\u06d9")
        buf.write("\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06de\3\2\2\2\u06dd")
        buf.write("\u06db\3\2\2\2\u06de\u06e2\7$\2\2\u06df\u06e1\7n\2\2\u06e0")
        buf.write("\u06df\3\2\2\2\u06e1\u06e4\3\2\2\2\u06e2\u06e0\3\2\2\2")
        buf.write("\u06e2\u06e3\3\2\2\2\u06e3\u06e6\3\2\2\2\u06e4\u06e2\3")
        buf.write("\2\2\2\u06e5\u06e7\5j\66\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7")
        buf.write("\3\2\2\2\u06e7\u06eb\3\2\2\2\u06e8\u06ea\7n\2\2\u06e9")
        buf.write("\u06e8\3\2\2\2\u06ea\u06ed\3\2\2\2\u06eb\u06e9\3\2\2\2")
        buf.write("\u06eb\u06ec\3\2\2\2\u06ec\u06ee\3\2\2\2\u06ed\u06eb\3")
        buf.write("\2\2\2\u06ee\u06f2\5,\27\2\u06ef\u06f1\7n\2\2\u06f0\u06ef")
        buf.write("\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2\u06f0\3\2\2\2\u06f2")
        buf.write("\u06f3\3\2\2\2\u06f3\u06f5\3\2\2\2\u06f4\u06f2\3\2\2\2")
        buf.write("\u06f5\u06f6\7;\2\2\u06f6\u0736\3\2\2\2\u06f7\u06fb\7")
        buf.write(":\2\2\u06f8\u06fa\7n\2\2\u06f9\u06f8\3\2\2\2\u06fa\u06fd")
        buf.write("\3\2\2\2\u06fb\u06f9\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc")
        buf.write("\u06fe\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fe\u0702\5j\66\2")
        buf.write("\u06ff\u0701\7n\2\2\u0700\u06ff\3\2\2\2\u0701\u0704\3")
        buf.write("\2\2\2\u0702\u0700\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0705")
        buf.write("\3\2\2\2\u0704\u0702\3\2\2\2\u0705\u0709\7$\2\2\u0706")
        buf.write("\u0708\7n\2\2\u0707\u0706\3\2\2\2\u0708\u070b\3\2\2\2")
        buf.write("\u0709\u0707\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u070c\3")
        buf.write("\2\2\2\u070b\u0709\3\2\2\2\u070c\u0710\5,\27\2\u070d\u070f")
        buf.write("\7n\2\2\u070e\u070d\3\2\2\2\u070f\u0712\3\2\2\2\u0710")
        buf.write("\u070e\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0713\3\2\2\2")
        buf.write("\u0712\u0710\3\2\2\2\u0713\u0714\7;\2\2\u0714\u0736\3")
        buf.write("\2\2\2\u0715\u0719\7:\2\2\u0716\u0718\7n\2\2\u0717\u0716")
        buf.write("\3\2\2\2\u0718\u071b\3\2\2\2\u0719\u0717\3\2\2\2\u0719")
        buf.write("\u071a\3\2\2\2\u071a\u071c\3\2\2\2\u071b\u0719\3\2\2\2")
        buf.write("\u071c\u0720\7H\2\2\u071d\u071f\7n\2\2\u071e\u071d\3\2")
        buf.write("\2\2\u071f\u0722\3\2\2\2\u0720\u071e\3\2\2\2\u0720\u0721")
        buf.write("\3\2\2\2\u0721\u0723\3\2\2\2\u0722\u0720\3\2\2\2\u0723")
        buf.write("\u0736\7;\2\2\u0724\u0728\78\2\2\u0725\u0727\7n\2\2\u0726")
        buf.write("\u0725\3\2\2\2\u0727\u072a\3\2\2\2\u0728\u0726\3\2\2\2")
        buf.write("\u0728\u0729\3\2\2\2\u0729\u072c\3\2\2\2\u072a\u0728\3")
        buf.write("\2\2\2\u072b\u072d\5l\67\2\u072c\u072b\3\2\2\2\u072c\u072d")
        buf.write("\3\2\2\2\u072d\u0731\3\2\2\2\u072e\u0730\7n\2\2\u072f")
        buf.write("\u072e\3\2\2\2\u0730\u0733\3\2\2\2\u0731\u072f\3\2\2\2")
        buf.write("\u0731\u0732\3\2\2\2\u0732\u0734\3\2\2\2\u0733\u0731\3")
        buf.write("\2\2\2\u0734\u0736\79\2\2\u0735\u06ac\3\2\2\2\u0735\u06bd")
        buf.write("\3\2\2\2\u0735\u06d7\3\2\2\2\u0735\u06f7\3\2\2\2\u0735")
        buf.write("\u0715\3\2\2\2\u0735\u0724\3\2\2\2\u0736\u07d4\3\2\2\2")
        buf.write("\u0737\u073b\f\7\2\2\u0738\u073a\7n\2\2\u0739\u0738\3")
        buf.write("\2\2\2\u073a\u073d\3\2\2\2\u073b\u0739\3\2\2\2\u073b\u073c")
        buf.write("\3\2\2\2\u073c\u073e\3\2\2\2\u073d\u073b\3\2\2\2\u073e")
        buf.write("\u0742\7:\2\2\u073f\u0741\7n\2\2\u0740\u073f\3\2\2\2\u0741")
        buf.write("\u0744\3\2\2\2\u0742\u0740\3\2\2\2\u0742\u0743\3\2\2\2")
        buf.write("\u0743\u0746\3\2\2\2\u0744\u0742\3\2\2\2\u0745\u0747\5")
        buf.write("j\66\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u074b")
        buf.write("\3\2\2\2\u0748\u074a\7n\2\2\u0749\u0748\3\2\2\2\u074a")
        buf.write("\u074d\3\2\2\2\u074b\u0749\3\2\2\2\u074b\u074c\3\2\2\2")
        buf.write("\u074c\u074f\3\2\2\2\u074d\u074b\3\2\2\2\u074e\u0750\5")
        buf.write(",\27\2\u074f\u074e\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0754")
        buf.write("\3\2\2\2\u0751\u0753\7n\2\2\u0752\u0751\3\2\2\2\u0753")
        buf.write("\u0756\3\2\2\2\u0754\u0752\3\2\2\2\u0754\u0755\3\2\2\2")
        buf.write("\u0755\u0757\3\2\2\2\u0756\u0754\3\2\2\2\u0757\u07d3\7")
        buf.write(";\2\2\u0758\u075c\f\6\2\2\u0759\u075b\7n\2\2\u075a\u0759")
        buf.write("\3\2\2\2\u075b\u075e\3\2\2\2\u075c\u075a\3\2\2\2\u075c")
        buf.write("\u075d\3\2\2\2\u075d\u075f\3\2\2\2\u075e\u075c\3\2\2\2")
        buf.write("\u075f\u0763\7:\2\2\u0760\u0762\7n\2\2\u0761\u0760\3\2")
        buf.write("\2\2\u0762\u0765\3\2\2\2\u0763\u0761\3\2\2\2\u0763\u0764")
        buf.write("\3\2\2\2\u0764\u0766\3\2\2\2\u0765\u0763\3\2\2\2\u0766")
        buf.write("\u076a\7$\2\2\u0767\u0769\7n\2\2\u0768\u0767\3\2\2\2\u0769")
        buf.write("\u076c\3\2\2\2\u076a\u0768\3\2\2\2\u076a\u076b\3\2\2\2")
        buf.write("\u076b\u076e\3\2\2\2\u076c\u076a\3\2\2\2\u076d\u076f\5")
        buf.write("j\66\2\u076e\u076d\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0773")
        buf.write("\3\2\2\2\u0770\u0772\7n\2\2\u0771\u0770\3\2\2\2\u0772")
        buf.write("\u0775\3\2\2\2\u0773\u0771\3\2\2\2\u0773\u0774\3\2\2\2")
        buf.write("\u0774\u0776\3\2\2\2\u0775\u0773\3\2\2\2\u0776\u077a\5")
        buf.write(",\27\2\u0777\u0779\7n\2\2\u0778\u0777\3\2\2\2\u0779\u077c")
        buf.write("\3\2\2\2\u077a\u0778\3\2\2\2\u077a\u077b\3\2\2\2\u077b")
        buf.write("\u077d\3\2\2\2\u077c\u077a\3\2\2\2\u077d\u077e\7;\2\2")
        buf.write("\u077e\u07d3\3\2\2\2\u077f\u0783\f\5\2\2\u0780\u0782\7")
        buf.write("n\2\2\u0781\u0780\3\2\2\2\u0782\u0785\3\2\2\2\u0783\u0781")
        buf.write("\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0786\3\2\2\2\u0785")
        buf.write("\u0783\3\2\2\2\u0786\u078a\7:\2\2\u0787\u0789\7n\2\2\u0788")
        buf.write("\u0787\3\2\2\2\u0789\u078c\3\2\2\2\u078a\u0788\3\2\2\2")
        buf.write("\u078a\u078b\3\2\2\2\u078b\u078d\3\2\2\2\u078c\u078a\3")
        buf.write("\2\2\2\u078d\u0791\5j\66\2\u078e\u0790\7n\2\2\u078f\u078e")
        buf.write("\3\2\2\2\u0790\u0793\3\2\2\2\u0791\u078f\3\2\2\2\u0791")
        buf.write("\u0792\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u0791\3\2\2\2")
        buf.write("\u0794\u0798\7$\2\2\u0795\u0797\7n\2\2\u0796\u0795\3\2")
        buf.write("\2\2\u0797\u079a\3\2\2\2\u0798\u0796\3\2\2\2\u0798\u0799")
        buf.write("\3\2\2\2\u0799\u079b\3\2\2\2\u079a\u0798\3\2\2\2\u079b")
        buf.write("\u079f\5,\27\2\u079c\u079e\7n\2\2\u079d\u079c\3\2\2\2")
        buf.write("\u079e\u07a1\3\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3")
        buf.write("\2\2\2\u07a0\u07a2\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a3")
        buf.write("\7;\2\2\u07a3\u07d3\3\2\2\2\u07a4\u07a8\f\4\2\2\u07a5")
        buf.write("\u07a7\7n\2\2\u07a6\u07a5\3\2\2\2\u07a7\u07aa\3\2\2\2")
        buf.write("\u07a8\u07a6\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07ab\3")
        buf.write("\2\2\2\u07aa\u07a8\3\2\2\2\u07ab\u07af\7:\2\2\u07ac\u07ae")
        buf.write("\7n\2\2\u07ad\u07ac\3\2\2\2\u07ae\u07b1\3\2\2\2\u07af")
        buf.write("\u07ad\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b2\3\2\2\2")
        buf.write("\u07b1\u07af\3\2\2\2\u07b2\u07b6\7H\2\2\u07b3\u07b5\7")
        buf.write("n\2\2\u07b4\u07b3\3\2\2\2\u07b5\u07b8\3\2\2\2\u07b6\u07b4")
        buf.write("\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b9\3\2\2\2\u07b8")
        buf.write("\u07b6\3\2\2\2\u07b9\u07d3\7;\2\2\u07ba\u07be\f\3\2\2")
        buf.write("\u07bb\u07bd\7n\2\2\u07bc\u07bb\3\2\2\2\u07bd\u07c0\3")
        buf.write("\2\2\2\u07be\u07bc\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c1")
        buf.write("\3\2\2\2\u07c0\u07be\3\2\2\2\u07c1\u07c5\78\2\2\u07c2")
        buf.write("\u07c4\7n\2\2\u07c3\u07c2\3\2\2\2\u07c4\u07c7\3\2\2\2")
        buf.write("\u07c5\u07c3\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c9\3")
        buf.write("\2\2\2\u07c7\u07c5\3\2\2\2\u07c8\u07ca\5l\67\2\u07c9\u07c8")
        buf.write("\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07ce\3\2\2\2\u07cb")
        buf.write("\u07cd\7n\2\2\u07cc\u07cb\3\2\2\2\u07cd\u07d0\3\2\2\2")
        buf.write("\u07ce\u07cc\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d1\3")
        buf.write("\2\2\2\u07d0\u07ce\3\2\2\2\u07d1\u07d3\79\2\2\u07d2\u0737")
        buf.write("\3\2\2\2\u07d2\u0758\3\2\2\2\u07d2\u077f\3\2\2\2\u07d2")
        buf.write("\u07a4\3\2\2\2\u07d2\u07ba\3\2\2\2\u07d3\u07d6\3\2\2\2")
        buf.write("\u07d4\u07d2\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5y\3\2\2")
        buf.write("\2\u07d6\u07d4\3\2\2\2\u07d7\u07d8\7h\2\2\u07d8{\3\2\2")
        buf.write("\2\u07d9\u07f5\5,\27\2\u07da\u07de\7<\2\2\u07db\u07dd")
        buf.write("\7n\2\2\u07dc\u07db\3\2\2\2\u07dd\u07e0\3\2\2\2\u07de")
        buf.write("\u07dc\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e2\3\2\2\2")
        buf.write("\u07e0\u07de\3\2\2\2\u07e1\u07e3\5~@\2\u07e2\u07e1\3\2")
        buf.write("\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e7\3\2\2\2\u07e4\u07e6")
        buf.write("\7n\2\2\u07e5\u07e4\3\2\2\2\u07e6\u07e9\3\2\2\2\u07e7")
        buf.write("\u07e5\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8\u07eb\3\2\2\2")
        buf.write("\u07e9\u07e7\3\2\2\2\u07ea\u07ec\7W\2\2\u07eb\u07ea\3")
        buf.write("\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07f0\3\2\2\2\u07ed\u07ef")
        buf.write("\7n\2\2\u07ee\u07ed\3\2\2\2\u07ef\u07f2\3\2\2\2\u07f0")
        buf.write("\u07ee\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f3\3\2\2\2")
        buf.write("\u07f2\u07f0\3\2\2\2\u07f3\u07f5\7=\2\2\u07f4\u07d9\3")
        buf.write("\2\2\2\u07f4\u07da\3\2\2\2\u07f5}\3\2\2\2\u07f6\u07f8")
        buf.write("\5\u0080A\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8")
        buf.write("\u07fc\3\2\2\2\u07f9\u07fb\7n\2\2\u07fa\u07f9\3\2\2\2")
        buf.write("\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3\2\2\2\u07fc\u07fd\3")
        buf.write("\2\2\2\u07fd\u07ff\3\2\2\2\u07fe\u07fc\3\2\2\2\u07ff\u0803")
        buf.write("\5|?\2\u0800\u0802\7n\2\2\u0801\u0800\3\2\2\2\u0802\u0805")
        buf.write("\3\2\2\2\u0803\u0801\3\2\2\2\u0803\u0804\3\2\2\2\u0804")
        buf.write("\u081f\3\2\2\2\u0805\u0803\3\2\2\2\u0806\u080a\7W\2\2")
        buf.write("\u0807\u0809\7n\2\2\u0808\u0807\3\2\2\2\u0809\u080c\3")
        buf.write("\2\2\2\u080a\u0808\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080e")
        buf.write("\3\2\2\2\u080c\u080a\3\2\2\2\u080d\u080f\5\u0080A\2\u080e")
        buf.write("\u080d\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0813\3\2\2\2")
        buf.write("\u0810\u0812\7n\2\2\u0811\u0810\3\2\2\2\u0812\u0815\3")
        buf.write("\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0816")
        buf.write("\3\2\2\2\u0815\u0813\3\2\2\2\u0816\u081a\5|?\2\u0817\u0819")
        buf.write("\7n\2\2\u0818\u0817\3\2\2\2\u0819\u081c\3\2\2\2\u081a")
        buf.write("\u0818\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081e\3\2\2\2")
        buf.write("\u081c\u081a\3\2\2\2\u081d\u0806\3\2\2\2\u081e\u0821\3")
        buf.write("\2\2\2\u081f\u081d\3\2\2\2\u081f\u0820\3\2\2\2\u0820\177")
        buf.write("\3\2\2\2\u0821\u081f\3\2\2\2\u0822\u0826\5\u0082B\2\u0823")
        buf.write("\u0825\7n\2\2\u0824\u0823\3\2\2\2\u0825\u0828\3\2\2\2")
        buf.write("\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0829\3")
        buf.write("\2\2\2\u0828\u0826\3\2\2\2\u0829\u082a\7X\2\2\u082a\u0081")
        buf.write("\3\2\2\2\u082b\u082d\5\u0084C\2\u082c\u082b\3\2\2\2\u082d")
        buf.write("\u082e\3\2\2\2\u082e\u082c\3\2\2\2\u082e\u082f\3\2\2\2")
        buf.write("\u082f\u0083\3\2\2\2\u0830\u0834\7:\2\2\u0831\u0833\7")
        buf.write("n\2\2\u0832\u0831\3\2\2\2\u0833\u0836\3\2\2\2\u0834\u0832")
        buf.write("\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0837\3\2\2\2\u0836")
        buf.write("\u0834\3\2\2\2\u0837\u083b\5\62\32\2\u0838\u083a\7n\2")
        buf.write("\2\u0839\u0838\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839")
        buf.write("\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083e\3\2\2\2\u083d")
        buf.write("\u083b\3\2\2\2\u083e\u083f\7;\2\2\u083f\u0849\3\2\2\2")
        buf.write("\u0840\u0844\7f\2\2\u0841\u0843\7n\2\2\u0842\u0841\3\2")
        buf.write("\2\2\u0843\u0846\3\2\2\2\u0844\u0842\3\2\2\2\u0844\u0845")
        buf.write("\3\2\2\2\u0845\u0847\3\2\2\2\u0846\u0844\3\2\2\2\u0847")
        buf.write("\u0849\7h\2\2\u0848\u0830\3\2\2\2\u0848\u0840\3\2\2\2")
        buf.write("\u0849\u0085\3\2\2\2\u084a\u084e\7\66\2\2\u084b\u084d")
        buf.write("\7n\2\2\u084c\u084b\3\2\2\2\u084d\u0850\3\2\2\2\u084e")
        buf.write("\u084c\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0851\3\2\2\2")
        buf.write("\u0850\u084e\3\2\2\2\u0851\u0855\78\2\2\u0852\u0854\7")
        buf.write("n\2\2\u0853\u0852\3\2\2\2\u0854\u0857\3\2\2\2\u0855\u0853")
        buf.write("\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0858\3\2\2\2\u0857")
        buf.write("\u0855\3\2\2\2\u0858\u085c\5\62\32\2\u0859\u085b\7n\2")
        buf.write("\2\u085a\u0859\3\2\2\2\u085b\u085e\3\2\2\2\u085c\u085a")
        buf.write("\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085f\3\2\2\2\u085e")
        buf.write("\u085c\3\2\2\2\u085f\u0863\7W\2\2\u0860\u0862\7n\2\2\u0861")
        buf.write("\u0860\3\2\2\2\u0862\u0865\3\2\2\2\u0863\u0861\3\2\2\2")
        buf.write("\u0863\u0864\3\2\2\2\u0864\u0867\3\2\2\2\u0865\u0863\3")
        buf.write("\2\2\2\u0866\u0868\7k\2\2\u0867\u0866\3\2\2\2\u0868\u0869")
        buf.write("\3\2\2\2\u0869\u0867\3\2\2\2\u0869\u086a\3\2\2\2\u086a")
        buf.write("\u086e\3\2\2\2\u086b\u086d\7n\2\2\u086c\u086b\3\2\2\2")
        buf.write("\u086d\u0870\3\2\2\2\u086e\u086c\3\2\2\2\u086e\u086f\3")
        buf.write("\2\2\2\u086f\u0871\3\2\2\2\u0870\u086e\3\2\2\2\u0871\u0872")
        buf.write("\79\2\2\u0872\u0873\5\u00bc_\2\u0873\u0087\3\2\2\2\u0874")
        buf.write("\u08cf\5\u008aF\2\u0875\u08cf\5\u008cG\2\u0876\u08cf\5")
        buf.write("\u0092J\2\u0877\u08cf\5\u0094K\2\u0878\u08cf\5\u009cO")
        buf.write("\2\u0879\u08cf\5\u009eP\2\u087a\u08cf\5\u00a6T\2\u087b")
        buf.write("\u087f\78\2\2\u087c\u087e\7n\2\2\u087d\u087c\3\2\2\2\u087e")
        buf.write("\u0881\3\2\2\2\u087f\u087d\3\2\2\2\u087f\u0880\3\2\2\2")
        buf.write("\u0880\u089c\3\2\2\2\u0881\u087f\3\2\2\2\u0882\u0886\5")
        buf.write("(\25\2\u0883\u0885\7n\2\2\u0884\u0883\3\2\2\2\u0885\u0888")
        buf.write("\3\2\2\2\u0886\u0884\3\2\2\2\u0886\u0887\3\2\2\2\u0887")
        buf.write("\u0899\3\2\2\2\u0888\u0886\3\2\2\2\u0889\u088d\7W\2\2")
        buf.write("\u088a\u088c\7n\2\2\u088b\u088a\3\2\2\2\u088c\u088f\3")
        buf.write("\2\2\2\u088d\u088b\3\2\2\2\u088d\u088e\3\2\2\2\u088e\u0890")
        buf.write("\3\2\2\2\u088f\u088d\3\2\2\2\u0890\u0894\5(\25\2\u0891")
        buf.write("\u0893\7n\2\2\u0892\u0891\3\2\2\2\u0893\u0896\3\2\2\2")
        buf.write("\u0894\u0892\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u0898\3")
        buf.write("\2\2\2\u0896\u0894\3\2\2\2\u0897\u0889\3\2\2\2\u0898\u089b")
        buf.write("\3\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2\2\2\u089a")
        buf.write("\u089d\3\2\2\2\u089b\u0899\3\2\2\2\u089c\u0882\3\2\2\2")
        buf.write("\u089c\u089d\3\2\2\2\u089d\u08a1\3\2\2\2\u089e\u08a0\7")
        buf.write("n\2\2\u089f\u089e\3\2\2\2\u08a0\u08a3\3\2\2\2\u08a1\u089f")
        buf.write("\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u08c3\3\2\2\2\u08a3")
        buf.write("\u08a1\3\2\2\2\u08a4\u08a8\7U\2\2\u08a5\u08a7\7n\2\2\u08a6")
        buf.write("\u08a5\3\2\2\2\u08a7\u08aa\3\2\2\2\u08a8\u08a6\3\2\2\2")
        buf.write("\u08a8\u08a9\3\2\2\2\u08a9\u08bf\3\2\2\2\u08aa\u08a8\3")
        buf.write("\2\2\2\u08ab\u08af\5(\25\2\u08ac\u08ae\7n\2\2\u08ad\u08ac")
        buf.write("\3\2\2\2\u08ae\u08b1\3\2\2\2\u08af\u08ad\3\2\2\2\u08af")
        buf.write("\u08b0\3\2\2\2\u08b0\u08bc\3\2\2\2\u08b1\u08af\3\2\2\2")
        buf.write("\u08b2\u08b6\7W\2\2\u08b3\u08b5\7n\2\2\u08b4\u08b3\3\2")
        buf.write("\2\2\u08b5\u08b8\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b6\u08b7")
        buf.write("\3\2\2\2\u08b7\u08b9\3\2\2\2\u08b8\u08b6\3\2\2\2\u08b9")
        buf.write("\u08bb\5(\25\2\u08ba\u08b2\3\2\2\2\u08bb\u08be\3\2\2\2")
        buf.write("\u08bc\u08ba\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08c0\3")
        buf.write("\2\2\2\u08be\u08bc\3\2\2\2\u08bf\u08ab\3\2\2\2\u08bf\u08c0")
        buf.write("\3\2\2\2\u08c0\u08c2\3\2\2\2\u08c1\u08a4\3\2\2\2\u08c2")
        buf.write("\u08c5\3\2\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c4\3\2\2\2")
        buf.write("\u08c4\u08c9\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u08c8\7")
        buf.write("n\2\2\u08c7\u08c6\3\2\2\2\u08c8\u08cb\3\2\2\2\u08c9\u08c7")
        buf.write("\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb")
        buf.write("\u08c9\3\2\2\2\u08cc\u08cd\79\2\2\u08cd\u08cf\5\u00bc")
        buf.write("_\2\u08ce\u0874\3\2\2\2\u08ce\u0875\3\2\2\2\u08ce\u0876")
        buf.write("\3\2\2\2\u08ce\u0877\3\2\2\2\u08ce\u0878\3\2\2\2\u08ce")
        buf.write("\u0879\3\2\2\2\u08ce\u087a\3\2\2\2\u08ce\u087b\3\2\2\2")
        buf.write("\u08cf\u0089\3\2\2\2\u08d0\u08d4\7h\2\2\u08d1\u08d3\7")
        buf.write("n\2\2\u08d2\u08d1\3\2\2\2\u08d3\u08d6\3\2\2\2\u08d4\u08d2")
        buf.write("\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d7\3\2\2\2\u08d6")
        buf.write("\u08d4\3\2\2\2\u08d7\u08db\7U\2\2\u08d8\u08da\7n\2\2\u08d9")
        buf.write("\u08d8\3\2\2\2\u08da\u08dd\3\2\2\2\u08db\u08d9\3\2\2\2")
        buf.write("\u08db\u08dc\3\2\2\2\u08dc\u08de\3\2\2\2\u08dd\u08db\3")
        buf.write("\2\2\2\u08de\u0906\5\u0088E\2\u08df\u08e3\7\t\2\2\u08e0")
        buf.write("\u08e2\7n\2\2\u08e1\u08e0\3\2\2\2\u08e2\u08e5\3\2\2\2")
        buf.write("\u08e3\u08e1\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e6\3")
        buf.write("\2\2\2\u08e5\u08e3\3\2\2\2\u08e6\u08ea\5\62\32\2\u08e7")
        buf.write("\u08e9\7n\2\2\u08e8\u08e7\3\2\2\2\u08e9\u08ec\3\2\2\2")
        buf.write("\u08ea\u08e8\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ed\3")
        buf.write("\2\2\2\u08ec\u08ea\3\2\2\2\u08ed\u08f1\7U\2\2\u08ee\u08f0")
        buf.write("\7n\2\2\u08ef\u08ee\3\2\2\2\u08f0\u08f3\3\2\2\2\u08f1")
        buf.write("\u08ef\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f4\3\2\2\2")
        buf.write("\u08f3\u08f1\3\2\2\2\u08f4\u08f5\5\u0088E\2\u08f5\u0906")
        buf.write("\3\2\2\2\u08f6\u08fa\7\r\2\2\u08f7\u08f9\7n\2\2\u08f8")
        buf.write("\u08f7\3\2\2\2\u08f9\u08fc\3\2\2\2\u08fa\u08f8\3\2\2\2")
        buf.write("\u08fa\u08fb\3\2\2\2\u08fb\u08fd\3\2\2\2\u08fc\u08fa\3")
        buf.write("\2\2\2\u08fd\u0901\7U\2\2\u08fe\u0900\7n\2\2\u08ff\u08fe")
        buf.write("\3\2\2\2\u0900\u0903\3\2\2\2\u0901\u08ff\3\2\2\2\u0901")
        buf.write("\u0902\3\2\2\2\u0902\u0904\3\2\2\2\u0903\u0901\3\2\2\2")
        buf.write("\u0904\u0906\5\u0088E\2\u0905\u08d0\3\2\2\2\u0905\u08df")
        buf.write("\3\2\2\2\u0905\u08f6\3\2\2\2\u0906\u008b\3\2\2\2\u0907")
        buf.write("\u090b\7<\2\2\u0908\u090a\7n\2\2\u0909\u0908\3\2\2\2\u090a")
        buf.write("\u090d\3\2\2\2\u090b\u0909\3\2\2\2\u090b\u090c\3\2\2\2")
        buf.write("\u090c\u090f\3\2\2\2\u090d\u090b\3\2\2\2\u090e\u0910\5")
        buf.write("\u008eH\2\u090f\u090e\3\2\2\2\u090f\u0910\3\2\2\2\u0910")
        buf.write("\u0914\3\2\2\2\u0911\u0913\7n\2\2\u0912\u0911\3\2\2\2")
        buf.write("\u0913\u0916\3\2\2\2\u0914\u0912\3\2\2\2\u0914\u0915\3")
        buf.write("\2\2\2\u0915\u0917\3\2\2\2\u0916\u0914\3\2\2\2\u0917\u0918")
        buf.write("\7=\2\2\u0918\u008d\3\2\2\2\u0919\u091b\5\u0090I\2\u091a")
        buf.write("\u0919\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091a\3\2\2\2")
        buf.write("\u091c\u091d\3\2\2\2\u091d\u008f\3\2\2\2\u091e\u0920\7")
        buf.write("n\2\2\u091f\u091e\3\2\2\2\u0920\u0923\3\2\2\2\u0921\u091f")
        buf.write("\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0926\3\2\2\2\u0923")
        buf.write("\u0921\3\2\2\2\u0924\u0927\5\u0088E\2\u0925\u0927\5\64")
        buf.write("\33\2\u0926\u0924\3\2\2\2\u0926\u0925\3\2\2\2\u0927\u092b")
        buf.write("\3\2\2\2\u0928\u092a\7n\2\2\u0929\u0928\3\2\2\2\u092a")
        buf.write("\u092d\3\2\2\2\u092b\u0929\3\2\2\2\u092b\u092c\3\2\2\2")
        buf.write("\u092c\u0091\3\2\2\2\u092d\u092b\3\2\2\2\u092e\u0930\5")
        buf.write("\60\31\2\u092f\u092e\3\2\2\2\u092f\u0930\3\2\2\2\u0930")
        buf.write("\u0931\3\2\2\2\u0931\u0932\5\u00bc_\2\u0932\u0093\3\2")
        buf.write("\2\2\u0933\u0937\7\3\2\2\u0934\u0936\7n\2\2\u0935\u0934")
        buf.write("\3\2\2\2\u0936\u0939\3\2\2\2\u0937\u0935\3\2\2\2\u0937")
        buf.write("\u0938\3\2\2\2\u0938\u093a\3\2\2\2\u0939\u0937\3\2\2\2")
        buf.write("\u093a\u093e\5\u008cG\2\u093b\u093d\7n\2\2\u093c\u093b")
        buf.write("\3\2\2\2\u093d\u0940\3\2\2\2\u093e\u093c\3\2\2\2\u093e")
        buf.write("\u093f\3\2\2\2\u093f\u0942\3\2\2\2\u0940\u093e\3\2\2\2")
        buf.write("\u0941\u0943\5\u0096L\2\u0942\u0941\3\2\2\2\u0943\u0944")
        buf.write("\3\2\2\2\u0944\u0942\3\2\2\2\u0944\u0945\3\2\2\2\u0945")
        buf.write("\u0949\3\2\2\2\u0946\u0948\7n\2\2\u0947\u0946\3\2\2\2")
        buf.write("\u0948\u094b\3\2\2\2\u0949\u0947\3\2\2\2\u0949\u094a\3")
        buf.write("\2\2\2\u094a\u096c\3\2\2\2\u094b\u0949\3\2\2\2\u094c\u0950")
        buf.write("\5\u0098M\2\u094d\u094f\7n\2\2\u094e\u094d\3\2\2\2\u094f")
        buf.write("\u0952\3\2\2\2\u0950\u094e\3\2\2\2\u0950\u0951\3\2\2\2")
        buf.write("\u0951\u0954\3\2\2\2\u0952\u0950\3\2\2\2\u0953\u0955\5")
        buf.write("\u009aN\2\u0954\u0953\3\2\2\2\u0954\u0955\3\2\2\2\u0955")
        buf.write("\u0959\3\2\2\2\u0956\u0958\7n\2\2\u0957\u0956\3\2\2\2")
        buf.write("\u0958\u095b\3\2\2\2\u0959\u0957\3\2\2\2\u0959\u095a\3")
        buf.write("\2\2\2\u095a\u096d\3\2\2\2\u095b\u0959\3\2\2\2\u095c\u0960")
        buf.write("\5\u009aN\2\u095d\u095f\7n\2\2\u095e\u095d\3\2\2\2\u095f")
        buf.write("\u0962\3\2\2\2\u0960\u095e\3\2\2\2\u0960\u0961\3\2\2\2")
        buf.write("\u0961\u0964\3\2\2\2\u0962\u0960\3\2\2\2\u0963\u0965\5")
        buf.write("\u0098M\2\u0964\u0963\3\2\2\2\u0964\u0965\3\2\2\2\u0965")
        buf.write("\u0969\3\2\2\2\u0966\u0968\7n\2\2\u0967\u0966\3\2\2\2")
        buf.write("\u0968\u096b\3\2\2\2\u0969\u0967\3\2\2\2\u0969\u096a\3")
        buf.write("\2\2\2\u096a\u096d\3\2\2\2\u096b\u0969\3\2\2\2\u096c\u094c")
        buf.write("\3\2\2\2\u096c\u095c\3\2\2\2\u096c\u096d\3\2\2\2\u096d")
        buf.write("\u0095\3\2\2\2\u096e\u0972\7\4\2\2\u096f\u0971\7n\2\2")
        buf.write("\u0970\u096f\3\2\2\2\u0971\u0974\3\2\2\2\u0972\u0970\3")
        buf.write("\2\2\2\u0972\u0973\3\2\2\2\u0973\u0975\3\2\2\2\u0974\u0972")
        buf.write("\3\2\2\2\u0975\u0979\78\2\2\u0976\u0978\7n\2\2\u0977\u0976")
        buf.write("\3\2\2\2\u0978\u097b\3\2\2\2\u0979\u0977\3\2\2\2\u0979")
        buf.write("\u097a\3\2\2\2\u097a\u097e\3\2\2\2\u097b\u0979\3\2\2\2")
        buf.write("\u097c\u097f\7h\2\2\u097d\u097f\5r:\2\u097e\u097c\3\2")
        buf.write("\2\2\u097e\u097d\3\2\2\2\u097f\u0983\3\2\2\2\u0980\u0982")
        buf.write("\7n\2\2\u0981\u0980\3\2\2\2\u0982\u0985\3\2\2\2\u0983")
        buf.write("\u0981\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0986\3\2\2\2")
        buf.write("\u0985\u0983\3\2\2\2\u0986\u098a\79\2\2\u0987\u0989\7")
        buf.write("n\2\2\u0988\u0987\3\2\2\2\u0989\u098c\3\2\2\2\u098a\u0988")
        buf.write("\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u0995\3\2\2\2\u098c")
        buf.write("\u098a\3\2\2\2\u098d\u0991\7\6\2\2\u098e\u0990\7n\2\2")
        buf.write("\u098f\u098e\3\2\2\2\u0990\u0993\3\2\2\2\u0991\u098f\3")
        buf.write("\2\2\2\u0991\u0992\3\2\2\2\u0992\u0994\3\2\2\2\u0993\u0991")
        buf.write("\3\2\2\2\u0994\u0996\7h\2\2\u0995\u098d\3\2\2\2\u0995")
        buf.write("\u0996\3\2\2\2\u0996\u099a\3\2\2\2\u0997\u0999\7n\2\2")
        buf.write("\u0998\u0997\3\2\2\2\u0999\u099c\3\2\2\2\u099a\u0998\3")
        buf.write("\2\2\2\u099a\u099b\3\2\2\2\u099b\u099d\3\2\2\2\u099c\u099a")
        buf.write("\3\2\2\2\u099d\u099e\5\u008cG\2\u099e\u0097\3\2\2\2\u099f")
        buf.write("\u09a3\7\5\2\2\u09a0\u09a2\7n\2\2\u09a1\u09a0\3\2\2\2")
        buf.write("\u09a2\u09a5\3\2\2\2\u09a3\u09a1\3\2\2\2\u09a3\u09a4\3")
        buf.write("\2\2\2\u09a4\u09a6\3\2\2\2\u09a5\u09a3\3\2\2\2\u09a6\u09a7")
        buf.write("\5\u008cG\2\u09a7\u0099\3\2\2\2\u09a8\u09ac\7\20\2\2\u09a9")
        buf.write("\u09ab\7n\2\2\u09aa\u09a9\3\2\2\2\u09ab\u09ae\3\2\2\2")
        buf.write("\u09ac\u09aa\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09af\3")
        buf.write("\2\2\2\u09ae\u09ac\3\2\2\2\u09af\u09b0\5\u008cG\2\u09b0")
        buf.write("\u009b\3\2\2\2\u09b1\u09b5\7\30\2\2\u09b2\u09b4\7n\2\2")
        buf.write("\u09b3\u09b2\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b3\3")
        buf.write("\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b8\3\2\2\2\u09b7\u09b5")
        buf.write("\3\2\2\2\u09b8\u09bc\78\2\2\u09b9\u09bb\7n\2\2\u09ba\u09b9")
        buf.write("\3\2\2\2\u09bb\u09be\3\2\2\2\u09bc\u09ba\3\2\2\2\u09bc")
        buf.write("\u09bd\3\2\2\2\u09bd\u09bf\3\2\2\2\u09be\u09bc\3\2\2\2")
        buf.write("\u09bf\u09c3\5\60\31\2\u09c0\u09c2\7n\2\2\u09c1\u09c0")
        buf.write("\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3\u09c1\3\2\2\2\u09c3")
        buf.write("\u09c4\3\2\2\2\u09c4\u09c6\3\2\2\2\u09c5\u09c3\3\2\2\2")
        buf.write("\u09c6\u09ca\79\2\2\u09c7\u09c9\7n\2\2\u09c8\u09c7\3\2")
        buf.write("\2\2\u09c9\u09cc\3\2\2\2\u09ca\u09c8\3\2\2\2\u09ca\u09cb")
        buf.write("\3\2\2\2\u09cb\u09cd\3\2\2\2\u09cc\u09ca\3\2\2\2\u09cd")
        buf.write("\u09d1\5\u0088E\2\u09ce\u09d0\7n\2\2\u09cf\u09ce\3\2\2")
        buf.write("\2\u09d0\u09d3\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d1\u09d2")
        buf.write("\3\2\2\2\u09d2\u09dc\3\2\2\2\u09d3\u09d1\3\2\2\2\u09d4")
        buf.write("\u09d8\7\20\2\2\u09d5\u09d7\7n\2\2\u09d6\u09d5\3\2\2\2")
        buf.write("\u09d7\u09da\3\2\2\2\u09d8\u09d6\3\2\2\2\u09d8\u09d9\3")
        buf.write("\2\2\2\u09d9\u09db\3\2\2\2\u09da\u09d8\3\2\2\2\u09db\u09dd")
        buf.write("\5\u0088E\2\u09dc\u09d4\3\2\2\2\u09dc\u09dd\3\2\2\2\u09dd")
        buf.write("\u09fd\3\2\2\2\u09de\u09e2\7\'\2\2\u09df\u09e1\7n\2\2")
        buf.write("\u09e0\u09df\3\2\2\2\u09e1\u09e4\3\2\2\2\u09e2\u09e0\3")
        buf.write("\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e5\3\2\2\2\u09e4\u09e2")
        buf.write("\3\2\2\2\u09e5\u09e9\78\2\2\u09e6\u09e8\7n\2\2\u09e7\u09e6")
        buf.write("\3\2\2\2\u09e8\u09eb\3\2\2\2\u09e9\u09e7\3\2\2\2\u09e9")
        buf.write("\u09ea\3\2\2\2\u09ea\u09ec\3\2\2\2\u09eb\u09e9\3\2\2\2")
        buf.write("\u09ec\u09f0\5\60\31\2\u09ed\u09ef\7n\2\2\u09ee\u09ed")
        buf.write("\3\2\2\2\u09ef\u09f2\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f0")
        buf.write("\u09f1\3\2\2\2\u09f1\u09f3\3\2\2\2\u09f2\u09f0\3\2\2\2")
        buf.write("\u09f3\u09f7\79\2\2\u09f4\u09f6\7n\2\2\u09f5\u09f4\3\2")
        buf.write("\2\2\u09f6\u09f9\3\2\2\2\u09f7\u09f5\3\2\2\2\u09f7\u09f8")
        buf.write("\3\2\2\2\u09f8\u09fa\3\2\2\2\u09f9\u09f7\3\2\2\2\u09fa")
        buf.write("\u09fb\5\u0088E\2\u09fb\u09fd\3\2\2\2\u09fc\u09b1\3\2")
        buf.write("\2\2\u09fc\u09de\3\2\2\2\u09fd\u009d\3\2\2\2\u09fe\u0a02")
        buf.write("\7.\2\2\u09ff\u0a01\7n\2\2\u0a00\u09ff\3\2\2\2\u0a01\u0a04")
        buf.write("\3\2\2\2\u0a02\u0a00\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03")
        buf.write("\u0a05\3\2\2\2\u0a04\u0a02\3\2\2\2\u0a05\u0a09\78\2\2")
        buf.write("\u0a06\u0a08\7n\2\2\u0a07\u0a06\3\2\2\2\u0a08\u0a0b\3")
        buf.write("\2\2\2\u0a09\u0a07\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0c")
        buf.write("\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0c\u0a10\5\60\31\2\u0a0d")
        buf.write("\u0a0f\7n\2\2\u0a0e\u0a0d\3\2\2\2\u0a0f\u0a12\3\2\2\2")
        buf.write("\u0a10\u0a0e\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a13\3")
        buf.write("\2\2\2\u0a12\u0a10\3\2\2\2\u0a13\u0a17\79\2\2\u0a14\u0a16")
        buf.write("\7n\2\2\u0a15\u0a14\3\2\2\2\u0a16\u0a19\3\2\2\2\u0a17")
        buf.write("\u0a15\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a1a\3\2\2\2")
        buf.write("\u0a19\u0a17\3\2\2\2\u0a1a\u0a1b\5\u0088E\2\u0a1b\u0a61")
        buf.write("\3\2\2\2\u0a1c\u0a20\7\16\2\2\u0a1d\u0a1f\7n\2\2\u0a1e")
        buf.write("\u0a1d\3\2\2\2\u0a1f\u0a22\3\2\2\2\u0a20\u0a1e\3\2\2\2")
        buf.write("\u0a20\u0a21\3\2\2\2\u0a21\u0a23\3\2\2\2\u0a22\u0a20\3")
        buf.write("\2\2\2\u0a23\u0a27\5\u0088E\2\u0a24\u0a26\7n\2\2\u0a25")
        buf.write("\u0a24\3\2\2\2\u0a26\u0a29\3\2\2\2\u0a27\u0a25\3\2\2\2")
        buf.write("\u0a27\u0a28\3\2\2\2\u0a28\u0a2a\3\2\2\2\u0a29\u0a27\3")
        buf.write("\2\2\2\u0a2a\u0a2e\7.\2\2\u0a2b\u0a2d\7n\2\2\u0a2c\u0a2b")
        buf.write("\3\2\2\2\u0a2d\u0a30\3\2\2\2\u0a2e\u0a2c\3\2\2\2\u0a2e")
        buf.write("\u0a2f\3\2\2\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a2e\3\2\2\2")
        buf.write("\u0a31\u0a35\78\2\2\u0a32\u0a34\7n\2\2\u0a33\u0a32\3\2")
        buf.write("\2\2\u0a34\u0a37\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a35\u0a36")
        buf.write("\3\2\2\2\u0a36\u0a38\3\2\2\2\u0a37\u0a35\3\2\2\2\u0a38")
        buf.write("\u0a3c\5\60\31\2\u0a39\u0a3b\7n\2\2\u0a3a\u0a39\3\2\2")
        buf.write("\2\u0a3b\u0a3e\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3d")
        buf.write("\3\2\2\2\u0a3d\u0a3f\3\2\2\2\u0a3e\u0a3c\3\2\2\2\u0a3f")
        buf.write("\u0a40\79\2\2\u0a40\u0a41\5\u00bc_\2\u0a41\u0a61\3\2\2")
        buf.write("\2\u0a42\u0a46\7\26\2\2\u0a43\u0a45\7n\2\2\u0a44\u0a43")
        buf.write("\3\2\2\2\u0a45\u0a48\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46")
        buf.write("\u0a47\3\2\2\2\u0a47\u0a49\3\2\2\2\u0a48\u0a46\3\2\2\2")
        buf.write("\u0a49\u0a4d\78\2\2\u0a4a\u0a4c\7n\2\2\u0a4b\u0a4a\3\2")
        buf.write("\2\2\u0a4c\u0a4f\3\2\2\2\u0a4d\u0a4b\3\2\2\2\u0a4d\u0a4e")
        buf.write("\3\2\2\2\u0a4e\u0a50\3\2\2\2\u0a4f\u0a4d\3\2\2\2\u0a50")
        buf.write("\u0a54\5\u00a0Q\2\u0a51\u0a53\7n\2\2\u0a52\u0a51\3\2\2")
        buf.write("\2\u0a53\u0a56\3\2\2\2\u0a54\u0a52\3\2\2\2\u0a54\u0a55")
        buf.write("\3\2\2\2\u0a55\u0a57\3\2\2\2\u0a56\u0a54\3\2\2\2\u0a57")
        buf.write("\u0a5b\79\2\2\u0a58\u0a5a\7n\2\2\u0a59\u0a58\3\2\2\2\u0a5a")
        buf.write("\u0a5d\3\2\2\2\u0a5b\u0a59\3\2\2\2\u0a5b\u0a5c\3\2\2\2")
        buf.write("\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a5b\3\2\2\2\u0a5e\u0a5f\5")
        buf.write("\u0088E\2\u0a5f\u0a61\3\2\2\2\u0a60\u09fe\3\2\2\2\u0a60")
        buf.write("\u0a1c\3\2\2\2\u0a60\u0a42\3\2\2\2\u0a61\u009f\3\2\2\2")
        buf.write("\u0a62\u0a67\5\u00a2R\2\u0a63\u0a65\5\60\31\2\u0a64\u0a63")
        buf.write("\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a67\3\2\2\2\u0a66")
        buf.write("\u0a62\3\2\2\2\u0a66\u0a64\3\2\2\2\u0a67\u0a68\3\2\2\2")
        buf.write("\u0a68\u0a6a\5\u00bc_\2\u0a69\u0a6b\5\u00a4S\2\u0a6a\u0a69")
        buf.write("\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c")
        buf.write("\u0a6e\5\u00bc_\2\u0a6d\u0a6f\5\u00a4S\2\u0a6e\u0a6d\3")
        buf.write("\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u00a1\3\2\2\2\u0a70\u0a74")
        buf.write("\5\66\34\2\u0a71\u0a73\7n\2\2\u0a72\u0a71\3\2\2\2\u0a73")
        buf.write("\u0a76\3\2\2\2\u0a74\u0a72\3\2\2\2\u0a74\u0a75\3\2\2\2")
        buf.write("\u0a75\u0a78\3\2\2\2\u0a76\u0a74\3\2\2\2\u0a77\u0a79\5")
        buf.write(":\36\2\u0a78\u0a77\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u00a3")
        buf.write("\3\2\2\2\u0a7a\u0a7e\5,\27\2\u0a7b\u0a7d\7n\2\2\u0a7c")
        buf.write("\u0a7b\3\2\2\2\u0a7d\u0a80\3\2\2\2\u0a7e\u0a7c\3\2\2\2")
        buf.write("\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a91\3\2\2\2\u0a80\u0a7e\3")
        buf.write("\2\2\2\u0a81\u0a85\7W\2\2\u0a82\u0a84\7n\2\2\u0a83\u0a82")
        buf.write("\3\2\2\2\u0a84\u0a87\3\2\2\2\u0a85\u0a83\3\2\2\2\u0a85")
        buf.write("\u0a86\3\2\2\2\u0a86\u0a88\3\2\2\2\u0a87\u0a85\3\2\2\2")
        buf.write("\u0a88\u0a8c\5,\27\2\u0a89\u0a8b\7n\2\2\u0a8a\u0a89\3")
        buf.write("\2\2\2\u0a8b\u0a8e\3\2\2\2\u0a8c\u0a8a\3\2\2\2\u0a8c\u0a8d")
        buf.write("\3\2\2\2\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8c\3\2\2\2\u0a8f")
        buf.write("\u0a81\3\2\2\2\u0a90\u0a93\3\2\2\2\u0a91\u0a8f\3\2\2\2")
        buf.write("\u0a91\u0a92\3\2\2\2\u0a92\u00a5\3\2\2\2\u0a93\u0a91\3")
        buf.write("\2\2\2\u0a94\u0a98\7\27\2\2\u0a95\u0a97\7n\2\2\u0a96\u0a95")
        buf.write("\3\2\2\2\u0a97\u0a9a\3\2\2\2\u0a98\u0a96\3\2\2\2\u0a98")
        buf.write("\u0a99\3\2\2\2\u0a99\u0a9b\3\2\2\2\u0a9a\u0a98\3\2\2\2")
        buf.write("\u0a9b\u0ab0\7h\2\2\u0a9c\u0ab0\t\23\2\2\u0a9d\u0aa1\7")
        buf.write("\37\2\2\u0a9e\u0aa0\7n\2\2\u0a9f\u0a9e\3\2\2\2\u0aa0\u0aa3")
        buf.write("\3\2\2\2\u0aa1\u0a9f\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2")
        buf.write("\u0aa5\3\2\2\2\u0aa3\u0aa1\3\2\2\2\u0aa4\u0aa6\5\60\31")
        buf.write("\2\u0aa5\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0ab0")
        buf.write("\3\2\2\2\u0aa7\u0aab\7\27\2\2\u0aa8\u0aaa\7n\2\2\u0aa9")
        buf.write("\u0aa8\3\2\2\2\u0aaa\u0aad\3\2\2\2\u0aab\u0aa9\3\2\2\2")
        buf.write("\u0aab\u0aac\3\2\2\2\u0aac\u0aae\3\2\2\2\u0aad\u0aab\3")
        buf.write("\2\2\2\u0aae\u0ab0\5\20\t\2\u0aaf\u0a94\3\2\2\2\u0aaf")
        buf.write("\u0a9c\3\2\2\2\u0aaf\u0a9d\3\2\2\2\u0aaf\u0aa7\3\2\2\2")
        buf.write("\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab2\5\u00bc_\2\u0ab2\u00a7")
        buf.write("\3\2\2\2\u0ab3\u0ab5\5\u00aaV\2\u0ab4\u0ab3\3\2\2\2\u0ab4")
        buf.write("\u0ab5\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ab7\7\2\2\3")
        buf.write("\u0ab7\u00a9\3\2\2\2\u0ab8\u0ac0\5\u00acW\2\u0ab9\u0ac0")
        buf.write("\5\u00bc_\2\u0aba\u0abc\7n\2\2\u0abb\u0aba\3\2\2\2\u0abc")
        buf.write("\u0abd\3\2\2\2\u0abd\u0abb\3\2\2\2\u0abd\u0abe\3\2\2\2")
        buf.write("\u0abe\u0ac0\3\2\2\2\u0abf\u0ab8\3\2\2\2\u0abf\u0ab9\3")
        buf.write("\2\2\2\u0abf\u0abb\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0abf")
        buf.write("\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u00ab\3\2\2\2\u0ac3")
        buf.write("\u0ac7\5\u00aeX\2\u0ac4\u0ac7\5\64\33\2\u0ac5\u0ac7\5")
        buf.write("\u00b4[\2\u0ac6\u0ac3\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac6")
        buf.write("\u0ac5\3\2\2\2\u0ac7\u00ad\3\2\2\2\u0ac8\u0acc\5\u00b0")
        buf.write("Y\2\u0ac9\u0acb\7n\2\2\u0aca\u0ac9\3\2\2\2\u0acb\u0ace")
        buf.write("\3\2\2\2\u0acc\u0aca\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd")
        buf.write("\u0acf\3\2\2\2\u0ace\u0acc\3\2\2\2\u0acf\u0ad3\5b\62\2")
        buf.write("\u0ad0\u0ad2\7n\2\2\u0ad1\u0ad0\3\2\2\2\u0ad2\u0ad5\3")
        buf.write("\2\2\2\u0ad3\u0ad1\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad7")
        buf.write("\3\2\2\2\u0ad5\u0ad3\3\2\2\2\u0ad6\u0ad8\5\u00ba^\2\u0ad7")
        buf.write("\u0ad6\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u0adc\3\2\2\2")
        buf.write("\u0ad9\u0adb\7n\2\2\u0ada\u0ad9\3\2\2\2\u0adb\u0ade\3")
        buf.write("\2\2\2\u0adc\u0ada\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0adf")
        buf.write("\3\2\2\2\u0ade\u0adc\3\2\2\2\u0adf\u0ae0\5\u008cG\2\u0ae0")
        buf.write("\u0afc\3\2\2\2\u0ae1\u0ae5\5\u00b0Y\2\u0ae2\u0ae4\7n\2")
        buf.write("\2\u0ae3\u0ae2\3\2\2\2\u0ae4\u0ae7\3\2\2\2\u0ae5\u0ae3")
        buf.write("\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0ae8\3\2\2\2\u0ae7")
        buf.write("\u0ae5\3\2\2\2\u0ae8\u0aec\5b\62\2\u0ae9\u0aeb\7n\2\2")
        buf.write("\u0aea\u0ae9\3\2\2\2\u0aeb\u0aee\3\2\2\2\u0aec\u0aea\3")
        buf.write("\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u0af0\3\2\2\2\u0aee\u0aec")
        buf.write("\3\2\2\2\u0aef\u0af1\5\u00ba^\2\u0af0\u0aef\3\2\2\2\u0af0")
        buf.write("\u0af1\3\2\2\2\u0af1\u0af5\3\2\2\2\u0af2\u0af4\7n\2\2")
        buf.write("\u0af3\u0af2\3\2\2\2\u0af4\u0af7\3\2\2\2\u0af5\u0af3\3")
        buf.write("\2\2\2\u0af5\u0af6\3\2\2\2\u0af6\u0af8\3\2\2\2\u0af7\u0af5")
        buf.write("\3\2\2\2\u0af8\u0af9\5\b\5\2\u0af9\u0afa\5\u00bc_\2\u0afa")
        buf.write("\u0afc\3\2\2\2\u0afb\u0ac8\3\2\2\2\u0afb\u0ae1\3\2\2\2")
        buf.write("\u0afc\u00af\3\2\2\2\u0afd\u0aff\5\u00b2Z\2\u0afe\u0afd")
        buf.write("\3\2\2\2\u0aff\u0b02\3\2\2\2\u0b00\u0afe\3\2\2\2\u0b00")
        buf.write("\u0b01\3\2\2\2\u0b01\u0b06\3\2\2\2\u0b02\u0b00\3\2\2\2")
        buf.write("\u0b03\u0b05\7n\2\2\u0b04\u0b03\3\2\2\2\u0b05\u0b08\3")
        buf.write("\2\2\2\u0b06\u0b04\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0b0a")
        buf.write("\3\2\2\2\u0b08\u0b06\3\2\2\2\u0b09\u0b0b\5\66\34\2\u0b0a")
        buf.write("\u0b09\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u00b1\3\2\2\2")
        buf.write("\u0b0c\u0b0d\7R\2\2\u0b0d\u0b0e\7h\2\2\u0b0e\u00b3\3\2")
        buf.write("\2\2\u0b0f\u0b13\7\21\2\2\u0b10\u0b12\7n\2\2\u0b11\u0b10")
        buf.write("\3\2\2\2\u0b12\u0b15\3\2\2\2\u0b13\u0b11\3\2\2\2\u0b13")
        buf.write("\u0b14\3\2\2\2\u0b14\u0b16\3\2\2\2\u0b15\u0b13\3\2\2\2")
        buf.write("\u0b16\u0b1a\7h\2\2\u0b17\u0b19\7n\2\2\u0b18\u0b17\3\2")
        buf.write("\2\2\u0b19\u0b1c\3\2\2\2\u0b1a\u0b18\3\2\2\2\u0b1a\u0b1b")
        buf.write("\3\2\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c\u0b1a\3\2\2\2\u0b1d")
        buf.write("\u0b21\5d\63\2\u0b1e\u0b20\7n\2\2\u0b1f\u0b1e\3\2\2\2")
        buf.write("\u0b20\u0b23\3\2\2\2\u0b21\u0b1f\3\2\2\2\u0b21\u0b22\3")
        buf.write("\2\2\2\u0b22\u0b25\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b24\u0b26")
        buf.write("\5\u00ba^\2\u0b25\u0b24\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26")
        buf.write("\u0b2a\3\2\2\2\u0b27\u0b29\7n\2\2\u0b28\u0b27\3\2\2\2")
        buf.write("\u0b29\u0b2c\3\2\2\2\u0b2a\u0b28\3\2\2\2\u0b2a\u0b2b\3")
        buf.write("\2\2\2\u0b2b\u0b2d\3\2\2\2\u0b2c\u0b2a\3\2\2\2\u0b2d\u0b2e")
        buf.write("\5\u00b6\\\2\u0b2e\u00b5\3\2\2\2\u0b2f\u0b33\7<\2\2\u0b30")
        buf.write("\u0b32\7n\2\2\u0b31\u0b30\3\2\2\2\u0b32\u0b35\3\2\2\2")
        buf.write("\u0b33\u0b31\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b50\3")
        buf.write("\2\2\2\u0b35\u0b33\3\2\2\2\u0b36\u0b3a\5\u00b8]\2\u0b37")
        buf.write("\u0b39\7n\2\2\u0b38\u0b37\3\2\2\2\u0b39\u0b3c\3\2\2\2")
        buf.write("\u0b3a\u0b38\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b4d\3")
        buf.write("\2\2\2\u0b3c\u0b3a\3\2\2\2\u0b3d\u0b41\7W\2\2\u0b3e\u0b40")
        buf.write("\7n\2\2\u0b3f\u0b3e\3\2\2\2\u0b40\u0b43\3\2\2\2\u0b41")
        buf.write("\u0b3f\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b44\3\2\2\2")
        buf.write("\u0b43\u0b41\3\2\2\2\u0b44\u0b48\5\u00b8]\2\u0b45\u0b47")
        buf.write("\7n\2\2\u0b46\u0b45\3\2\2\2\u0b47\u0b4a\3\2\2\2\u0b48")
        buf.write("\u0b46\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b4c\3\2\2\2")
        buf.write("\u0b4a\u0b48\3\2\2\2\u0b4b\u0b3d\3\2\2\2\u0b4c\u0b4f\3")
        buf.write("\2\2\2\u0b4d\u0b4b\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b51")
        buf.write("\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b50\u0b36\3\2\2\2\u0b50")
        buf.write("\u0b51\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0b53\7=\2\2")
        buf.write("\u0b53\u00b7\3\2\2\2\u0b54\u0b58\7h\2\2\u0b55\u0b57\7")
        buf.write("n\2\2\u0b56\u0b55\3\2\2\2\u0b57\u0b5a\3\2\2\2\u0b58\u0b56")
        buf.write("\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5b\3\2\2\2\u0b5a")
        buf.write("\u0b58\3\2\2\2\u0b5b\u0b5f\7U\2\2\u0b5c\u0b5e\7n\2\2\u0b5d")
        buf.write("\u0b5c\3\2\2\2\u0b5e\u0b61\3\2\2\2\u0b5f\u0b5d\3\2\2\2")
        buf.write("\u0b5f\u0b60\3\2\2\2\u0b60\u0b62\3\2\2\2\u0b61\u0b5f\3")
        buf.write("\2\2\2\u0b62\u0b63\5\2\2\2\u0b63\u00b9\3\2\2\2\u0b64\u0b68")
        buf.write("\5\64\33\2\u0b65\u0b67\7n\2\2\u0b66\u0b65\3\2\2\2\u0b67")
        buf.write("\u0b6a\3\2\2\2\u0b68\u0b66\3\2\2\2\u0b68\u0b69\3\2\2\2")
        buf.write("\u0b69\u0b6c\3\2\2\2\u0b6a\u0b68\3\2\2\2\u0b6b\u0b64\3")
        buf.write("\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b6b\3\2\2\2\u0b6d\u0b6e")
        buf.write("\3\2\2\2\u0b6e\u00bb\3\2\2\2\u0b6f\u0b71\7o\2\2\u0b70")
        buf.write("\u0b6f\3\2\2\2\u0b71\u0b74\3\2\2\2\u0b72\u0b70\3\2\2\2")
        buf.write("\u0b72\u0b73\3\2\2\2\u0b73\u0b75\3\2\2\2\u0b74\u0b72\3")
        buf.write("\2\2\2\u0b75\u0b79\7V\2\2\u0b76\u0b78\7o\2\2\u0b77\u0b76")
        buf.write("\3\2\2\2\u0b78\u0b7b\3\2\2\2\u0b79\u0b77\3\2\2\2\u0b79")
        buf.write("\u0b7a\3\2\2\2\u0b7a\u00bd\3\2\2\2\u0b7b\u0b79\3\2\2\2")
        buf.write("\u01bd\u00c3\u00cb\u00d2\u00d8\u00dc\u00e1\u00e8\u00ef")
        buf.write("\u00f5\u00fe\u0108\u010f\u0116\u011d\u0124\u0128\u012d")
        buf.write("\u0132\u0137\u013e\u0145\u014e\u0152\u0157\u015f\u0164")
        buf.write("\u0166\u016d\u0174\u017b\u0180\u0186\u018c\u0194\u019d")
        buf.write("\u01a4\u01ab\u01b4\u01b8\u01c1\u01c8\u01cf\u01d6\u01dc")
        buf.write("\u01e3\u01e9\u01f0\u01f7\u01fe\u0203\u020a\u0211\u0218")
        buf.write("\u021d\u0224\u022b\u0232\u0237\u023e\u0245\u024c\u0251")
        buf.write("\u0258\u025f\u0266\u026b\u0272\u0279\u0280\u0285\u028c")
        buf.write("\u0293\u029a\u029f\u02a6\u02ad\u02b4\u02b9\u02c0\u02c7")
        buf.write("\u02ce\u02d3\u02da\u02e1\u02e8\u02ed\u02f4\u02fb\u0302")
        buf.write("\u0309\u0310\u0313\u031a\u0321\u0327\u032f\u0336\u033d")
        buf.write("\u0342\u034b\u034f\u0354\u035a\u035f\u0366\u036c\u0373")
        buf.write("\u037a\u037f\u0386\u038d\u0394\u0397\u039f\u03a3\u03a8")
        buf.write("\u03ac\u03b1\u03b9\u03c0\u03c4\u03c9\u03d0\u03d9\u03e0")
        buf.write("\u03e8\u03f1\u03f5\u03fa\u0401\u0405\u0415\u041c\u0423")
        buf.write("\u042b\u0430\u043b\u0442\u0449\u044e\u0454\u045a\u0461")
        buf.write("\u0468\u046b\u0471\u0477\u047d\u0486\u048b\u0492\u0499")
        buf.write("\u049e\u04a4\u04a8\u04ad\u04b1\u04b6\u04ba\u04c0\u04c7")
        buf.write("\u04cd\u04d2\u04d7\u04de\u04e2\u04e8\u04ec\u04f1\u04f8")
        buf.write("\u04ff\u0503\u0508\u0511\u0515\u051b\u0522\u0529\u052e")
        buf.write("\u0535\u053c\u0543\u0546\u054e\u0555\u055c\u0563\u056e")
        buf.write("\u0575\u057a\u057f\u0585\u058a\u0595\u059c\u05a5\u05ac")
        buf.write("\u05b4\u05b8\u05bd\u05c4\u05cb\u05d0\u05d6\u05dd\u05e4")
        buf.write("\u05ed\u05f4\u05f8\u05fd\u0601\u0603\u060b\u0612\u0617")
        buf.write("\u0619\u0620\u0624\u0629\u062e\u0633\u0639\u0640\u0647")
        buf.write("\u064a\u0650\u0657\u065e\u0663\u066a\u0673\u0677\u0679")
        buf.write("\u067f\u0686\u068d\u0692\u0699\u069d\u06a1\u06a6\u06aa")
        buf.write("\u06b1\u06b8\u06c1\u06c5\u06ca\u06ce\u06d3\u06db\u06e2")
        buf.write("\u06e6\u06eb\u06f2\u06fb\u0702\u0709\u0710\u0719\u0720")
        buf.write("\u0728\u072c\u0731\u0735\u073b\u0742\u0746\u074b\u074f")
        buf.write("\u0754\u075c\u0763\u076a\u076e\u0773\u077a\u0783\u078a")
        buf.write("\u0791\u0798\u079f\u07a8\u07af\u07b6\u07be\u07c5\u07c9")
        buf.write("\u07ce\u07d2\u07d4\u07de\u07e2\u07e7\u07eb\u07f0\u07f4")
        buf.write("\u07f7\u07fc\u0803\u080a\u080e\u0813\u081a\u081f\u0826")
        buf.write("\u082e\u0834\u083b\u0844\u0848\u084e\u0855\u085c\u0863")
        buf.write("\u0869\u086e\u087f\u0886\u088d\u0894\u0899\u089c\u08a1")
        buf.write("\u08a8\u08af\u08b6\u08bc\u08bf\u08c3\u08c9\u08ce\u08d4")
        buf.write("\u08db\u08e3\u08ea\u08f1\u08fa\u0901\u0905\u090b\u090f")
        buf.write("\u0914\u091c\u0921\u0926\u092b\u092f\u0937\u093e\u0944")
        buf.write("\u0949\u0950\u0954\u0959\u0960\u0964\u0969\u096c\u0972")
        buf.write("\u0979\u097e\u0983\u098a\u0991\u0995\u099a\u09a3\u09ac")
        buf.write("\u09b5\u09bc\u09c3\u09ca\u09d1\u09d8\u09dc\u09e2\u09e9")
        buf.write("\u09f0\u09f7\u09fc\u0a02\u0a09\u0a10\u0a17\u0a20\u0a27")
        buf.write("\u0a2e\u0a35\u0a3c\u0a46\u0a4d\u0a54\u0a5b\u0a60\u0a64")
        buf.write("\u0a66\u0a6a\u0a6e\u0a74\u0a78\u0a7e\u0a85\u0a8c\u0a91")
        buf.write("\u0a98\u0aa1\u0aa5\u0aab\u0aaf\u0ab4\u0abd\u0abf\u0ac1")
        buf.write("\u0ac6\u0acc\u0ad3\u0ad7\u0adc\u0ae5\u0aec\u0af0\u0af5")
        buf.write("\u0afb\u0b00\u0b06\u0b0a\u0b13\u0b1a\u0b21\u0b25\u0b2a")
        buf.write("\u0b33\u0b3a\u0b41\u0b48\u0b4d\u0b50\u0b58\u0b5f\u0b68")
        buf.write("\u0b6d\u0b72\u0b79")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'try'", "'except'", "'finally'", "'as'", 
                     "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'exttask'", "'entry'", "'enum'", "'extern'", "'float'", 
                     "'for'", "'goto'", "'if'", "'inline'", "'int'", "'lambda'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'spawn'", "'static'", "'status'", 
                     "'struct'", "'switch'", "'typeof'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'alignas'", 
                     "'alignof'", "'atomic'", "'bool'", "'complex'", "'imaginary'", 
                     "'noreturn'", "'static_assert'", "'thread_local'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", 
                     "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                     "'||'", "'^'", "'!'", "'~'", "'@'", "'=>'", "'?'", 
                     "':'", "';'", "','", "'='", "'*='", "'/='", "'%='", 
                     "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
                     "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "As", "Auto", "Break", "Case", "Char", "Const", "Continue", 
                      "Default", "Do", "Double", "Else", "ExtensionTask", 
                      "Entry", "Enum", "Extern", "Float", "For", "Goto", 
                      "If", "Inline", "Int", "Lambda", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Spawn", "Static", "Status", "Struct", "Switch", "Typeof", 
                      "Typedef", "Union", "Unsigned", "Void", "Volatile", 
                      "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "DecoratorSign", "LambdaStartBlock", "Question", 
                      "Colon", "Semi", "Comma", "Assign", "StarAssign", 
                      "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftAssign", "RightShiftAssign", "AndAssign", 
                      "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", 
                      "Dot", "Ellipsis", "Identifier", "Constant", "DigitSequence", 
                      "StringLiteral", "AsmBlock", "Directive", "WS", "Whitespace", 
                      "Newline" ]

    RULE_primaryExpression = 0
    RULE_lambdaFunction = 1
    RULE_lambdaBody = 2
    RULE_expressionLambda = 3
    RULE_statementLambda = 4
    RULE_postfixExpression = 5
    RULE_argumentExpressionList = 6
    RULE_unaryExpression = 7
    RULE_unaryOperator = 8
    RULE_castOrConvertExpression = 9
    RULE_multiplicativeExpression = 10
    RULE_additiveExpression = 11
    RULE_shiftExpression = 12
    RULE_relationalExpression = 13
    RULE_equalityExpression = 14
    RULE_andExpression = 15
    RULE_exclusiveOrExpression = 16
    RULE_inclusiveOrExpression = 17
    RULE_logicalAndExpression = 18
    RULE_logicalOrExpression = 19
    RULE_conditionalExpression = 20
    RULE_assignmentExpression = 21
    RULE_assignmentOperator = 22
    RULE_expression = 23
    RULE_constantExpression = 24
    RULE_declaration = 25
    RULE_declarationSpecifiers = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_storageClassSpecifier = 30
    RULE_arraySpecifier = 31
    RULE_typeSpecifier = 32
    RULE_structOrUnionSpecifier = 33
    RULE_structOrUnion = 34
    RULE_structDeclarationList = 35
    RULE_structDeclaration = 36
    RULE_specifierQualifierList = 37
    RULE_structDeclaratorList = 38
    RULE_structDeclarator = 39
    RULE_enumSpecifier = 40
    RULE_enumeratorList = 41
    RULE_enumerator = 42
    RULE_enumerationConstant = 43
    RULE_atomicTypeSpecifier = 44
    RULE_typeQualifier = 45
    RULE_functionSpecifier = 46
    RULE_alignmentSpecifier = 47
    RULE_declarator = 48
    RULE_directDeclarator = 49
    RULE_nestedParenthesesBlock = 50
    RULE_pointer = 51
    RULE_typeQualifierList = 52
    RULE_parameterTypeList = 53
    RULE_parameterList = 54
    RULE_parameterDeclaration = 55
    RULE_identifierList = 56
    RULE_typeName = 57
    RULE_abstractDeclarator = 58
    RULE_directAbstractDeclarator = 59
    RULE_typedefName = 60
    RULE_initializer = 61
    RULE_initializerList = 62
    RULE_designation = 63
    RULE_designatorList = 64
    RULE_designator = 65
    RULE_staticAssertDeclaration = 66
    RULE_statement = 67
    RULE_labeledStatement = 68
    RULE_compoundStatement = 69
    RULE_blockItemList = 70
    RULE_blockItem = 71
    RULE_expressionStatement = 72
    RULE_tryExceptStatement = 73
    RULE_exceptBlock = 74
    RULE_finallyBlock = 75
    RULE_elseBlock = 76
    RULE_selectionStatement = 77
    RULE_iterationStatement = 78
    RULE_forCondition = 79
    RULE_forDeclaration = 80
    RULE_forExpression = 81
    RULE_jumpStatement = 82
    RULE_compilationUnit = 83
    RULE_translationUnit = 84
    RULE_externalItem = 85
    RULE_functionDefinition = 86
    RULE_functionDeclarationSpecifiers = 87
    RULE_decoratorSpecifier = 88
    RULE_extensionTaskDefinition = 89
    RULE_extensionTaskParameterList = 90
    RULE_extensionTaskParameter = 91
    RULE_declarationList = 92
    RULE_endOfItem = 93

    ruleNames =  [ "primaryExpression", "lambdaFunction", "lambdaBody", 
                   "expressionLambda", "statementLambda", "postfixExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castOrConvertExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "arraySpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "nestedParenthesesBlock", 
                   "pointer", "typeQualifierList", "parameterTypeList", 
                   "parameterList", "parameterDeclaration", "identifierList", 
                   "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "tryExceptStatement", "exceptBlock", "finallyBlock", 
                   "elseBlock", "selectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalItem", 
                   "functionDefinition", "functionDeclarationSpecifiers", 
                   "decoratorSpecifier", "extensionTaskDefinition", "extensionTaskParameterList", 
                   "extensionTaskParameter", "declarationList", "endOfItem" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    As=4
    Auto=5
    Break=6
    Case=7
    Char=8
    Const=9
    Continue=10
    Default=11
    Do=12
    Double=13
    Else=14
    ExtensionTask=15
    Entry=16
    Enum=17
    Extern=18
    Float=19
    For=20
    Goto=21
    If=22
    Inline=23
    Int=24
    Lambda=25
    Long=26
    Register=27
    Restrict=28
    Return=29
    Short=30
    Signed=31
    Sizeof=32
    Spawn=33
    Static=34
    Status=35
    Struct=36
    Switch=37
    Typeof=38
    Typedef=39
    Union=40
    Unsigned=41
    Void=42
    Volatile=43
    While=44
    Alignas=45
    Alignof=46
    Atomic=47
    Bool=48
    Complex=49
    Imaginary=50
    Noreturn=51
    StaticAssert=52
    ThreadLocal=53
    LeftParen=54
    RightParen=55
    LeftBracket=56
    RightBracket=57
    LeftBrace=58
    RightBrace=59
    Less=60
    LessEqual=61
    Greater=62
    GreaterEqual=63
    LeftShift=64
    RightShift=65
    Plus=66
    PlusPlus=67
    Minus=68
    MinusMinus=69
    Star=70
    Div=71
    Mod=72
    And=73
    Or=74
    AndAnd=75
    OrOr=76
    Caret=77
    Not=78
    Tilde=79
    DecoratorSign=80
    LambdaStartBlock=81
    Question=82
    Colon=83
    Semi=84
    Comma=85
    Assign=86
    StarAssign=87
    DivAssign=88
    ModAssign=89
    PlusAssign=90
    MinusAssign=91
    LeftShiftAssign=92
    RightShiftAssign=93
    AndAssign=94
    XorAssign=95
    OrAssign=96
    Equal=97
    NotEqual=98
    Arrow=99
    Dot=100
    Ellipsis=101
    Identifier=102
    Constant=103
    DigitSequence=104
    StringLiteral=105
    AsmBlock=106
    Directive=107
    WS=108
    Whitespace=109
    Newline=110

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Spawn(self):
            return self.getToken(ParaCParser.Spawn, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaFunction(self):
            return self.getTypedRuleContext(ParaCParser.LambdaFunctionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 189
                self.match(ParaCParser.Spawn)
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 190
                    self.match(ParaCParser.WS)
                    self.state = 195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 196
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 199 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 198
                        self.match(ParaCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 201 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 203
                self.match(ParaCParser.LeftParen)
                self.state = 204
                self.expression()
                self.state = 205
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 207
                self.lambdaFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(ParaCParser.LambdaBodyContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunction" ):
                listener.enterLambdaFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunction" ):
                listener.exitLambdaFunction(self)




    def lambdaFunction(self):

        localctx = ParaCParser.LambdaFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdaFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(ParaCParser.LeftParen)
            self.state = 214
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 211
                    self.match(ParaCParser.WS) 
                self.state = 216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                self.state = 217
                self.parameterList()


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 220
                self.match(ParaCParser.WS)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self.match(ParaCParser.RightParen)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 227
                self.match(ParaCParser.WS)
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)


        def statementLambda(self):
            return self.getTypedRuleContext(ParaCParser.StatementLambdaContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = ParaCParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_lambdaBody)
        try:
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.expressionLambda()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.statementLambda()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expressionLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)




    def expressionLambda(self):

        localctx = ParaCParser.ExpressionLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 243
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 240
                    self.match(ParaCParser.WS) 
                self.state = 245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 246
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statementLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLambda" ):
                listener.enterStatementLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLambda" ):
                listener.exitStatementLambda(self)




    def statementLambda(self):

        localctx = ParaCParser.StatementLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 249
                self.match(ParaCParser.WS)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 255
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 257
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 258
                self.match(ParaCParser.LeftParen)
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 259
                    self.match(ParaCParser.WS)
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 265
                self.typeName()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 266
                    self.match(ParaCParser.WS)
                    self.state = 271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 272
                self.match(ParaCParser.RightParen)
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 273
                    self.match(ParaCParser.WS)
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 279
                self.match(ParaCParser.LeftBrace)
                self.state = 283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 280
                        self.match(ParaCParser.WS) 
                    self.state = 285
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 286
                self.initializerList()
                self.state = 290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 287
                        self.match(ParaCParser.WS) 
                    self.state = 292
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 293
                    self.match(ParaCParser.Comma)


                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 296
                    self.match(ParaCParser.WS)
                    self.state = 301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 302
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 306
                    self.match(ParaCParser.WS) 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.LeftBracket]:
                        self.state = 312
                        self.match(ParaCParser.LeftBracket)
                        self.state = 316
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 313
                                self.match(ParaCParser.WS) 
                            self.state = 318
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                        self.state = 319
                        self.expression()
                        self.state = 323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 320
                            self.match(ParaCParser.WS)
                            self.state = 325
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 326
                        self.match(ParaCParser.RightBracket)
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 328
                        self.match(ParaCParser.LeftParen)
                        self.state = 332
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 329
                                self.match(ParaCParser.WS) 
                            self.state = 334
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                        self.state = 336
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                        if la_ == 1:
                            self.state = 335
                            self.argumentExpressionList()


                        self.state = 341
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 338
                            self.match(ParaCParser.WS)
                            self.state = 343
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 344
                        self.match(ParaCParser.RightParen)
                        pass
                    elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                        self.state = 345
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 349
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 346
                            self.match(ParaCParser.WS)
                            self.state = 351
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 352
                        self.match(ParaCParser.Identifier)
                        pass
                    elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                        self.state = 353
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.assignmentExpression()
            self.state = 363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 360
                    self.match(ParaCParser.WS) 
                self.state = 365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 366
                self.match(ParaCParser.Comma)
                self.state = 370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 367
                        self.match(ParaCParser.WS) 
                    self.state = 372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 373
                self.assignmentExpression()
                self.state = 377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 374
                        self.match(ParaCParser.WS) 
                    self.state = 379
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 385
                    _la = self._input.LA(1)
                    if not(((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (ParaCParser.Sizeof - 32)) | (1 << (ParaCParser.PlusPlus - 32)) | (1 << (ParaCParser.MinusMinus - 32)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 391
                self.match(ParaCParser.WS)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Spawn, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral]:
                self.state = 397
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 398
                self.unaryOperator()
                self.state = 402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 399
                        self.match(ParaCParser.WS) 
                    self.state = 404
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 405
                self.castOrConvertExpression(0)
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 407
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 408
                    self.match(ParaCParser.WS)
                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 414
                self.match(ParaCParser.LeftParen)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 415
                    self.match(ParaCParser.WS)
                    self.state = 420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 421
                self.typeName()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 422
                    self.match(ParaCParser.WS)
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 428
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 430
                self.match(ParaCParser.AndAnd)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 431
                    self.match(ParaCParser.WS)
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 437
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Plus - 66)) | (1 << (ParaCParser.Minus - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.And - 66)) | (1 << (ParaCParser.Not - 66)) | (1 << (ParaCParser.Tilde - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOrConvertExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castOrConvertExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOrConvertExpression" ):
                listener.enterCastOrConvertExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOrConvertExpression" ):
                listener.exitCastOrConvertExpression(self)



    def castOrConvertExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.CastOrConvertExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_castOrConvertExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 443
                self.match(ParaCParser.LeftParen)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 444
                    self.match(ParaCParser.WS)
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 450
                self.typeName()
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 451
                    self.match(ParaCParser.WS)
                    self.state = 456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 457
                self.match(ParaCParser.RightParen)
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 458
                        self.match(ParaCParser.WS) 
                    self.state = 463
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                self.state = 464
                self.castOrConvertExpression(4)
                pass

            elif la_ == 2:
                self.state = 466
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 467
                self.match(ParaCParser.DigitSequence)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.CastOrConvertExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_castOrConvertExpression)
                    self.state = 470
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 471
                        self.match(ParaCParser.WS)
                        self.state = 476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 477
                    self.match(ParaCParser.As)
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 478
                        self.match(ParaCParser.WS)
                        self.state = 483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 484
                    self.typeName() 
                self.state = 489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castOrConvertExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastOrConvertExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.castOrConvertExpression(0)
            self.state = 494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 491
                    self.match(ParaCParser.WS) 
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 497
                    _la = self._input.LA(1)
                    if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Div - 70)) | (1 << (ParaCParser.Mod - 70)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 501
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 498
                            self.match(ParaCParser.WS) 
                        self.state = 503
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                    self.state = 504
                    self.castOrConvertExpression(0)
                    self.state = 508
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 505
                            self.match(ParaCParser.WS) 
                        self.state = 510
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
             
                self.state = 515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.multiplicativeExpression()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517
                    self.match(ParaCParser.WS) 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 539
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 523
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 527
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 524
                            self.match(ParaCParser.WS) 
                        self.state = 529
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                    self.state = 530
                    self.multiplicativeExpression()
                    self.state = 534
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 531
                            self.match(ParaCParser.WS) 
                        self.state = 536
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
             
                self.state = 541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.additiveExpression()
            self.state = 546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 543
                    self.match(ParaCParser.WS) 
                self.state = 548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 549
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 553
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 550
                            self.match(ParaCParser.WS) 
                        self.state = 555
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                    self.state = 556
                    self.additiveExpression()
                    self.state = 560
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 557
                            self.match(ParaCParser.WS) 
                        self.state = 562
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
             
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.shiftExpression()
            self.state = 572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 569
                    self.match(ParaCParser.WS) 
                self.state = 574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 575
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Less) | (1 << ParaCParser.LessEqual) | (1 << ParaCParser.Greater) | (1 << ParaCParser.GreaterEqual))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 579
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 576
                            self.match(ParaCParser.WS) 
                        self.state = 581
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                    self.state = 582
                    self.shiftExpression()
                    self.state = 586
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 583
                            self.match(ParaCParser.WS) 
                        self.state = 588
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
             
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.relationalExpression()
            self.state = 598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595
                    self.match(ParaCParser.WS) 
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 601
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 605
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 602
                            self.match(ParaCParser.WS) 
                        self.state = 607
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                    self.state = 608
                    self.relationalExpression()
                    self.state = 612
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 609
                            self.match(ParaCParser.WS) 
                        self.state = 614
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
             
                self.state = 619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.equalityExpression()
            self.state = 624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 621
                    self.match(ParaCParser.WS) 
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 627
                    self.match(ParaCParser.And)
                    self.state = 631
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 628
                            self.match(ParaCParser.WS) 
                        self.state = 633
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                    self.state = 634
                    self.equalityExpression()
                    self.state = 638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 635
                            self.match(ParaCParser.WS) 
                        self.state = 640
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
             
                self.state = 645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.andExpression()
            self.state = 650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 647
                    self.match(ParaCParser.WS) 
                self.state = 652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 669
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 653
                    self.match(ParaCParser.Caret)
                    self.state = 657
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 654
                            self.match(ParaCParser.WS) 
                        self.state = 659
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 660
                    self.andExpression()
                    self.state = 664
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 661
                            self.match(ParaCParser.WS) 
                        self.state = 666
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
             
                self.state = 671
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_inclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.exclusiveOrExpression()
            self.state = 676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 673
                    self.match(ParaCParser.WS) 
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 679
                    self.match(ParaCParser.Or)
                    self.state = 683
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 680
                            self.match(ParaCParser.WS) 
                        self.state = 685
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                    self.state = 686
                    self.exclusiveOrExpression()
                    self.state = 690
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 687
                            self.match(ParaCParser.WS) 
                        self.state = 692
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
             
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.inclusiveOrExpression()
            self.state = 702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 699
                    self.match(ParaCParser.WS) 
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 705
                    self.match(ParaCParser.AndAnd)
                    self.state = 709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 706
                            self.match(ParaCParser.WS) 
                        self.state = 711
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                    self.state = 712
                    self.inclusiveOrExpression()
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 713
                            self.match(ParaCParser.WS) 
                        self.state = 718
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
             
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_logicalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.logicalAndExpression()
            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 725
                    self.match(ParaCParser.WS) 
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 747
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 731
                    self.match(ParaCParser.OrOr)
                    self.state = 735
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 732
                            self.match(ParaCParser.WS) 
                        self.state = 737
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                    self.state = 738
                    self.logicalAndExpression()
                    self.state = 742
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 739
                            self.match(ParaCParser.WS) 
                        self.state = 744
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
             
                self.state = 749
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.logicalOrExpression()
            self.state = 754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 751
                    self.match(ParaCParser.WS) 
                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 757
                self.match(ParaCParser.Question)
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 758
                        self.match(ParaCParser.WS) 
                    self.state = 763
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 764
                self.expression()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 765
                    self.match(ParaCParser.WS)
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 771
                self.match(ParaCParser.Colon)
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 772
                        self.match(ParaCParser.WS) 
                    self.state = 777
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 778
                self.conditionalExpression()
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 779
                        self.match(ParaCParser.WS) 
                    self.state = 784
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentExpression)
        self._la = 0 # Token type
        try:
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.unaryExpression()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 789
                    self.match(ParaCParser.WS)
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 795
                self.assignmentOperator()
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 796
                        self.match(ParaCParser.WS) 
                    self.state = 801
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 802
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 804
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ParaCParser.Assign - 86)) | (1 << (ParaCParser.StarAssign - 86)) | (1 << (ParaCParser.DivAssign - 86)) | (1 << (ParaCParser.ModAssign - 86)) | (1 << (ParaCParser.PlusAssign - 86)) | (1 << (ParaCParser.MinusAssign - 86)) | (1 << (ParaCParser.LeftShiftAssign - 86)) | (1 << (ParaCParser.RightShiftAssign - 86)) | (1 << (ParaCParser.AndAssign - 86)) | (1 << (ParaCParser.XorAssign - 86)) | (1 << (ParaCParser.OrAssign - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.assignmentExpression()
            self.state = 813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 810
                    self.match(ParaCParser.WS) 
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 816
                    self.match(ParaCParser.Comma)
                    self.state = 820
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 817
                            self.match(ParaCParser.WS) 
                        self.state = 822
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                    self.state = 823
                    self.assignmentExpression()
                    self.state = 827
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 824
                            self.match(ParaCParser.WS) 
                        self.state = 829
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
             
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.declarationSpecifiers()
                self.state = 841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 838
                        self.match(ParaCParser.WS) 
                    self.state = 843
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (ParaCParser.LeftParen - 54)) | (1 << (ParaCParser.Star - 54)) | (1 << (ParaCParser.Caret - 54)) | (1 << (ParaCParser.Identifier - 54)) | (1 << (ParaCParser.WS - 54)))) != 0):
                    self.state = 844
                    self.initDeclaratorList()


                self.state = 847
                self.endOfItem()
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 852
                    self.declarationSpecifier()
                    self.state = 856
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 853
                            self.match(ParaCParser.WS) 
                        self.state = 858
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 861 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 866
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 867
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.initDeclarator()
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 871
                self.match(ParaCParser.WS)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 877
                self.match(ParaCParser.Comma)
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 878
                        self.match(ParaCParser.WS) 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                self.state = 884
                self.initDeclarator()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 885
                    self.match(ParaCParser.WS)
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.declarator()
            self.state = 900
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 897
                    self.match(ParaCParser.WS) 
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 903
                self.match(ParaCParser.Assign)
                self.state = 907
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 904
                        self.match(ParaCParser.WS) 
                    self.state = 909
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                self.state = 910
                self.initializer()
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 911
                        self.match(ParaCParser.WS) 
                    self.state = 916
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Register) | (1 << ParaCParser.Static) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraySpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_arraySpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySpecifier" ):
                listener.enterArraySpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySpecifier" ):
                listener.exitArraySpecifier(self)




    def arraySpecifier(self):

        localctx = ParaCParser.ArraySpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arraySpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.match(ParaCParser.LeftBracket)
                self.state = 925
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 922
                        self.match(ParaCParser.WS) 
                    self.state = 927
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 928
                    self.typeQualifierList()


                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 931
                        self.match(ParaCParser.WS) 
                    self.state = 936
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 937
                    self.assignmentExpression()


                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 940
                    self.match(ParaCParser.WS)
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 946
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(ParaCParser.LeftBracket)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 948
                    self.match(ParaCParser.WS)
                    self.state = 953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 954
                self.match(ParaCParser.Static)
                self.state = 958
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 955
                        self.match(ParaCParser.WS) 
                    self.state = 960
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 961
                    self.typeQualifierList()


                self.state = 967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 964
                        self.match(ParaCParser.WS) 
                    self.state = 969
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                self.state = 970
                self.assignmentExpression()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 971
                    self.match(ParaCParser.WS)
                    self.state = 976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 977
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(ParaCParser.LeftBracket)
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 980
                    self.match(ParaCParser.WS)
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 986
                self.typeQualifierList()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 987
                    self.match(ParaCParser.WS)
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 993
                self.match(ParaCParser.Static)
                self.state = 994
                self.assignmentExpression()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 995
                    self.match(ParaCParser.WS)
                    self.state = 1000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1001
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1003
                self.match(ParaCParser.LeftBracket)
                self.state = 1007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1004
                        self.match(ParaCParser.WS) 
                    self.state = 1009
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 1010
                    self.typeQualifierList()


                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1013
                    self.match(ParaCParser.WS)
                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1019
                self.match(ParaCParser.Star)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1020
                    self.match(ParaCParser.WS)
                    self.state = 1025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1026
                self.match(ParaCParser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def Lambda(self):
            return self.getToken(ParaCParser.Lambda, 0)

        def Less(self):
            return self.getToken(ParaCParser.Less, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def Greater(self):
            return self.getToken(ParaCParser.Greater, 0)

        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def Complex(self):
            return self.getToken(ParaCParser.Complex, 0)

        def arraySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArraySpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArraySpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def Typeof(self):
            return self.getToken(ParaCParser.Typeof, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool, ParaCParser.Complex]:
                self.state = 1065
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.Void]:
                    self.state = 1030
                    self.match(ParaCParser.Void)
                    pass
                elif token in [ParaCParser.Char]:
                    self.state = 1031
                    self.match(ParaCParser.Char)
                    pass
                elif token in [ParaCParser.Short]:
                    self.state = 1032
                    self.match(ParaCParser.Short)
                    pass
                elif token in [ParaCParser.Int]:
                    self.state = 1033
                    self.match(ParaCParser.Int)
                    pass
                elif token in [ParaCParser.Status]:
                    self.state = 1034
                    self.match(ParaCParser.Status)
                    pass
                elif token in [ParaCParser.Long]:
                    self.state = 1035
                    self.match(ParaCParser.Long)
                    pass
                elif token in [ParaCParser.Float]:
                    self.state = 1036
                    self.match(ParaCParser.Float)
                    pass
                elif token in [ParaCParser.Double]:
                    self.state = 1037
                    self.match(ParaCParser.Double)
                    pass
                elif token in [ParaCParser.Signed]:
                    self.state = 1038
                    self.match(ParaCParser.Signed)
                    pass
                elif token in [ParaCParser.Lambda]:
                    self.state = 1039
                    self.match(ParaCParser.Lambda)
                    self.state = 1043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1040
                        self.match(ParaCParser.WS)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1046
                    self.match(ParaCParser.Less)
                    self.state = 1050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1047
                        self.match(ParaCParser.WS)
                        self.state = 1052
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1053
                    self.parameterTypeList()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1054
                        self.match(ParaCParser.WS)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1060
                    self.match(ParaCParser.Greater)
                    pass
                elif token in [ParaCParser.Unsigned]:
                    self.state = 1062
                    self.match(ParaCParser.Unsigned)
                    pass
                elif token in [ParaCParser.Bool]:
                    self.state = 1063
                    self.match(ParaCParser.Bool)
                    pass
                elif token in [ParaCParser.Complex]:
                    self.state = 1064
                    self.match(ParaCParser.Complex)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1067
                        self.arraySpecifier() 
                    self.state = 1072
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 1073
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 1074
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 1075
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 1076
                self.typedefName()
                pass
            elif token in [ParaCParser.Typeof]:
                self.state = 1077
                self.match(ParaCParser.Typeof)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1078
                    self.match(ParaCParser.WS)
                    self.state = 1083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1084
                self.match(ParaCParser.LeftParen)
                self.state = 1088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1085
                        self.match(ParaCParser.WS) 
                    self.state = 1090
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1091
                self.constantExpression()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1092
                    self.match(ParaCParser.WS)
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1098
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 1102
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1103
                        self.match(ParaCParser.WS)
                        self.state = 1108
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1109
                    self.pointer() 
                self.state = 1114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def structDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.structOrUnion()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1116
                    self.match(ParaCParser.WS)
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 1122
                    self.match(ParaCParser.Identifier)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1123
                        self.match(ParaCParser.WS)
                        self.state = 1128
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1131
                self.match(ParaCParser.LeftBrace)
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1132
                        self.match(ParaCParser.WS) 
                    self.state = 1137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1138
                        self.structDeclarationList() 
                    self.state = 1143
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1144
                    self.match(ParaCParser.WS)
                    self.state = 1149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1150
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1152
                self.structOrUnion()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1153
                    self.match(ParaCParser.WS)
                    self.state = 1158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1159
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1165
                        self.match(ParaCParser.WS)
                        self.state = 1170
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1171
                    self.structDeclaration()
                    self.state = 1175
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1172
                            self.match(ParaCParser.WS) 
                        self.state = 1177
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1180 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.specifierQualifierList()
                self.state = 1186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1183
                        self.match(ParaCParser.WS) 
                    self.state = 1188
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (ParaCParser.LeftParen - 54)) | (1 << (ParaCParser.Star - 54)) | (1 << (ParaCParser.Caret - 54)) | (1 << (ParaCParser.Colon - 54)) | (1 << (ParaCParser.Identifier - 54)) | (1 << (ParaCParser.WS - 54)))) != 0):
                    self.state = 1189
                    self.structDeclaratorList()


                self.state = 1192
                self.endOfItem()
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1197
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 1198
                self.typeQualifier()
                pass


            self.state = 1204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1201
                    self.match(ParaCParser.WS) 
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1207
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.structDeclarator()
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1211
                self.match(ParaCParser.WS)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1217
                self.match(ParaCParser.Comma)
                self.state = 1221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1218
                        self.match(ParaCParser.WS) 
                    self.state = 1223
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

                self.state = 1224
                self.structDeclarator()
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1231
                    self.declarator()


                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1234
                    self.match(ParaCParser.WS)
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1240
                self.match(ParaCParser.Colon)
                self.state = 1244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1241
                        self.match(ParaCParser.WS) 
                    self.state = 1246
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                self.state = 1247
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1250
                self.match(ParaCParser.Enum)
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1251
                        self.match(ParaCParser.WS) 
                    self.state = 1256
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 1257
                    self.match(ParaCParser.Identifier)


                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1260
                    self.match(ParaCParser.WS)
                    self.state = 1265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1266
                self.match(ParaCParser.LeftBrace)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1267
                    self.match(ParaCParser.WS)
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1273
                self.enumeratorList()
                self.state = 1277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1274
                        self.match(ParaCParser.WS) 
                    self.state = 1279
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 1280
                    self.match(ParaCParser.Comma)


                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1283
                    self.match(ParaCParser.WS)
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1289
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1291
                self.match(ParaCParser.Enum)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1292
                    self.match(ParaCParser.WS)
                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1298
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumeratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.enumerator()
            self.state = 1305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1302
                    self.match(ParaCParser.WS) 
                self.state = 1307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1324
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1308
                    self.match(ParaCParser.Comma)
                    self.state = 1312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1309
                        self.match(ParaCParser.WS)
                        self.state = 1314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1315
                    self.enumerator()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1316
                            self.match(ParaCParser.WS) 
                        self.state = 1321
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
             
                self.state = 1326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.enumerationConstant()
            self.state = 1331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1328
                    self.match(ParaCParser.WS) 
                self.state = 1333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 1334
                self.match(ParaCParser.Assign)
                self.state = 1338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1335
                        self.match(ParaCParser.WS) 
                    self.state = 1340
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                self.state = 1341
                self.constantExpression()
                self.state = 1345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1342
                        self.match(ParaCParser.WS) 
                    self.state = 1347
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_atomicTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(ParaCParser.Atomic)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1353
                self.match(ParaCParser.WS)
                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1359
            self.match(ParaCParser.LeftParen)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1360
                self.match(ParaCParser.WS)
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1366
            self.typeName()
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1367
                self.match(ParaCParser.WS)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1373
            self.match(ParaCParser.RightParen)
            self.state = 1377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1374
                    self.match(ParaCParser.WS) 
                self.state = 1379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Entry or _la==ParaCParser.Noreturn):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alignmentSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(ParaCParser.Alignas)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1385
                self.match(ParaCParser.WS)
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1391
            self.match(ParaCParser.LeftParen)
            self.state = 1395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1392
                    self.match(ParaCParser.WS) 
                self.state = 1397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1398
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 1399
                self.constantExpression()
                pass


            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1402
                self.match(ParaCParser.WS)
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1408
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 1410
                self.pointer()


            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1413
                self.match(ParaCParser.WS)
                self.state = 1418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1419
            self.directDeclarator(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1422
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1423
                self.match(ParaCParser.LeftParen)
                self.state = 1427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1424
                        self.match(ParaCParser.WS) 
                    self.state = 1429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                self.state = 1430
                self.declarator()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1431
                    self.match(ParaCParser.WS)
                    self.state = 1436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 1439
                self.match(ParaCParser.Identifier)
                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1440
                    self.match(ParaCParser.WS)
                    self.state = 1445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1446
                self.match(ParaCParser.Colon)
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1447
                    self.match(ParaCParser.WS)
                    self.state = 1452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1453
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 1454
                self.match(ParaCParser.LeftParen)
                self.state = 1458
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1455
                        self.match(ParaCParser.WS) 
                    self.state = 1460
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 1461
                    self.typeSpecifier(0)


                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1464
                    self.match(ParaCParser.WS)
                    self.state = 1469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1470
                self.pointer()
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1471
                    self.match(ParaCParser.WS)
                    self.state = 1476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1477
                self.directDeclarator(0)
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1478
                    self.match(ParaCParser.WS)
                    self.state = 1483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1484
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1535
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1488
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1489
                            self.match(ParaCParser.WS)
                            self.state = 1494
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1495
                        self.match(ParaCParser.LeftParen)
                        self.state = 1499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1496
                            self.match(ParaCParser.WS)
                            self.state = 1501
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1502
                        self.parameterTypeList()
                        self.state = 1506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1503
                            self.match(ParaCParser.WS)
                            self.state = 1508
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1509
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1511
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1512
                            self.match(ParaCParser.WS)
                            self.state = 1517
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1518
                        self.match(ParaCParser.LeftParen)
                        self.state = 1522
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1519
                                self.match(ParaCParser.WS) 
                            self.state = 1524
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                        self.state = 1526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 1525
                            self.identifierList()


                        self.state = 1531
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1528
                            self.match(ParaCParser.WS)
                            self.state = 1533
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1534
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 1539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1557
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.As, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.DecoratorSign, ParaCParser.LambdaStartBlock, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.AsmBlock, ParaCParser.Directive, ParaCParser.WS, ParaCParser.Whitespace, ParaCParser.Newline]:
                        self.state = 1540
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 1541
                        self.match(ParaCParser.LeftParen)
                        self.state = 1545
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1542
                                self.match(ParaCParser.WS) 
                            self.state = 1547
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                        self.state = 1548
                        self.nestedParenthesesBlock()
                        self.state = 1552
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1549
                            self.match(ParaCParser.WS)
                            self.state = 1554
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1555
                        self.match(ParaCParser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1562
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1566
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1563
                            self.match(ParaCParser.WS) 
                        self.state = 1568
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

                    self.state = 1570
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                    if la_ == 1:
                        self.state = 1569
                        self.typeQualifierList()


                    self.state = 1575
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1572
                            self.match(ParaCParser.WS) 
                        self.state = 1577
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,218,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1580 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1582
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1585 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.parameterList()
            self.state = 1591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1588
                    self.match(ParaCParser.WS) 
                self.state = 1593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 1594
                self.match(ParaCParser.Comma)
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1595
                    self.match(ParaCParser.WS)
                    self.state = 1600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1601
                self.match(ParaCParser.Ellipsis)
                self.state = 1605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1602
                        self.match(ParaCParser.WS) 
                    self.state = 1607
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.parameterDeclaration()
            self.state = 1614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1611
                    self.match(ParaCParser.WS) 
                self.state = 1616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

            self.state = 1633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1617
                    self.match(ParaCParser.Comma)
                    self.state = 1621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1618
                        self.match(ParaCParser.WS)
                        self.state = 1623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1624
                    self.parameterDeclaration()
                    self.state = 1628
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1625
                            self.match(ParaCParser.WS) 
                        self.state = 1630
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
             
                self.state = 1635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AbstractParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractParameterDeclaration" ):
                listener.enterAbstractParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractParameterDeclaration" ):
                listener.exitAbstractParameterDeclaration(self)


    class RegularParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularParameterDeclaration" ):
                listener.enterRegularParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularParameterDeclaration" ):
                listener.exitRegularParameterDeclaration(self)



    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_parameterDeclaration)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.RegularParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1636
                self.declarationSpecifiers()
                self.state = 1640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1637
                        self.match(ParaCParser.WS) 
                    self.state = 1642
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                self.state = 1643
                self.declarator()
                pass

            elif la_ == 2:
                localctx = ParaCParser.AbstractParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self.declarationSpecifiers()
                self.state = 1649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1646
                        self.match(ParaCParser.WS) 
                    self.state = 1651
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                self.state = 1653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1652
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.match(ParaCParser.Identifier)
            self.state = 1661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1658
                    self.match(ParaCParser.WS) 
                self.state = 1663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1664
                self.match(ParaCParser.Comma)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1665
                    self.match(ParaCParser.WS)
                    self.state = 1670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1671
                self.match(ParaCParser.Identifier)
                self.state = 1675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1672
                        self.match(ParaCParser.WS) 
                    self.state = 1677
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.specifierQualifierList()
            self.state = 1687
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1684
                    self.match(ParaCParser.WS) 
                self.state = 1689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1690
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1693
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 1694
                    self.pointer()


                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1697
                    self.match(ParaCParser.WS)
                    self.state = 1702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1703
                self.directAbstractDeclarator(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1707
                self.match(ParaCParser.LeftParen)
                self.state = 1711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1708
                        self.match(ParaCParser.WS) 
                    self.state = 1713
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                self.state = 1714
                self.abstractDeclarator()
                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1715
                    self.match(ParaCParser.WS)
                    self.state = 1720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1721
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 2:
                self.state = 1723
                self.match(ParaCParser.LeftBracket)
                self.state = 1727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1724
                        self.match(ParaCParser.WS) 
                    self.state = 1729
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 1730
                    self.typeQualifierList()


                self.state = 1736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1733
                        self.match(ParaCParser.WS) 
                    self.state = 1738
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.assignmentExpression()


                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1742
                    self.match(ParaCParser.WS)
                    self.state = 1747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1748
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 1749
                self.match(ParaCParser.LeftBracket)
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1750
                    self.match(ParaCParser.WS)
                    self.state = 1755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1756
                self.match(ParaCParser.Static)
                self.state = 1760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1757
                        self.match(ParaCParser.WS) 
                    self.state = 1762
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 1763
                    self.typeQualifierList()


                self.state = 1769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1766
                        self.match(ParaCParser.WS) 
                    self.state = 1771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                self.state = 1772
                self.assignmentExpression()
                self.state = 1776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1773
                    self.match(ParaCParser.WS)
                    self.state = 1778
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1779
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 1781
                self.match(ParaCParser.LeftBracket)
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1782
                    self.match(ParaCParser.WS)
                    self.state = 1787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1788
                self.typeQualifierList()
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1789
                    self.match(ParaCParser.WS)
                    self.state = 1794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1795
                self.match(ParaCParser.Static)
                self.state = 1799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1796
                        self.match(ParaCParser.WS) 
                    self.state = 1801
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

                self.state = 1802
                self.assignmentExpression()
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1803
                    self.match(ParaCParser.WS)
                    self.state = 1808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1809
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 1811
                self.match(ParaCParser.LeftBracket)
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1812
                    self.match(ParaCParser.WS)
                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1818
                self.match(ParaCParser.Star)
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1819
                    self.match(ParaCParser.WS)
                    self.state = 1824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1825
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 1826
                self.match(ParaCParser.LeftParen)
                self.state = 1830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1827
                        self.match(ParaCParser.WS) 
                    self.state = 1832
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 1833
                    self.parameterTypeList()


                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1836
                    self.match(ParaCParser.WS)
                    self.state = 1841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1842
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2000
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1845
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1846
                            self.match(ParaCParser.WS)
                            self.state = 1851
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1852
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1856
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1853
                                self.match(ParaCParser.WS) 
                            self.state = 1858
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

                        self.state = 1860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1859
                            self.typeQualifierList()


                        self.state = 1865
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1862
                                self.match(ParaCParser.WS) 
                            self.state = 1867
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

                        self.state = 1869
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                        if la_ == 1:
                            self.state = 1868
                            self.assignmentExpression()


                        self.state = 1874
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1871
                            self.match(ParaCParser.WS)
                            self.state = 1876
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1877
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1878
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1882
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1879
                            self.match(ParaCParser.WS)
                            self.state = 1884
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1885
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1886
                            self.match(ParaCParser.WS)
                            self.state = 1891
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1892
                        self.match(ParaCParser.Static)
                        self.state = 1896
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1893
                                self.match(ParaCParser.WS) 
                            self.state = 1898
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

                        self.state = 1900
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1899
                            self.typeQualifierList()


                        self.state = 1905
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1902
                                self.match(ParaCParser.WS) 
                            self.state = 1907
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                        self.state = 1908
                        self.assignmentExpression()
                        self.state = 1912
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1909
                            self.match(ParaCParser.WS)
                            self.state = 1914
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1915
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1917
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1918
                            self.match(ParaCParser.WS)
                            self.state = 1923
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1924
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1925
                            self.match(ParaCParser.WS)
                            self.state = 1930
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1931
                        self.typeQualifierList()
                        self.state = 1935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1932
                            self.match(ParaCParser.WS)
                            self.state = 1937
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1938
                        self.match(ParaCParser.Static)
                        self.state = 1942
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1939
                                self.match(ParaCParser.WS) 
                            self.state = 1944
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

                        self.state = 1945
                        self.assignmentExpression()
                        self.state = 1949
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1946
                            self.match(ParaCParser.WS)
                            self.state = 1951
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1952
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1954
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1955
                            self.match(ParaCParser.WS)
                            self.state = 1960
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1961
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1965
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1962
                            self.match(ParaCParser.WS)
                            self.state = 1967
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1968
                        self.match(ParaCParser.Star)
                        self.state = 1972
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1969
                            self.match(ParaCParser.WS)
                            self.state = 1974
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1975
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1976
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1980
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1977
                            self.match(ParaCParser.WS)
                            self.state = 1982
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1983
                        self.match(ParaCParser.LeftParen)
                        self.state = 1987
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1984
                                self.match(ParaCParser.WS) 
                            self.state = 1989
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

                        self.state = 1991
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                            self.state = 1990
                            self.parameterTypeList()


                        self.state = 1996
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1993
                            self.match(ParaCParser.WS)
                            self.state = 1998
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1999
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 2004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Alignof, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.WS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2007
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2008
                self.match(ParaCParser.LeftBrace)
                self.state = 2012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2009
                        self.match(ParaCParser.WS) 
                    self.state = 2014
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

                self.state = 2016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2015
                    self.initializerList()


                self.state = 2021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2018
                        self.match(ParaCParser.WS) 
                    self.state = 2023
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 2024
                    self.match(ParaCParser.Comma)


                self.state = 2030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2027
                    self.match(ParaCParser.WS)
                    self.state = 2032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2033
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 2036
                self.designation()


            self.state = 2042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2039
                    self.match(ParaCParser.WS) 
                self.state = 2044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

            self.state = 2045
            self.initializer()
            self.state = 2049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2046
                    self.match(ParaCParser.WS) 
                self.state = 2051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

            self.state = 2077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2052
                    self.match(ParaCParser.Comma)
                    self.state = 2056
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,299,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2053
                            self.match(ParaCParser.WS) 
                        self.state = 2058
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

                    self.state = 2060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 2059
                        self.designation()


                    self.state = 2065
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2062
                            self.match(ParaCParser.WS) 
                        self.state = 2067
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

                    self.state = 2068
                    self.initializer()
                    self.state = 2072
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2069
                            self.match(ParaCParser.WS) 
                        self.state = 2074
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
             
                self.state = 2079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_designation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            self.designatorList()
            self.state = 2084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2081
                self.match(ParaCParser.WS)
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2087
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2089
                self.designator()
                self.state = 2092 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_designator)
        self._la = 0 # Token type
        try:
            self.state = 2118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2094
                self.match(ParaCParser.LeftBracket)
                self.state = 2098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2095
                        self.match(ParaCParser.WS) 
                    self.state = 2100
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                self.state = 2101
                self.constantExpression()
                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2102
                    self.match(ParaCParser.WS)
                    self.state = 2107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2108
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2110
                self.match(ParaCParser.Dot)
                self.state = 2114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2111
                    self.match(ParaCParser.WS)
                    self.state = 2116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2117
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.match(ParaCParser.StaticAssert)
            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2121
                self.match(ParaCParser.WS)
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2127
            self.match(ParaCParser.LeftParen)
            self.state = 2131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2128
                    self.match(ParaCParser.WS) 
                self.state = 2133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

            self.state = 2134
            self.constantExpression()
            self.state = 2138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2135
                self.match(ParaCParser.WS)
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2141
            self.match(ParaCParser.Comma)
            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2142
                self.match(ParaCParser.WS)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2149 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2148
                self.match(ParaCParser.StringLiteral)
                self.state = 2151 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 2156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2153
                self.match(ParaCParser.WS)
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2159
            self.match(ParaCParser.RightParen)
            self.state = 2160
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def tryExceptStatement(self):
            return self.getTypedRuleContext(ParaCParser.TryExceptStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 2252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2162
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2163
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2164
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2165
                self.tryExceptStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2166
                self.selectionStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2167
                self.iterationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2168
                self.jumpStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2169
                self.match(ParaCParser.LeftParen)
                self.state = 2173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2170
                        self.match(ParaCParser.WS) 
                    self.state = 2175
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                self.state = 2202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2176
                    self.logicalOrExpression()
                    self.state = 2180
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2177
                            self.match(ParaCParser.WS) 
                        self.state = 2182
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

                    self.state = 2199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 2183
                        self.match(ParaCParser.Comma)
                        self.state = 2187
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2184
                                self.match(ParaCParser.WS) 
                            self.state = 2189
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

                        self.state = 2190
                        self.logicalOrExpression()
                        self.state = 2194
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2191
                                self.match(ParaCParser.WS) 
                            self.state = 2196
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

                        self.state = 2201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2204
                        self.match(ParaCParser.WS) 
                    self.state = 2209
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 2210
                    self.match(ParaCParser.Colon)
                    self.state = 2214
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2211
                            self.match(ParaCParser.WS) 
                        self.state = 2216
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

                    self.state = 2237
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                    if la_ == 1:
                        self.state = 2217
                        self.logicalOrExpression()
                        self.state = 2221
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2218
                                self.match(ParaCParser.WS) 
                            self.state = 2223
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

                        self.state = 2234
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 2224
                            self.match(ParaCParser.Comma)
                            self.state = 2228
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt==1:
                                    self.state = 2225
                                    self.match(ParaCParser.WS) 
                                self.state = 2230
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

                            self.state = 2231
                            self.logicalOrExpression()
                            self.state = 2236
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2244
                    self.match(ParaCParser.WS)
                    self.state = 2249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2250
                self.match(ParaCParser.RightParen)
                self.state = 2251
                self.endOfItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.state = 2307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2254
                self.match(ParaCParser.Identifier)
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2255
                    self.match(ParaCParser.WS)
                    self.state = 2260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2261
                self.match(ParaCParser.Colon)
                self.state = 2265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2262
                        self.match(ParaCParser.WS) 
                    self.state = 2267
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

                self.state = 2268
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2269
                self.match(ParaCParser.Case)
                self.state = 2273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2270
                        self.match(ParaCParser.WS) 
                    self.state = 2275
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

                self.state = 2276
                self.constantExpression()
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2277
                    self.match(ParaCParser.WS)
                    self.state = 2282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2283
                self.match(ParaCParser.Colon)
                self.state = 2287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2284
                        self.match(ParaCParser.WS) 
                    self.state = 2289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

                self.state = 2290
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2292
                self.match(ParaCParser.Default)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2293
                    self.match(ParaCParser.WS)
                    self.state = 2298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2299
                self.match(ParaCParser.Colon)
                self.state = 2303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,337,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2300
                        self.match(ParaCParser.WS) 
                    self.state = 2305
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,337,self._ctx)

                self.state = 2306
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.match(ParaCParser.LeftBrace)
            self.state = 2313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2310
                    self.match(ParaCParser.WS) 
                self.state = 2315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2316
                self.blockItemList()


            self.state = 2322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2319
                self.match(ParaCParser.WS)
                self.state = 2324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2325
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_blockItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2327
                    self.blockItem()

                else:
                    raise NoViableAltException(self)
                self.state = 2330 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_blockItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2332
                    self.match(ParaCParser.WS) 
                self.state = 2337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

            self.state = 2340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2338
                self.statement()
                pass

            elif la_ == 2:
                self.state = 2339
                self.declaration()
                pass


            self.state = 2345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2342
                    self.match(ParaCParser.WS) 
                self.state = 2347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Plus - 66)) | (1 << (ParaCParser.PlusPlus - 66)) | (1 << (ParaCParser.Minus - 66)) | (1 << (ParaCParser.MinusMinus - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.And - 66)) | (1 << (ParaCParser.AndAnd - 66)) | (1 << (ParaCParser.Not - 66)) | (1 << (ParaCParser.Tilde - 66)) | (1 << (ParaCParser.Identifier - 66)) | (1 << (ParaCParser.Constant - 66)) | (1 << (ParaCParser.DigitSequence - 66)) | (1 << (ParaCParser.StringLiteral - 66)) | (1 << (ParaCParser.WS - 66)))) != 0):
                self.state = 2348
                self.expression()


            self.state = 2351
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def exceptBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExceptBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExceptBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(ParaCParser.FinallyBlockContext,0)


        def elseBlock(self):
            return self.getTypedRuleContext(ParaCParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_tryExceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExceptStatement" ):
                listener.enterTryExceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExceptStatement" ):
                listener.exitTryExceptStatement(self)




    def tryExceptStatement(self):

        localctx = ParaCParser.TryExceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tryExceptStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(ParaCParser.T__0)
            self.state = 2357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2354
                self.match(ParaCParser.WS)
                self.state = 2359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2360
            self.compoundStatement()
            self.state = 2364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2361
                self.match(ParaCParser.WS)
                self.state = 2366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2368 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2367
                self.exceptBlock()
                self.state = 2370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.T__1):
                    break

            self.state = 2375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2372
                    self.match(ParaCParser.WS) 
                self.state = 2377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2378
                self.finallyBlock()
                self.state = 2382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2379
                        self.match(ParaCParser.WS) 
                    self.state = 2384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

                self.state = 2386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 2385
                    self.elseBlock()


                self.state = 2391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2388
                        self.match(ParaCParser.WS) 
                    self.state = 2393
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,353,self._ctx)


            elif la_ == 2:
                self.state = 2394
                self.elseBlock()
                self.state = 2398
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,354,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2395
                        self.match(ParaCParser.WS) 
                    self.state = 2400
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,354,self._ctx)

                self.state = 2402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__2:
                    self.state = 2401
                    self.finallyBlock()


                self.state = 2407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2404
                        self.match(ParaCParser.WS) 
                    self.state = 2409
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,356,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = ParaCParser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_exceptBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(ParaCParser.T__1)
            self.state = 2416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2413
                self.match(ParaCParser.WS)
                self.state = 2418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2419
            self.match(ParaCParser.LeftParen)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2420
                self.match(ParaCParser.WS)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2426
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 2427
                self.identifierList()
                pass


            self.state = 2433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2430
                self.match(ParaCParser.WS)
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2436
            self.match(ParaCParser.RightParen)
            self.state = 2440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,362,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2437
                    self.match(ParaCParser.WS) 
                self.state = 2442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

            self.state = 2451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.As:
                self.state = 2443
                self.match(ParaCParser.As)
                self.state = 2447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2444
                    self.match(ParaCParser.WS)
                    self.state = 2449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2450
                self.match(ParaCParser.Identifier)


            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2453
                self.match(ParaCParser.WS)
                self.state = 2458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2459
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = ParaCParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self.match(ParaCParser.T__2)
            self.state = 2465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2462
                self.match(ParaCParser.WS)
                self.state = 2467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2468
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)




    def elseBlock(self):

        localctx = ParaCParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_elseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2470
            self.match(ParaCParser.Else)
            self.state = 2474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2471
                self.match(ParaCParser.WS)
                self.state = 2476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2477
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_selectionStatement)
        self._la = 0 # Token type
        try:
            self.state = 2554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2479
                self.match(ParaCParser.If)
                self.state = 2483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2480
                    self.match(ParaCParser.WS)
                    self.state = 2485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2486
                self.match(ParaCParser.LeftParen)
                self.state = 2490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2487
                        self.match(ParaCParser.WS) 
                    self.state = 2492
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

                self.state = 2493
                self.expression()
                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2494
                    self.match(ParaCParser.WS)
                    self.state = 2499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2500
                self.match(ParaCParser.RightParen)
                self.state = 2504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,371,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2501
                        self.match(ParaCParser.WS) 
                    self.state = 2506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,371,self._ctx)

                self.state = 2507
                self.statement()
                self.state = 2511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2508
                        self.match(ParaCParser.WS) 
                    self.state = 2513
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

                self.state = 2522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2514
                    self.match(ParaCParser.Else)
                    self.state = 2518
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,373,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2515
                            self.match(ParaCParser.WS) 
                        self.state = 2520
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,373,self._ctx)

                    self.state = 2521
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2524
                self.match(ParaCParser.Switch)
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2525
                    self.match(ParaCParser.WS)
                    self.state = 2530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2531
                self.match(ParaCParser.LeftParen)
                self.state = 2535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2532
                        self.match(ParaCParser.WS) 
                    self.state = 2537
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

                self.state = 2538
                self.expression()
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2539
                    self.match(ParaCParser.WS)
                    self.state = 2544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2545
                self.match(ParaCParser.RightParen)
                self.state = 2549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2546
                        self.match(ParaCParser.WS) 
                    self.state = 2551
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

                self.state = 2552
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 2654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2556
                self.match(ParaCParser.While)
                self.state = 2560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2557
                    self.match(ParaCParser.WS)
                    self.state = 2562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2563
                self.match(ParaCParser.LeftParen)
                self.state = 2567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2564
                        self.match(ParaCParser.WS) 
                    self.state = 2569
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

                self.state = 2570
                self.expression()
                self.state = 2574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2571
                    self.match(ParaCParser.WS)
                    self.state = 2576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2577
                self.match(ParaCParser.RightParen)
                self.state = 2581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2578
                        self.match(ParaCParser.WS) 
                    self.state = 2583
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

                self.state = 2584
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2586
                self.match(ParaCParser.Do)
                self.state = 2590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,384,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2587
                        self.match(ParaCParser.WS) 
                    self.state = 2592
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,384,self._ctx)

                self.state = 2593
                self.statement()
                self.state = 2597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2594
                    self.match(ParaCParser.WS)
                    self.state = 2599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2600
                self.match(ParaCParser.While)
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2601
                    self.match(ParaCParser.WS)
                    self.state = 2606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2607
                self.match(ParaCParser.LeftParen)
                self.state = 2611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,387,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2608
                        self.match(ParaCParser.WS) 
                    self.state = 2613
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,387,self._ctx)

                self.state = 2614
                self.expression()
                self.state = 2618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2615
                    self.match(ParaCParser.WS)
                    self.state = 2620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2621
                self.match(ParaCParser.RightParen)
                self.state = 2622
                self.endOfItem()
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2624
                self.match(ParaCParser.For)
                self.state = 2628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2625
                    self.match(ParaCParser.WS)
                    self.state = 2630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2631
                self.match(ParaCParser.LeftParen)
                self.state = 2635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2632
                        self.match(ParaCParser.WS) 
                    self.state = 2637
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                self.state = 2638
                self.forCondition()
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2639
                    self.match(ParaCParser.WS)
                    self.state = 2644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2645
                self.match(ParaCParser.RightParen)
                self.state = 2649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,392,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2646
                        self.match(ParaCParser.WS) 
                    self.state = 2651
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

                self.state = 2652
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EndOfItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EndOfItemContext,i)


        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 2656
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Plus - 66)) | (1 << (ParaCParser.PlusPlus - 66)) | (1 << (ParaCParser.Minus - 66)) | (1 << (ParaCParser.MinusMinus - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.And - 66)) | (1 << (ParaCParser.AndAnd - 66)) | (1 << (ParaCParser.Not - 66)) | (1 << (ParaCParser.Tilde - 66)) | (1 << (ParaCParser.Identifier - 66)) | (1 << (ParaCParser.Constant - 66)) | (1 << (ParaCParser.DigitSequence - 66)) | (1 << (ParaCParser.StringLiteral - 66)) | (1 << (ParaCParser.WS - 66)))) != 0):
                    self.state = 2657
                    self.expression()


                pass


            self.state = 2662
            self.endOfItem()
            self.state = 2664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Plus - 66)) | (1 << (ParaCParser.PlusPlus - 66)) | (1 << (ParaCParser.Minus - 66)) | (1 << (ParaCParser.MinusMinus - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.And - 66)) | (1 << (ParaCParser.AndAnd - 66)) | (1 << (ParaCParser.Not - 66)) | (1 << (ParaCParser.Tilde - 66)) | (1 << (ParaCParser.Identifier - 66)) | (1 << (ParaCParser.Constant - 66)) | (1 << (ParaCParser.DigitSequence - 66)) | (1 << (ParaCParser.StringLiteral - 66)) | (1 << (ParaCParser.WS - 66)))) != 0):
                self.state = 2663
                self.forExpression()


            self.state = 2666
            self.endOfItem()
            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.state = 2667
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.declarationSpecifiers()
            self.state = 2674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2671
                    self.match(ParaCParser.WS) 
                self.state = 2676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

            self.state = 2678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (ParaCParser.LeftParen - 54)) | (1 << (ParaCParser.Star - 54)) | (1 << (ParaCParser.Caret - 54)) | (1 << (ParaCParser.Identifier - 54)) | (1 << (ParaCParser.WS - 54)))) != 0):
                self.state = 2677
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2680
            self.assignmentExpression()
            self.state = 2684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2681
                    self.match(ParaCParser.WS) 
                self.state = 2686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

            self.state = 2703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 2687
                self.match(ParaCParser.Comma)
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,401,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2688
                        self.match(ParaCParser.WS) 
                    self.state = 2693
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,401,self._ctx)

                self.state = 2694
                self.assignmentExpression()
                self.state = 2698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,402,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2695
                        self.match(ParaCParser.WS) 
                    self.state = 2700
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,402,self._ctx)

                self.state = 2705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2706
                self.match(ParaCParser.Goto)
                self.state = 2710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2707
                    self.match(ParaCParser.WS)
                    self.state = 2712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2713
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 2714
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 2715
                self.match(ParaCParser.Return)
                self.state = 2719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,405,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2716
                        self.match(ParaCParser.WS) 
                    self.state = 2721
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,405,self._ctx)

                self.state = 2723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ParaCParser.Plus - 66)) | (1 << (ParaCParser.PlusPlus - 66)) | (1 << (ParaCParser.Minus - 66)) | (1 << (ParaCParser.MinusMinus - 66)) | (1 << (ParaCParser.Star - 66)) | (1 << (ParaCParser.And - 66)) | (1 << (ParaCParser.AndAnd - 66)) | (1 << (ParaCParser.Not - 66)) | (1 << (ParaCParser.Tilde - 66)) | (1 << (ParaCParser.Identifier - 66)) | (1 << (ParaCParser.Constant - 66)) | (1 << (ParaCParser.DigitSequence - 66)) | (1 << (ParaCParser.StringLiteral - 66)) | (1 << (ParaCParser.WS - 66)))) != 0):
                    self.state = 2722
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 2725
                self.match(ParaCParser.Goto)
                self.state = 2729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2726
                        self.match(ParaCParser.WS) 
                    self.state = 2731
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

                self.state = 2732
                self.unaryExpression()
                pass


            self.state = 2735
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)) | (1 << (ParaCParser.DecoratorSign - 70)) | (1 << (ParaCParser.Semi - 70)) | (1 << (ParaCParser.Identifier - 70)) | (1 << (ParaCParser.WS - 70)) | (1 << (ParaCParser.Whitespace - 70)))) != 0):
                self.state = 2737
                self.translationUnit()


            self.state = 2740
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalItemContext,i)


        def endOfItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EndOfItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EndOfItemContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 2742
                    self.externalItem()
                    pass

                elif la_ == 2:
                    self.state = 2743
                    self.endOfItem()
                    pass

                elif la_ == 3:
                    self.state = 2745 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2744
                            self.match(ParaCParser.WS)

                        else:
                            raise NoViableAltException(self)
                        self.state = 2747 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,410,self._ctx)

                    pass


                self.state = 2751 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)) | (1 << (ParaCParser.DecoratorSign - 70)) | (1 << (ParaCParser.Semi - 70)) | (1 << (ParaCParser.Identifier - 70)) | (1 << (ParaCParser.WS - 70)) | (1 << (ParaCParser.Whitespace - 70)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_externalItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalFunctionDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunctionDefinition" ):
                listener.enterExternalFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunctionDefinition" ):
                listener.exitExternalFunctionDefinition(self)


    class ExternalDeclarationContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)


    class ExternalExtTaskDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionTaskDefinition(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalExtTaskDefinition" ):
                listener.enterExternalExtTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalExtTaskDefinition" ):
                listener.exitExternalExtTaskDefinition(self)



    def externalItem(self):

        localctx = ParaCParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_externalItem)
        try:
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.ExternalFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2753
                self.functionDefinition()
                pass

            elif la_ == 2:
                localctx = ParaCParser.ExternalDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2754
                self.declaration()
                pass

            elif la_ == 3:
                localctx = ParaCParser.ExternalExtTaskDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2755
                self.extensionTaskDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StandardFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFunctionDefinition" ):
                listener.enterStandardFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFunctionDefinition" ):
                listener.exitStandardFunctionDefinition(self)


    class SimpleFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionDefinition" ):
                listener.enterSimpleFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionDefinition" ):
                listener.exitSimpleFunctionDefinition(self)



    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.StandardFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2758
                self.functionDeclarationSpecifiers()
                self.state = 2762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2759
                        self.match(ParaCParser.WS) 
                    self.state = 2764
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,414,self._ctx)

                self.state = 2765
                self.declarator()
                self.state = 2769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2766
                        self.match(ParaCParser.WS) 
                    self.state = 2771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

                self.state = 2773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 2772
                    self.declarationList()


                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2775
                    self.match(ParaCParser.WS)
                    self.state = 2780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2781
                self.compoundStatement()
                pass

            elif la_ == 2:
                localctx = ParaCParser.SimpleFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2783
                self.functionDeclarationSpecifiers()
                self.state = 2787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,418,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2784
                        self.match(ParaCParser.WS) 
                    self.state = 2789
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,418,self._ctx)

                self.state = 2790
                self.declarator()
                self.state = 2794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2791
                        self.match(ParaCParser.WS) 
                    self.state = 2796
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

                self.state = 2798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 2797
                    self.declarationList()


                self.state = 2803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2800
                    self.match(ParaCParser.WS)
                    self.state = 2805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2806
                self.expressionLambda()
                self.state = 2807
                self.endOfItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decoratorSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DecoratorSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DecoratorSpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationSpecifiers" ):
                listener.enterFunctionDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationSpecifiers" ):
                listener.exitFunctionDeclarationSpecifiers(self)




    def functionDeclarationSpecifiers(self):

        localctx = ParaCParser.FunctionDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_functionDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.DecoratorSign:
                self.state = 2811
                self.decoratorSpecifier()
                self.state = 2816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,424,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2817
                    self.match(ParaCParser.WS) 
                self.state = 2822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,424,self._ctx)

            self.state = 2824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 2823
                self.declarationSpecifiers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecoratorSign(self):
            return self.getToken(ParaCParser.DecoratorSign, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_decoratorSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorSpecifier" ):
                listener.enterDecoratorSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorSpecifier" ):
                listener.exitDecoratorSpecifier(self)




    def decoratorSpecifier(self):

        localctx = ParaCParser.DecoratorSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_decoratorSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2826
            self.match(ParaCParser.DecoratorSign)
            self.state = 2827
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExtensionTask(self):
            return self.getToken(ParaCParser.ExtensionTask, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def extensionTaskParameterList(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskDefinition" ):
                listener.enterExtensionTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskDefinition" ):
                listener.exitExtensionTaskDefinition(self)




    def extensionTaskDefinition(self):

        localctx = ParaCParser.ExtensionTaskDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_extensionTaskDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self.match(ParaCParser.ExtensionTask)
            self.state = 2833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2830
                self.match(ParaCParser.WS)
                self.state = 2835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2836
            self.match(ParaCParser.Identifier)
            self.state = 2840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2837
                self.match(ParaCParser.WS)
                self.state = 2842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2843
            self.directDeclarator(0)
            self.state = 2847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,428,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2844
                    self.match(ParaCParser.WS) 
                self.state = 2849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,428,self._ctx)

            self.state = 2851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                self.state = 2850
                self.declarationList()


            self.state = 2856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2853
                self.match(ParaCParser.WS)
                self.state = 2858
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2859
            self.extensionTaskParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def extensionTaskParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExtensionTaskParameterContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameterList" ):
                listener.enterExtensionTaskParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameterList" ):
                listener.exitExtensionTaskParameterList(self)




    def extensionTaskParameterList(self):

        localctx = ParaCParser.ExtensionTaskParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_extensionTaskParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            self.match(ParaCParser.LeftBrace)
            self.state = 2865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2862
                self.match(ParaCParser.WS)
                self.state = 2867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Identifier:
                self.state = 2868
                self.extensionTaskParameter()
                self.state = 2872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2869
                    self.match(ParaCParser.WS)
                    self.state = 2874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Comma:
                    self.state = 2875
                    self.match(ParaCParser.Comma)
                    self.state = 2879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 2876
                        self.match(ParaCParser.WS)
                        self.state = 2881
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2882
                    self.extensionTaskParameter()
                    self.state = 2886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 2883
                        self.match(ParaCParser.WS)
                        self.state = 2888
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2896
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameter" ):
                listener.enterExtensionTaskParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameter" ):
                listener.exitExtensionTaskParameter(self)




    def extensionTaskParameter(self):

        localctx = ParaCParser.ExtensionTaskParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_extensionTaskParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2898
            self.match(ParaCParser.Identifier)
            self.state = 2902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2899
                self.match(ParaCParser.WS)
                self.state = 2904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2905
            self.match(ParaCParser.Colon)
            self.state = 2909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2906
                self.match(ParaCParser.WS)
                self.state = 2911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2912
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2914
                self.declaration()
                self.state = 2918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,439,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2915
                        self.match(ParaCParser.WS) 
                    self.state = 2920
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,439,self._ctx)

                self.state = 2923 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Whitespace(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Whitespace)
            else:
                return self.getToken(ParaCParser.Whitespace, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_endOfItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfItem" ):
                listener.enterEndOfItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfItem" ):
                listener.exitEndOfItem(self)




    def endOfItem(self):

        localctx = ParaCParser.EndOfItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_endOfItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Whitespace:
                self.state = 2925
                self.match(ParaCParser.Whitespace)
                self.state = 2930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2931
            self.match(ParaCParser.Semi)
            self.state = 2935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,442,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2932
                    self.match(ParaCParser.Whitespace) 
                self.state = 2937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,442,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.castOrConvertExpression_sempred
        self._predicates[32] = self.typeSpecifier_sempred
        self._predicates[49] = self.directDeclarator_sempred
        self._predicates[59] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def castOrConvertExpression_sempred(self, localctx:CastOrConvertExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




