# Generated from ./grammar/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3x")
        buf.write("\u0bb6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\3")
        buf.write("\2\3\2\3\2\7\2\u00c0\n\2\f\2\16\2\u00c3\13\2\3\2\3\2\3")
        buf.write("\2\6\2\u00c8\n\2\r\2\16\2\u00c9\3\2\3\2\3\2\3\2\3\2\5")
        buf.write("\2\u00d1\n\2\3\3\3\3\7\3\u00d5\n\3\f\3\16\3\u00d8\13\3")
        buf.write("\3\3\5\3\u00db\n\3\3\3\7\3\u00de\n\3\f\3\16\3\u00e1\13")
        buf.write("\3\3\3\3\3\7\3\u00e5\n\3\f\3\16\3\u00e8\13\3\3\3\3\3\3")
        buf.write("\4\3\4\5\4\u00ee\n\4\3\5\3\5\7\5\u00f2\n\5\f\5\16\5\u00f5")
        buf.write("\13\5\3\5\3\5\3\6\3\6\7\6\u00fb\n\6\f\6\16\6\u00fe\13")
        buf.write("\6\3\6\3\6\3\7\3\7\3\7\7\7\u0105\n\7\f\7\16\7\u0108\13")
        buf.write("\7\3\7\3\7\7\7\u010c\n\7\f\7\16\7\u010f\13\7\3\7\3\7\7")
        buf.write("\7\u0113\n\7\f\7\16\7\u0116\13\7\3\7\3\7\7\7\u011a\n\7")
        buf.write("\f\7\16\7\u011d\13\7\3\7\3\7\7\7\u0121\n\7\f\7\16\7\u0124")
        buf.write("\13\7\3\7\5\7\u0127\n\7\3\7\7\7\u012a\n\7\f\7\16\7\u012d")
        buf.write("\13\7\3\7\3\7\5\7\u0131\n\7\3\7\7\7\u0134\n\7\f\7\16\7")
        buf.write("\u0137\13\7\3\7\3\7\7\7\u013b\n\7\f\7\16\7\u013e\13\7")
        buf.write("\3\7\3\7\7\7\u0142\n\7\f\7\16\7\u0145\13\7\3\7\3\7\3\7")
        buf.write("\3\7\7\7\u014b\n\7\f\7\16\7\u014e\13\7\3\7\5\7\u0151\n")
        buf.write("\7\3\7\7\7\u0154\n\7\f\7\16\7\u0157\13\7\3\7\3\7\3\7\7")
        buf.write("\7\u015c\n\7\f\7\16\7\u015f\13\7\3\7\3\7\7\7\u0163\n\7")
        buf.write("\f\7\16\7\u0166\13\7\3\b\3\b\7\b\u016a\n\b\f\b\16\b\u016d")
        buf.write("\13\b\3\b\3\b\7\b\u0171\n\b\f\b\16\b\u0174\13\b\3\b\3")
        buf.write("\b\7\b\u0178\n\b\f\b\16\b\u017b\13\b\7\b\u017d\n\b\f\b")
        buf.write("\16\b\u0180\13\b\3\t\7\t\u0183\n\t\f\t\16\t\u0186\13\t")
        buf.write("\3\t\7\t\u0189\n\t\f\t\16\t\u018c\13\t\3\t\3\t\3\t\7\t")
        buf.write("\u0191\n\t\f\t\16\t\u0194\13\t\3\t\3\t\3\t\3\t\7\t\u019a")
        buf.write("\n\t\f\t\16\t\u019d\13\t\3\t\3\t\7\t\u01a1\n\t\f\t\16")
        buf.write("\t\u01a4\13\t\3\t\3\t\7\t\u01a8\n\t\f\t\16\t\u01ab\13")
        buf.write("\t\3\t\3\t\3\t\3\t\7\t\u01b1\n\t\f\t\16\t\u01b4\13\t\3")
        buf.write("\t\5\t\u01b7\n\t\3\n\3\n\3\13\3\13\3\13\7\13\u01be\n\13")
        buf.write("\f\13\16\13\u01c1\13\13\3\13\3\13\7\13\u01c5\n\13\f\13")
        buf.write("\16\13\u01c8\13\13\3\13\3\13\7\13\u01cc\n\13\f\13\16\13")
        buf.write("\u01cf\13\13\3\13\3\13\3\13\3\13\5\13\u01d5\n\13\3\13")
        buf.write("\3\13\7\13\u01d9\n\13\f\13\16\13\u01dc\13\13\3\13\3\13")
        buf.write("\7\13\u01e0\n\13\f\13\16\13\u01e3\13\13\3\13\7\13\u01e6")
        buf.write("\n\13\f\13\16\13\u01e9\13\13\3\f\3\f\7\f\u01ed\n\f\f\f")
        buf.write("\16\f\u01f0\13\f\3\f\3\f\7\f\u01f4\n\f\f\f\16\f\u01f7")
        buf.write("\13\f\3\f\3\f\7\f\u01fb\n\f\f\f\16\f\u01fe\13\f\7\f\u0200")
        buf.write("\n\f\f\f\16\f\u0203\13\f\3\r\3\r\7\r\u0207\n\r\f\r\16")
        buf.write("\r\u020a\13\r\3\r\3\r\7\r\u020e\n\r\f\r\16\r\u0211\13")
        buf.write("\r\3\r\3\r\7\r\u0215\n\r\f\r\16\r\u0218\13\r\7\r\u021a")
        buf.write("\n\r\f\r\16\r\u021d\13\r\3\16\3\16\7\16\u0221\n\16\f\16")
        buf.write("\16\16\u0224\13\16\3\16\3\16\7\16\u0228\n\16\f\16\16\16")
        buf.write("\u022b\13\16\3\16\3\16\7\16\u022f\n\16\f\16\16\16\u0232")
        buf.write("\13\16\7\16\u0234\n\16\f\16\16\16\u0237\13\16\3\17\3\17")
        buf.write("\7\17\u023b\n\17\f\17\16\17\u023e\13\17\3\17\3\17\7\17")
        buf.write("\u0242\n\17\f\17\16\17\u0245\13\17\3\17\3\17\7\17\u0249")
        buf.write("\n\17\f\17\16\17\u024c\13\17\7\17\u024e\n\17\f\17\16\17")
        buf.write("\u0251\13\17\3\20\3\20\7\20\u0255\n\20\f\20\16\20\u0258")
        buf.write("\13\20\3\20\3\20\7\20\u025c\n\20\f\20\16\20\u025f\13\20")
        buf.write("\3\20\3\20\7\20\u0263\n\20\f\20\16\20\u0266\13\20\7\20")
        buf.write("\u0268\n\20\f\20\16\20\u026b\13\20\3\21\3\21\7\21\u026f")
        buf.write("\n\21\f\21\16\21\u0272\13\21\3\21\3\21\7\21\u0276\n\21")
        buf.write("\f\21\16\21\u0279\13\21\3\21\3\21\7\21\u027d\n\21\f\21")
        buf.write("\16\21\u0280\13\21\7\21\u0282\n\21\f\21\16\21\u0285\13")
        buf.write("\21\3\22\3\22\7\22\u0289\n\22\f\22\16\22\u028c\13\22\3")
        buf.write("\22\3\22\7\22\u0290\n\22\f\22\16\22\u0293\13\22\3\22\3")
        buf.write("\22\7\22\u0297\n\22\f\22\16\22\u029a\13\22\7\22\u029c")
        buf.write("\n\22\f\22\16\22\u029f\13\22\3\23\3\23\7\23\u02a3\n\23")
        buf.write("\f\23\16\23\u02a6\13\23\3\23\3\23\7\23\u02aa\n\23\f\23")
        buf.write("\16\23\u02ad\13\23\3\23\3\23\7\23\u02b1\n\23\f\23\16\23")
        buf.write("\u02b4\13\23\7\23\u02b6\n\23\f\23\16\23\u02b9\13\23\3")
        buf.write("\24\3\24\7\24\u02bd\n\24\f\24\16\24\u02c0\13\24\3\24\3")
        buf.write("\24\7\24\u02c4\n\24\f\24\16\24\u02c7\13\24\3\24\3\24\7")
        buf.write("\24\u02cb\n\24\f\24\16\24\u02ce\13\24\7\24\u02d0\n\24")
        buf.write("\f\24\16\24\u02d3\13\24\3\25\3\25\7\25\u02d7\n\25\f\25")
        buf.write("\16\25\u02da\13\25\3\25\3\25\7\25\u02de\n\25\f\25\16\25")
        buf.write("\u02e1\13\25\3\25\3\25\7\25\u02e5\n\25\f\25\16\25\u02e8")
        buf.write("\13\25\7\25\u02ea\n\25\f\25\16\25\u02ed\13\25\3\26\3\26")
        buf.write("\7\26\u02f1\n\26\f\26\16\26\u02f4\13\26\3\26\3\26\7\26")
        buf.write("\u02f8\n\26\f\26\16\26\u02fb\13\26\3\26\3\26\7\26\u02ff")
        buf.write("\n\26\f\26\16\26\u0302\13\26\3\26\3\26\7\26\u0306\n\26")
        buf.write("\f\26\16\26\u0309\13\26\3\26\3\26\7\26\u030d\n\26\f\26")
        buf.write("\16\26\u0310\13\26\5\26\u0312\n\26\3\27\3\27\3\27\7\27")
        buf.write("\u0317\n\27\f\27\16\27\u031a\13\27\3\27\3\27\7\27\u031e")
        buf.write("\n\27\f\27\16\27\u0321\13\27\3\27\3\27\3\27\5\27\u0326")
        buf.write("\n\27\3\30\3\30\3\31\3\31\7\31\u032c\n\31\f\31\16\31\u032f")
        buf.write("\13\31\3\31\3\31\7\31\u0333\n\31\f\31\16\31\u0336\13\31")
        buf.write("\3\31\3\31\7\31\u033a\n\31\f\31\16\31\u033d\13\31\7\31")
        buf.write("\u033f\n\31\f\31\16\31\u0342\13\31\3\32\3\32\3\33\3\33")
        buf.write("\7\33\u0348\n\33\f\33\16\33\u034b\13\33\3\33\5\33\u034e")
        buf.write("\n\33\3\33\3\33\3\33\5\33\u0353\n\33\3\34\3\34\7\34\u0357")
        buf.write("\n\34\f\34\16\34\u035a\13\34\6\34\u035c\n\34\r\34\16\34")
        buf.write("\u035d\3\35\3\35\3\35\3\35\3\35\5\35\u0365\n\35\3\36\3")
        buf.write("\36\7\36\u0369\n\36\f\36\16\36\u036c\13\36\3\36\3\36\7")
        buf.write("\36\u0370\n\36\f\36\16\36\u0373\13\36\3\36\3\36\7\36\u0377")
        buf.write("\n\36\f\36\16\36\u037a\13\36\7\36\u037c\n\36\f\36\16\36")
        buf.write("\u037f\13\36\3\37\3\37\7\37\u0383\n\37\f\37\16\37\u0386")
        buf.write("\13\37\3\37\3\37\7\37\u038a\n\37\f\37\16\37\u038d\13\37")
        buf.write("\3\37\3\37\7\37\u0391\n\37\f\37\16\37\u0394\13\37\5\37")
        buf.write("\u0396\n\37\3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!")
        buf.write("\7!\u03a6\n!\f!\16!\u03a9\13!\3!\3!\7!\u03ad\n!\f!\16")
        buf.write("!\u03b0\13!\3!\3!\7!\u03b4\n!\f!\16!\u03b7\13!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\5!\u03c1\n!\3!\3!\7!\u03c5\n!\f!\16!")
        buf.write("\u03c8\13!\3!\3!\7!\u03cc\n!\f!\16!\u03cf\13!\3!\3!\7")
        buf.write("!\u03d3\n!\f!\16!\u03d6\13!\3!\3!\3!\3!\3!\3!\3!\7!\u03df")
        buf.write("\n!\f!\16!\u03e2\13!\3!\3!\7!\u03e6\n!\f!\16!\u03e9\13")
        buf.write("!\3!\3!\7!\u03ed\n!\f!\16!\u03f0\13!\3!\3!\5!\u03f4\n")
        buf.write("!\3!\3!\7!\u03f8\n!\f!\16!\u03fb\13!\3!\7!\u03fe\n!\f")
        buf.write("!\16!\u0401\13!\3\"\3\"\7\"\u0405\n\"\f\"\16\"\u0408\13")
        buf.write("\"\3\"\3\"\7\"\u040c\n\"\f\"\16\"\u040f\13\"\5\"\u0411")
        buf.write("\n\"\3\"\3\"\7\"\u0415\n\"\f\"\16\"\u0418\13\"\3\"\7\"")
        buf.write("\u041b\n\"\f\"\16\"\u041e\13\"\3\"\7\"\u0421\n\"\f\"\16")
        buf.write("\"\u0424\13\"\3\"\3\"\3\"\3\"\7\"\u042a\n\"\f\"\16\"\u042d")
        buf.write("\13\"\3\"\3\"\5\"\u0431\n\"\3#\3#\3$\7$\u0436\n$\f$\16")
        buf.write("$\u0439\13$\3$\3$\7$\u043d\n$\f$\16$\u0440\13$\6$\u0442")
        buf.write("\n$\r$\16$\u0443\3%\3%\7%\u0448\n%\f%\16%\u044b\13%\3")
        buf.write("%\5%\u044e\n%\3%\3%\3%\5%\u0453\n%\3&\3&\5&\u0457\n&\3")
        buf.write("&\7&\u045a\n&\f&\16&\u045d\13&\3&\5&\u0460\n&\3\'\3\'")
        buf.write("\7\'\u0464\n\'\f\'\16\'\u0467\13\'\3\'\3\'\7\'\u046b\n")
        buf.write("\'\f\'\16\'\u046e\13\'\3\'\7\'\u0471\n\'\f\'\16\'\u0474")
        buf.write("\13\'\3(\3(\5(\u0478\n(\3(\7(\u047b\n(\f(\16(\u047e\13")
        buf.write("(\3(\3(\7(\u0482\n(\f(\16(\u0485\13(\3(\5(\u0488\n(\3")
        buf.write(")\3)\7)\u048c\n)\f)\16)\u048f\13)\3)\5)\u0492\n)\3)\7")
        buf.write(")\u0495\n)\f)\16)\u0498\13)\3)\3)\7)\u049c\n)\f)\16)\u049f")
        buf.write("\13)\3)\3)\7)\u04a3\n)\f)\16)\u04a6\13)\3)\5)\u04a9\n")
        buf.write(")\3)\7)\u04ac\n)\f)\16)\u04af\13)\3)\3)\3)\3)\7)\u04b5")
        buf.write("\n)\f)\16)\u04b8\13)\3)\5)\u04bb\n)\3*\3*\7*\u04bf\n*")
        buf.write("\f*\16*\u04c2\13*\3*\3*\7*\u04c6\n*\f*\16*\u04c9\13*\3")
        buf.write("*\3*\7*\u04cd\n*\f*\16*\u04d0\13*\7*\u04d2\n*\f*\16*\u04d5")
        buf.write("\13*\3+\3+\7+\u04d9\n+\f+\16+\u04dc\13+\3+\3+\7+\u04e0")
        buf.write("\n+\f+\16+\u04e3\13+\3+\3+\7+\u04e7\n+\f+\16+\u04ea\13")
        buf.write("+\5+\u04ec\n+\3,\3,\3-\3-\7-\u04f2\n-\f-\16-\u04f5\13")
        buf.write("-\3-\3-\7-\u04f9\n-\f-\16-\u04fc\13-\3-\3-\7-\u0500\n")
        buf.write("-\f-\16-\u0503\13-\3-\3-\7-\u0507\n-\f-\16-\u050a\13-")
        buf.write("\3.\3.\3/\3/\3\60\3\60\7\60\u0512\n\60\f\60\16\60\u0515")
        buf.write("\13\60\3\60\3\60\7\60\u0519\n\60\f\60\16\60\u051c\13\60")
        buf.write("\3\60\3\60\5\60\u0520\n\60\3\60\7\60\u0523\n\60\f\60\16")
        buf.write("\60\u0526\13\60\3\60\3\60\3\61\5\61\u052b\n\61\3\61\7")
        buf.write("\61\u052e\n\61\f\61\16\61\u0531\13\61\3\61\3\61\3\62\3")
        buf.write("\62\3\62\3\62\7\62\u0539\n\62\f\62\16\62\u053c\13\62\3")
        buf.write("\62\3\62\7\62\u0540\n\62\f\62\16\62\u0543\13\62\3\62\3")
        buf.write("\62\3\62\3\62\7\62\u0549\n\62\f\62\16\62\u054c\13\62\3")
        buf.write("\62\3\62\7\62\u0550\n\62\f\62\16\62\u0553\13\62\3\62\3")
        buf.write("\62\3\62\7\62\u0558\n\62\f\62\16\62\u055b\13\62\3\62\5")
        buf.write("\62\u055e\n\62\3\62\7\62\u0561\n\62\f\62\16\62\u0564\13")
        buf.write("\62\3\62\3\62\7\62\u0568\n\62\f\62\16\62\u056b\13\62\3")
        buf.write("\62\3\62\7\62\u056f\n\62\f\62\16\62\u0572\13\62\3\62\3")
        buf.write("\62\5\62\u0576\n\62\3\62\3\62\7\62\u057a\n\62\f\62\16")
        buf.write("\62\u057d\13\62\3\62\3\62\7\62\u0581\n\62\f\62\16\62\u0584")
        buf.write("\13\62\3\62\5\62\u0587\n\62\3\62\7\62\u058a\n\62\f\62")
        buf.write("\16\62\u058d\13\62\3\62\5\62\u0590\n\62\3\62\7\62\u0593")
        buf.write("\n\62\f\62\16\62\u0596\13\62\3\62\3\62\3\62\7\62\u059b")
        buf.write("\n\62\f\62\16\62\u059e\13\62\3\62\3\62\7\62\u05a2\n\62")
        buf.write("\f\62\16\62\u05a5\13\62\3\62\3\62\7\62\u05a9\n\62\f\62")
        buf.write("\16\62\u05ac\13\62\3\62\5\62\u05af\n\62\3\62\7\62\u05b2")
        buf.write("\n\62\f\62\16\62\u05b5\13\62\3\62\3\62\7\62\u05b9\n\62")
        buf.write("\f\62\16\62\u05bc\13\62\3\62\3\62\3\62\3\62\7\62\u05c2")
        buf.write("\n\62\f\62\16\62\u05c5\13\62\3\62\3\62\7\62\u05c9\n\62")
        buf.write("\f\62\16\62\u05cc\13\62\3\62\3\62\7\62\u05d0\n\62\f\62")
        buf.write("\16\62\u05d3\13\62\3\62\3\62\3\62\7\62\u05d8\n\62\f\62")
        buf.write("\16\62\u05db\13\62\3\62\3\62\3\62\3\62\7\62\u05e1\n\62")
        buf.write("\f\62\16\62\u05e4\13\62\3\62\3\62\7\62\u05e8\n\62\f\62")
        buf.write("\16\62\u05eb\13\62\3\62\5\62\u05ee\n\62\3\62\7\62\u05f1")
        buf.write("\n\62\f\62\16\62\u05f4\13\62\3\62\3\62\7\62\u05f8\n\62")
        buf.write("\f\62\16\62\u05fb\13\62\3\62\3\62\3\62\7\62\u0600\n\62")
        buf.write("\f\62\16\62\u0603\13\62\3\62\3\62\7\62\u0607\n\62\f\62")
        buf.write("\16\62\u060a\13\62\3\62\3\62\7\62\u060e\n\62\f\62\16\62")
        buf.write("\u0611\13\62\3\62\3\62\3\62\3\62\7\62\u0617\n\62\f\62")
        buf.write("\16\62\u061a\13\62\3\62\3\62\7\62\u061e\n\62\f\62\16\62")
        buf.write("\u0621\13\62\3\62\5\62\u0624\n\62\3\62\7\62\u0627\n\62")
        buf.write("\f\62\16\62\u062a\13\62\3\62\7\62\u062d\n\62\f\62\16\62")
        buf.write("\u0630\13\62\3\63\3\63\3\63\7\63\u0635\n\63\f\63\16\63")
        buf.write("\u0638\13\63\3\63\3\63\7\63\u063c\n\63\f\63\16\63\u063f")
        buf.write("\13\63\3\63\3\63\7\63\u0643\n\63\f\63\16\63\u0646\13\63")
        buf.write("\3\64\3\64\7\64\u064a\n\64\f\64\16\64\u064d\13\64\3\64")
        buf.write("\5\64\u0650\n\64\3\64\7\64\u0653\n\64\f\64\16\64\u0656")
        buf.write("\13\64\6\64\u0658\n\64\r\64\16\64\u0659\3\65\6\65\u065d")
        buf.write("\n\65\r\65\16\65\u065e\3\66\3\66\7\66\u0663\n\66\f\66")
        buf.write("\16\66\u0666\13\66\3\66\3\66\7\66\u066a\n\66\f\66\16\66")
        buf.write("\u066d\13\66\3\66\3\66\7\66\u0671\n\66\f\66\16\66\u0674")
        buf.write("\13\66\5\66\u0676\n\66\3\67\3\67\7\67\u067a\n\67\f\67")
        buf.write("\16\67\u067d\13\67\3\67\3\67\7\67\u0681\n\67\f\67\16\67")
        buf.write("\u0684\13\67\3\67\3\67\7\67\u0688\n\67\f\67\16\67\u068b")
        buf.write("\13\67\7\67\u068d\n\67\f\67\16\67\u0690\13\67\38\38\7")
        buf.write("8\u0694\n8\f8\168\u0697\138\38\38\38\38\78\u069d\n8\f")
        buf.write("8\168\u06a0\138\38\58\u06a3\n8\58\u06a5\n8\39\39\79\u06a9")
        buf.write("\n9\f9\169\u06ac\139\39\39\79\u06b0\n9\f9\169\u06b3\13")
        buf.write("9\39\39\79\u06b7\n9\f9\169\u06ba\139\79\u06bc\n9\f9\16")
        buf.write("9\u06bf\139\3:\3:\7:\u06c3\n:\f:\16:\u06c6\13:\3:\5:\u06c9")
        buf.write("\n:\3;\3;\5;\u06cd\n;\3;\7;\u06d0\n;\f;\16;\u06d3\13;")
        buf.write("\3;\5;\u06d6\n;\3<\3<\3<\7<\u06db\n<\f<\16<\u06de\13<")
        buf.write("\3<\3<\7<\u06e2\n<\f<\16<\u06e5\13<\3<\3<\3<\3<\7<\u06eb")
        buf.write("\n<\f<\16<\u06ee\13<\3<\5<\u06f1\n<\3<\7<\u06f4\n<\f<")
        buf.write("\16<\u06f7\13<\3<\5<\u06fa\n<\3<\7<\u06fd\n<\f<\16<\u0700")
        buf.write("\13<\3<\3<\3<\7<\u0705\n<\f<\16<\u0708\13<\3<\3<\7<\u070c")
        buf.write("\n<\f<\16<\u070f\13<\3<\5<\u0712\n<\3<\7<\u0715\n<\f<")
        buf.write("\16<\u0718\13<\3<\3<\7<\u071c\n<\f<\16<\u071f\13<\3<\3")
        buf.write("<\3<\3<\7<\u0725\n<\f<\16<\u0728\13<\3<\3<\7<\u072c\n")
        buf.write("<\f<\16<\u072f\13<\3<\3<\7<\u0733\n<\f<\16<\u0736\13<")
        buf.write("\3<\3<\7<\u073a\n<\f<\16<\u073d\13<\3<\3<\3<\3<\7<\u0743")
        buf.write("\n<\f<\16<\u0746\13<\3<\3<\7<\u074a\n<\f<\16<\u074d\13")
        buf.write("<\3<\3<\3<\7<\u0752\n<\f<\16<\u0755\13<\3<\5<\u0758\n")
        buf.write("<\3<\7<\u075b\n<\f<\16<\u075e\13<\3<\5<\u0761\n<\3<\3")
        buf.write("<\7<\u0765\n<\f<\16<\u0768\13<\3<\3<\7<\u076c\n<\f<\16")
        buf.write("<\u076f\13<\3<\5<\u0772\n<\3<\7<\u0775\n<\f<\16<\u0778")
        buf.write("\13<\3<\5<\u077b\n<\3<\7<\u077e\n<\f<\16<\u0781\13<\3")
        buf.write("<\3<\3<\7<\u0786\n<\f<\16<\u0789\13<\3<\3<\7<\u078d\n")
        buf.write("<\f<\16<\u0790\13<\3<\3<\7<\u0794\n<\f<\16<\u0797\13<")
        buf.write("\3<\5<\u079a\n<\3<\7<\u079d\n<\f<\16<\u07a0\13<\3<\3<")
        buf.write("\7<\u07a4\n<\f<\16<\u07a7\13<\3<\3<\3<\3<\7<\u07ad\n<")
        buf.write("\f<\16<\u07b0\13<\3<\3<\7<\u07b4\n<\f<\16<\u07b7\13<\3")
        buf.write("<\3<\7<\u07bb\n<\f<\16<\u07be\13<\3<\3<\7<\u07c2\n<\f")
        buf.write("<\16<\u07c5\13<\3<\3<\7<\u07c9\n<\f<\16<\u07cc\13<\3<")
        buf.write("\3<\3<\3<\7<\u07d2\n<\f<\16<\u07d5\13<\3<\3<\7<\u07d9")
        buf.write("\n<\f<\16<\u07dc\13<\3<\3<\7<\u07e0\n<\f<\16<\u07e3\13")
        buf.write("<\3<\3<\3<\7<\u07e8\n<\f<\16<\u07eb\13<\3<\3<\7<\u07ef")
        buf.write("\n<\f<\16<\u07f2\13<\3<\5<\u07f5\n<\3<\7<\u07f8\n<\f<")
        buf.write("\16<\u07fb\13<\3<\7<\u07fe\n<\f<\16<\u0801\13<\3=\3=\3")
        buf.write(">\3>\3>\7>\u0808\n>\f>\16>\u080b\13>\3>\5>\u080e\n>\3")
        buf.write(">\7>\u0811\n>\f>\16>\u0814\13>\3>\5>\u0817\n>\3>\7>\u081a")
        buf.write("\n>\f>\16>\u081d\13>\3>\5>\u0820\n>\3?\5?\u0823\n?\3?")
        buf.write("\7?\u0826\n?\f?\16?\u0829\13?\3?\3?\7?\u082d\n?\f?\16")
        buf.write("?\u0830\13?\3?\3?\7?\u0834\n?\f?\16?\u0837\13?\3?\5?\u083a")
        buf.write("\n?\3?\7?\u083d\n?\f?\16?\u0840\13?\3?\3?\7?\u0844\n?")
        buf.write("\f?\16?\u0847\13?\7?\u0849\n?\f?\16?\u084c\13?\3@\3@\7")
        buf.write("@\u0850\n@\f@\16@\u0853\13@\3@\3@\3A\6A\u0858\nA\rA\16")
        buf.write("A\u0859\3B\3B\7B\u085e\nB\fB\16B\u0861\13B\3B\3B\7B\u0865")
        buf.write("\nB\fB\16B\u0868\13B\3B\3B\3B\3B\7B\u086e\nB\fB\16B\u0871")
        buf.write("\13B\3B\5B\u0874\nB\3C\3C\7C\u0878\nC\fC\16C\u087b\13")
        buf.write("C\3C\3C\7C\u087f\nC\fC\16C\u0882\13C\3C\3C\7C\u0886\n")
        buf.write("C\fC\16C\u0889\13C\3C\3C\7C\u088d\nC\fC\16C\u0890\13C")
        buf.write("\3C\6C\u0893\nC\rC\16C\u0894\3C\7C\u0898\nC\fC\16C\u089b")
        buf.write("\13C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u08a9\nD\f")
        buf.write("D\16D\u08ac\13D\3D\3D\7D\u08b0\nD\fD\16D\u08b3\13D\3D")
        buf.write("\3D\7D\u08b7\nD\fD\16D\u08ba\13D\3D\3D\7D\u08be\nD\fD")
        buf.write("\16D\u08c1\13D\3D\3D\7D\u08c5\nD\fD\16D\u08c8\13D\3D\3")
        buf.write("D\7D\u08cc\nD\fD\16D\u08cf\13D\7D\u08d1\nD\fD\16D\u08d4")
        buf.write("\13D\5D\u08d6\nD\3D\7D\u08d9\nD\fD\16D\u08dc\13D\3D\3")
        buf.write("D\7D\u08e0\nD\fD\16D\u08e3\13D\3D\3D\7D\u08e7\nD\fD\16")
        buf.write("D\u08ea\13D\3D\3D\7D\u08ee\nD\fD\16D\u08f1\13D\3D\7D\u08f4")
        buf.write("\nD\fD\16D\u08f7\13D\5D\u08f9\nD\7D\u08fb\nD\fD\16D\u08fe")
        buf.write("\13D\3D\7D\u0901\nD\fD\16D\u0904\13D\3D\3D\5D\u0908\n")
        buf.write("D\3E\3E\7E\u090c\nE\fE\16E\u090f\13E\3E\3E\7E\u0913\n")
        buf.write("E\fE\16E\u0916\13E\3E\3E\3E\7E\u091b\nE\fE\16E\u091e\13")
        buf.write("E\3E\3E\7E\u0922\nE\fE\16E\u0925\13E\3E\3E\7E\u0929\n")
        buf.write("E\fE\16E\u092c\13E\3E\3E\3E\3E\7E\u0932\nE\fE\16E\u0935")
        buf.write("\13E\3E\3E\7E\u0939\nE\fE\16E\u093c\13E\3E\5E\u093f\n")
        buf.write("E\3F\3F\7F\u0943\nF\fF\16F\u0946\13F\3F\5F\u0949\nF\3")
        buf.write("F\7F\u094c\nF\fF\16F\u094f\13F\3F\3F\3G\6G\u0954\nG\r")
        buf.write("G\16G\u0955\3H\7H\u0959\nH\fH\16H\u095c\13H\3H\3H\5H\u0960")
        buf.write("\nH\3H\7H\u0963\nH\fH\16H\u0966\13H\3I\5I\u0969\nI\3I")
        buf.write("\3I\3J\3J\7J\u096f\nJ\fJ\16J\u0972\13J\3J\3J\7J\u0976")
        buf.write("\nJ\fJ\16J\u0979\13J\3J\6J\u097c\nJ\rJ\16J\u097d\3J\7")
        buf.write("J\u0981\nJ\fJ\16J\u0984\13J\3J\3J\7J\u0988\nJ\fJ\16J\u098b")
        buf.write("\13J\3J\5J\u098e\nJ\3J\7J\u0991\nJ\fJ\16J\u0994\13J\3")
        buf.write("J\3J\7J\u0998\nJ\fJ\16J\u099b\13J\3J\5J\u099e\nJ\3J\7")
        buf.write("J\u09a1\nJ\fJ\16J\u09a4\13J\5J\u09a6\nJ\3K\3K\7K\u09aa")
        buf.write("\nK\fK\16K\u09ad\13K\3K\3K\7K\u09b1\nK\fK\16K\u09b4\13")
        buf.write("K\3K\3K\5K\u09b8\nK\3K\7K\u09bb\nK\fK\16K\u09be\13K\3")
        buf.write("K\3K\7K\u09c2\nK\fK\16K\u09c5\13K\3K\3K\7K\u09c9\nK\f")
        buf.write("K\16K\u09cc\13K\3K\5K\u09cf\nK\3K\7K\u09d2\nK\fK\16K\u09d5")
        buf.write("\13K\3K\3K\3L\3L\7L\u09db\nL\fL\16L\u09de\13L\3L\3L\3")
        buf.write("M\3M\7M\u09e4\nM\fM\16M\u09e7\13M\3M\3M\3N\3N\7N\u09ed")
        buf.write("\nN\fN\16N\u09f0\13N\3N\3N\7N\u09f4\nN\fN\16N\u09f7\13")
        buf.write("N\3N\3N\7N\u09fb\nN\fN\16N\u09fe\13N\3N\3N\7N\u0a02\n")
        buf.write("N\fN\16N\u0a05\13N\3N\3N\7N\u0a09\nN\fN\16N\u0a0c\13N")
        buf.write("\3N\3N\7N\u0a10\nN\fN\16N\u0a13\13N\3N\5N\u0a16\nN\3N")
        buf.write("\3N\7N\u0a1a\nN\fN\16N\u0a1d\13N\3N\3N\7N\u0a21\nN\fN")
        buf.write("\16N\u0a24\13N\3N\3N\7N\u0a28\nN\fN\16N\u0a2b\13N\3N\3")
        buf.write("N\7N\u0a2f\nN\fN\16N\u0a32\13N\3N\3N\5N\u0a36\nN\3O\3")
        buf.write("O\7O\u0a3a\nO\fO\16O\u0a3d\13O\3O\3O\7O\u0a41\nO\fO\16")
        buf.write("O\u0a44\13O\3O\3O\7O\u0a48\nO\fO\16O\u0a4b\13O\3O\3O\7")
        buf.write("O\u0a4f\nO\fO\16O\u0a52\13O\3O\3O\3O\3O\7O\u0a58\nO\f")
        buf.write("O\16O\u0a5b\13O\3O\3O\7O\u0a5f\nO\fO\16O\u0a62\13O\3O")
        buf.write("\3O\7O\u0a66\nO\fO\16O\u0a69\13O\3O\3O\7O\u0a6d\nO\fO")
        buf.write("\16O\u0a70\13O\3O\3O\7O\u0a74\nO\fO\16O\u0a77\13O\3O\3")
        buf.write("O\3O\3O\3O\7O\u0a7e\nO\fO\16O\u0a81\13O\3O\3O\7O\u0a85")
        buf.write("\nO\fO\16O\u0a88\13O\3O\3O\7O\u0a8c\nO\fO\16O\u0a8f\13")
        buf.write("O\3O\3O\7O\u0a93\nO\fO\16O\u0a96\13O\3O\3O\5O\u0a9a\n")
        buf.write("O\3P\3P\5P\u0a9e\nP\5P\u0aa0\nP\3P\3P\5P\u0aa4\nP\3P\3")
        buf.write("P\5P\u0aa8\nP\3Q\3Q\7Q\u0aac\nQ\fQ\16Q\u0aaf\13Q\3Q\5")
        buf.write("Q\u0ab2\nQ\3R\3R\7R\u0ab6\nR\fR\16R\u0ab9\13R\3R\3R\7")
        buf.write("R\u0abd\nR\fR\16R\u0ac0\13R\3R\3R\7R\u0ac4\nR\fR\16R\u0ac7")
        buf.write("\13R\7R\u0ac9\nR\fR\16R\u0acc\13R\3S\3S\7S\u0ad0\nS\f")
        buf.write("S\16S\u0ad3\13S\3S\3S\3S\3S\7S\u0ad9\nS\fS\16S\u0adc\13")
        buf.write("S\3S\5S\u0adf\nS\3S\3S\7S\u0ae3\nS\fS\16S\u0ae6\13S\3")
        buf.write("S\5S\u0ae9\nS\3S\3S\3T\5T\u0aee\nT\3T\3T\3U\3U\3U\6U\u0af5")
        buf.write("\nU\rU\16U\u0af6\6U\u0af9\nU\rU\16U\u0afa\3V\3V\3V\5V")
        buf.write("\u0b00\nV\3W\3W\7W\u0b04\nW\fW\16W\u0b07\13W\3W\3W\7W")
        buf.write("\u0b0b\nW\fW\16W\u0b0e\13W\3W\5W\u0b11\nW\3W\7W\u0b14")
        buf.write("\nW\fW\16W\u0b17\13W\3W\3W\3W\3W\7W\u0b1d\nW\fW\16W\u0b20")
        buf.write("\13W\3W\3W\7W\u0b24\nW\fW\16W\u0b27\13W\3W\5W\u0b2a\n")
        buf.write("W\3W\7W\u0b2d\nW\fW\16W\u0b30\13W\3W\3W\3W\5W\u0b35\n")
        buf.write("W\3X\7X\u0b38\nX\fX\16X\u0b3b\13X\3X\7X\u0b3e\nX\fX\16")
        buf.write("X\u0b41\13X\3X\5X\u0b44\nX\3Y\3Y\3Y\3Z\3Z\7Z\u0b4b\nZ")
        buf.write("\fZ\16Z\u0b4e\13Z\3Z\3Z\7Z\u0b52\nZ\fZ\16Z\u0b55\13Z\3")
        buf.write("Z\3Z\7Z\u0b59\nZ\fZ\16Z\u0b5c\13Z\3Z\5Z\u0b5f\nZ\3Z\7")
        buf.write("Z\u0b62\nZ\fZ\16Z\u0b65\13Z\3Z\3Z\3[\3[\7[\u0b6b\n[\f")
        buf.write("[\16[\u0b6e\13[\3[\3[\7[\u0b72\n[\f[\16[\u0b75\13[\3[")
        buf.write("\3[\7[\u0b79\n[\f[\16[\u0b7c\13[\3[\3[\7[\u0b80\n[\f[")
        buf.write("\16[\u0b83\13[\7[\u0b85\n[\f[\16[\u0b88\13[\5[\u0b8a\n")
        buf.write("[\3[\3[\3\\\3\\\7\\\u0b90\n\\\f\\\16\\\u0b93\13\\\3\\")
        buf.write("\3\\\7\\\u0b97\n\\\f\\\16\\\u0b9a\13\\\3\\\3\\\3]\3]\7")
        buf.write("]\u0ba0\n]\f]\16]\u0ba3\13]\6]\u0ba5\n]\r]\16]\u0ba6\3")
        buf.write("^\7^\u0baa\n^\f^\16^\u0bad\13^\3^\3^\7^\u0bb1\n^\f^\16")
        buf.write("^\u0bb4\13^\3^\2\6\24@bv_\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\2\27\3\2mn\4\2MMOO\5\2")
        buf.write("**MMOO\4\2**88\7\2LLNNPPSSXY\3\2PR\4\2LLNN\3\2JK\3\2F")
        buf.write("I\3\2kl\3\2`j\b\2\17\17\34\34%%,,\61\61??\3\2\4\6\4\2")
        buf.write("..\62\62\6\2\23\23&&\65\6599\4\2\32\32==\3\2@A\4\2PPW")
        buf.write("W\3\2\b\t\4\2\n\n\65\65\4\2\20\20\24\24\2\u0d54\2\u00d0")
        buf.write("\3\2\2\2\4\u00d2\3\2\2\2\6\u00ed\3\2\2\2\b\u00ef\3\2\2")
        buf.write("\2\n\u00f8\3\2\2\2\f\u0130\3\2\2\2\16\u0167\3\2\2\2\20")
        buf.write("\u0184\3\2\2\2\22\u01b8\3\2\2\2\24\u01d4\3\2\2\2\26\u01ea")
        buf.write("\3\2\2\2\30\u0204\3\2\2\2\32\u021e\3\2\2\2\34\u0238\3")
        buf.write("\2\2\2\36\u0252\3\2\2\2 \u026c\3\2\2\2\"\u0286\3\2\2\2")
        buf.write("$\u02a0\3\2\2\2&\u02ba\3\2\2\2(\u02d4\3\2\2\2*\u02ee\3")
        buf.write("\2\2\2,\u0325\3\2\2\2.\u0327\3\2\2\2\60\u0329\3\2\2\2")
        buf.write("\62\u0343\3\2\2\2\64\u0352\3\2\2\2\66\u035b\3\2\2\28\u0364")
        buf.write("\3\2\2\2:\u0366\3\2\2\2<\u0380\3\2\2\2>\u0397\3\2\2\2")
        buf.write("@\u03f3\3\2\2\2B\u0430\3\2\2\2D\u0432\3\2\2\2F\u0441\3")
        buf.write("\2\2\2H\u0452\3\2\2\2J\u0456\3\2\2\2L\u0461\3\2\2\2N\u0487")
        buf.write("\3\2\2\2P\u04ba\3\2\2\2R\u04bc\3\2\2\2T\u04d6\3\2\2\2")
        buf.write("V\u04ed\3\2\2\2X\u04ef\3\2\2\2Z\u050b\3\2\2\2\\\u050d")
        buf.write("\3\2\2\2^\u050f\3\2\2\2`\u052a\3\2\2\2b\u0575\3\2\2\2")
        buf.write("d\u0644\3\2\2\2f\u0657\3\2\2\2h\u065c\3\2\2\2j\u0660\3")
        buf.write("\2\2\2l\u0677\3\2\2\2n\u06a4\3\2\2\2p\u06a6\3\2\2\2r\u06c0")
        buf.write("\3\2\2\2t\u06d5\3\2\2\2v\u0760\3\2\2\2x\u0802\3\2\2\2")
        buf.write("z\u081f\3\2\2\2|\u0822\3\2\2\2~\u084d\3\2\2\2\u0080\u0857")
        buf.write("\3\2\2\2\u0082\u0873\3\2\2\2\u0084\u0875\3\2\2\2\u0086")
        buf.write("\u0907\3\2\2\2\u0088\u093e\3\2\2\2\u008a\u0940\3\2\2\2")
        buf.write("\u008c\u0953\3\2\2\2\u008e\u095a\3\2\2\2\u0090\u0968\3")
        buf.write("\2\2\2\u0092\u096c\3\2\2\2\u0094\u09a7\3\2\2\2\u0096\u09d8")
        buf.write("\3\2\2\2\u0098\u09e1\3\2\2\2\u009a\u0a35\3\2\2\2\u009c")
        buf.write("\u0a99\3\2\2\2\u009e\u0a9f\3\2\2\2\u00a0\u0aa9\3\2\2\2")
        buf.write("\u00a2\u0ab3\3\2\2\2\u00a4\u0ae8\3\2\2\2\u00a6\u0aed\3")
        buf.write("\2\2\2\u00a8\u0af8\3\2\2\2\u00aa\u0aff\3\2\2\2\u00ac\u0b34")
        buf.write("\3\2\2\2\u00ae\u0b39\3\2\2\2\u00b0\u0b45\3\2\2\2\u00b2")
        buf.write("\u0b48\3\2\2\2\u00b4\u0b68\3\2\2\2\u00b6\u0b8d\3\2\2\2")
        buf.write("\u00b8\u0ba4\3\2\2\2\u00ba\u0bab\3\2\2\2\u00bc\u00d1\7")
        buf.write("p\2\2\u00bd\u00c1\7+\2\2\u00be\u00c0\7v\2\2\u00bf\u00be")
        buf.write("\3\2\2\2\u00c0\u00c3\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c4\3\2\2\2\u00c3\u00c1\3\2\2\2")
        buf.write("\u00c4\u00d1\7p\2\2\u00c5\u00d1\7q\2\2\u00c6\u00c8\7s")
        buf.write("\2\2\u00c7\u00c6\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00c7")
        buf.write("\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00d1\3\2\2\2\u00cb")
        buf.write("\u00cc\7@\2\2\u00cc\u00cd\5\60\31\2\u00cd\u00ce\7A\2\2")
        buf.write("\u00ce\u00d1\3\2\2\2\u00cf\u00d1\5\4\3\2\u00d0\u00bc\3")
        buf.write("\2\2\2\u00d0\u00bd\3\2\2\2\u00d0\u00c5\3\2\2\2\u00d0\u00c7")
        buf.write("\3\2\2\2\u00d0\u00cb\3\2\2\2\u00d0\u00cf\3\2\2\2\u00d1")
        buf.write("\3\3\2\2\2\u00d2\u00d6\7@\2\2\u00d3\u00d5\7v\2\2\u00d4")
        buf.write("\u00d3\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2")
        buf.write("\u00d6\u00d7\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8\u00d6\3")
        buf.write("\2\2\2\u00d9\u00db\5l\67\2\u00da\u00d9\3\2\2\2\u00da\u00db")
        buf.write("\3\2\2\2\u00db\u00df\3\2\2\2\u00dc\u00de\7v\2\2\u00dd")
        buf.write("\u00dc\3\2\2\2\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00e2\3\2\2\2\u00e1\u00df\3")
        buf.write("\2\2\2\u00e2\u00e6\7A\2\2\u00e3\u00e5\7v\2\2\u00e4\u00e3")
        buf.write("\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e7\3\2\2\2\u00e7\u00e9\3\2\2\2\u00e8\u00e6\3\2\2\2")
        buf.write("\u00e9\u00ea\5\6\4\2\u00ea\5\3\2\2\2\u00eb\u00ee\5\b\5")
        buf.write("\2\u00ec\u00ee\5\n\6\2\u00ed\u00eb\3\2\2\2\u00ed\u00ec")
        buf.write("\3\2\2\2\u00ee\7\3\2\2\2\u00ef\u00f3\7[\2\2\u00f0\u00f2")
        buf.write("\7v\2\2\u00f1\u00f0\3\2\2\2\u00f2\u00f5\3\2\2\2\u00f3")
        buf.write("\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f6\3\2\2\2")
        buf.write("\u00f5\u00f3\3\2\2\2\u00f6\u00f7\5\60\31\2\u00f7\t\3\2")
        buf.write("\2\2\u00f8\u00fc\7[\2\2\u00f9\u00fb\7v\2\2\u00fa\u00f9")
        buf.write("\3\2\2\2\u00fb\u00fe\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc")
        buf.write("\u00fd\3\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00fc\3\2\2\2")
        buf.write("\u00ff\u0100\5\u008aF\2\u0100\13\3\2\2\2\u0101\u0131\5")
        buf.write("\2\2\2\u0102\u0106\7@\2\2\u0103\u0105\7v\2\2\u0104\u0103")
        buf.write("\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3\2\2\2\u0106")
        buf.write("\u0107\3\2\2\2\u0107\u0109\3\2\2\2\u0108\u0106\3\2\2\2")
        buf.write("\u0109\u010d\5r:\2\u010a\u010c\7v\2\2\u010b\u010a\3\2")
        buf.write("\2\2\u010c\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e")
        buf.write("\3\2\2\2\u010e\u0110\3\2\2\2\u010f\u010d\3\2\2\2\u0110")
        buf.write("\u0114\7A\2\2\u0111\u0113\7v\2\2\u0112\u0111\3\2\2\2\u0113")
        buf.write("\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115\u0117\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u011b\7")
        buf.write("D\2\2\u0118\u011a\7v\2\2\u0119\u0118\3\2\2\2\u011a\u011d")
        buf.write("\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u011e\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0122\5|?\2\u011f")
        buf.write("\u0121\7v\2\2\u0120\u011f\3\2\2\2\u0121\u0124\3\2\2\2")
        buf.write("\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0126\3")
        buf.write("\2\2\2\u0124\u0122\3\2\2\2\u0125\u0127\7_\2\2\u0126\u0125")
        buf.write("\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u012b\3\2\2\2\u0128")
        buf.write("\u012a\7v\2\2\u0129\u0128\3\2\2\2\u012a\u012d\3\2\2\2")
        buf.write("\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e\3")
        buf.write("\2\2\2\u012d\u012b\3\2\2\2\u012e\u012f\7E\2\2\u012f\u0131")
        buf.write("\3\2\2\2\u0130\u0101\3\2\2\2\u0130\u0102\3\2\2\2\u0131")
        buf.write("\u0135\3\2\2\2\u0132\u0134\7v\2\2\u0133\u0132\3\2\2\2")
        buf.write("\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3")
        buf.write("\2\2\2\u0136\u0164\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u013c")
        buf.write("\7B\2\2\u0139\u013b\7v\2\2\u013a\u0139\3\2\2\2\u013b\u013e")
        buf.write("\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d")
        buf.write("\u013f\3\2\2\2\u013e\u013c\3\2\2\2\u013f\u0143\5\60\31")
        buf.write("\2\u0140\u0142\7v\2\2\u0141\u0140\3\2\2\2\u0142\u0145")
        buf.write("\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0146\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0147\7C\2\2")
        buf.write("\u0147\u0163\3\2\2\2\u0148\u014c\7@\2\2\u0149\u014b\7")
        buf.write("v\2\2\u014a\u0149\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a")
        buf.write("\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u0150\3\2\2\2\u014e")
        buf.write("\u014c\3\2\2\2\u014f\u0151\5\16\b\2\u0150\u014f\3\2\2")
        buf.write("\2\u0150\u0151\3\2\2\2\u0151\u0155\3\2\2\2\u0152\u0154")
        buf.write("\7v\2\2\u0153\u0152\3\2\2\2\u0154\u0157\3\2\2\2\u0155")
        buf.write("\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0158\3\2\2\2")
        buf.write("\u0157\u0155\3\2\2\2\u0158\u0163\7A\2\2\u0159\u015d\t")
        buf.write("\2\2\2\u015a\u015c\7v\2\2\u015b\u015a\3\2\2\2\u015c\u015f")
        buf.write("\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0160\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0163\7p\2\2")
        buf.write("\u0161\u0163\t\3\2\2\u0162\u0138\3\2\2\2\u0162\u0148\3")
        buf.write("\2\2\2\u0162\u0159\3\2\2\2\u0162\u0161\3\2\2\2\u0163\u0166")
        buf.write("\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165")
        buf.write("\r\3\2\2\2\u0166\u0164\3\2\2\2\u0167\u016b\5,\27\2\u0168")
        buf.write("\u016a\7v\2\2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u017e\3")
        buf.write("\2\2\2\u016d\u016b\3\2\2\2\u016e\u0172\7_\2\2\u016f\u0171")
        buf.write("\7v\2\2\u0170\u016f\3\2\2\2\u0171\u0174\3\2\2\2\u0172")
        buf.write("\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\3\2\2\2")
        buf.write("\u0174\u0172\3\2\2\2\u0175\u0179\5,\27\2\u0176\u0178\7")
        buf.write("v\2\2\u0177\u0176\3\2\2\2\u0178\u017b\3\2\2\2\u0179\u0177")
        buf.write("\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017d\3\2\2\2\u017b")
        buf.write("\u0179\3\2\2\2\u017c\u016e\3\2\2\2\u017d\u0180\3\2\2\2")
        buf.write("\u017e\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f\17\3\2")
        buf.write("\2\2\u0180\u017e\3\2\2\2\u0181\u0183\t\4\2\2\u0182\u0181")
        buf.write("\3\2\2\2\u0183\u0186\3\2\2\2\u0184\u0182\3\2\2\2\u0184")
        buf.write("\u0185\3\2\2\2\u0185\u018a\3\2\2\2\u0186\u0184\3\2\2\2")
        buf.write("\u0187\u0189\7v\2\2\u0188\u0187\3\2\2\2\u0189\u018c\3")
        buf.write("\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u01b6")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018d\u01b7\5\f\7\2\u018e")
        buf.write("\u0192\5\22\n\2\u018f\u0191\7v\2\2\u0190\u018f\3\2\2\2")
        buf.write("\u0191\u0194\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193\3")
        buf.write("\2\2\2\u0193\u0195\3\2\2\2\u0194\u0192\3\2\2\2\u0195\u0196")
        buf.write("\5\24\13\2\u0196\u01b7\3\2\2\2\u0197\u019b\t\5\2\2\u0198")
        buf.write("\u019a\7v\2\2\u0199\u0198\3\2\2\2\u019a\u019d\3\2\2\2")
        buf.write("\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019e\3")
        buf.write("\2\2\2\u019d\u019b\3\2\2\2\u019e\u01a2\7@\2\2\u019f\u01a1")
        buf.write("\7v\2\2\u01a0\u019f\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2")
        buf.write("\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5\3\2\2\2")
        buf.write("\u01a4\u01a2\3\2\2\2\u01a5\u01a9\5r:\2\u01a6\u01a8\7v")
        buf.write("\2\2\u01a7\u01a6\3\2\2\2\u01a8\u01ab\3\2\2\2\u01a9\u01a7")
        buf.write("\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ac\3\2\2\2\u01ab")
        buf.write("\u01a9\3\2\2\2\u01ac\u01ad\7A\2\2\u01ad\u01b7\3\2\2\2")
        buf.write("\u01ae\u01b2\7U\2\2\u01af\u01b1\7v\2\2\u01b0\u01af\3\2")
        buf.write("\2\2\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b7\7p\2\2\u01b6\u018d\3\2\2\2\u01b6\u018e\3\2\2\2")
        buf.write("\u01b6\u0197\3\2\2\2\u01b6\u01ae\3\2\2\2\u01b7\21\3\2")
        buf.write("\2\2\u01b8\u01b9\t\6\2\2\u01b9\23\3\2\2\2\u01ba\u01bb")
        buf.write("\b\13\1\2\u01bb\u01bf\7@\2\2\u01bc\u01be\7v\2\2\u01bd")
        buf.write("\u01bc\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2")
        buf.write("\u01bf\u01c0\3\2\2\2\u01c0\u01c2\3\2\2\2\u01c1\u01bf\3")
        buf.write("\2\2\2\u01c2\u01c6\5r:\2\u01c3\u01c5\7v\2\2\u01c4\u01c3")
        buf.write("\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6")
        buf.write("\u01c7\3\2\2\2\u01c7\u01c9\3\2\2\2\u01c8\u01c6\3\2\2\2")
        buf.write("\u01c9\u01cd\7A\2\2\u01ca\u01cc\7v\2\2\u01cb\u01ca\3\2")
        buf.write("\2\2\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01ce")
        buf.write("\3\2\2\2\u01ce\u01d0\3\2\2\2\u01cf\u01cd\3\2\2\2\u01d0")
        buf.write("\u01d1\5\24\13\6\u01d1\u01d5\3\2\2\2\u01d2\u01d5\5\20")
        buf.write("\t\2\u01d3\u01d5\7r\2\2\u01d4\u01ba\3\2\2\2\u01d4\u01d2")
        buf.write("\3\2\2\2\u01d4\u01d3\3\2\2\2\u01d5\u01e7\3\2\2\2\u01d6")
        buf.write("\u01da\f\5\2\2\u01d7\u01d9\7v\2\2\u01d8\u01d7\3\2\2\2")
        buf.write("\u01d9\u01dc\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3")
        buf.write("\2\2\2\u01db\u01dd\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd\u01e1")
        buf.write("\7\16\2\2\u01de\u01e0\7v\2\2\u01df\u01de\3\2\2\2\u01e0")
        buf.write("\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\u01e4\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e6\5")
        buf.write("r:\2\u01e5\u01d6\3\2\2\2\u01e6\u01e9\3\2\2\2\u01e7\u01e5")
        buf.write("\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\25\3\2\2\2\u01e9\u01e7")
        buf.write("\3\2\2\2\u01ea\u01ee\5\24\13\2\u01eb\u01ed\7v\2\2\u01ec")
        buf.write("\u01eb\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee\u01ec\3\2\2\2")
        buf.write("\u01ee\u01ef\3\2\2\2\u01ef\u0201\3\2\2\2\u01f0\u01ee\3")
        buf.write("\2\2\2\u01f1\u01f5\t\7\2\2\u01f2\u01f4\7v\2\2\u01f3\u01f2")
        buf.write("\3\2\2\2\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5")
        buf.write("\u01f6\3\2\2\2\u01f6\u01f8\3\2\2\2\u01f7\u01f5\3\2\2\2")
        buf.write("\u01f8\u01fc\5\24\13\2\u01f9\u01fb\7v\2\2\u01fa\u01f9")
        buf.write("\3\2\2\2\u01fb\u01fe\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc")
        buf.write("\u01fd\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe\u01fc\3\2\2\2")
        buf.write("\u01ff\u01f1\3\2\2\2\u0200\u0203\3\2\2\2\u0201\u01ff\3")
        buf.write("\2\2\2\u0201\u0202\3\2\2\2\u0202\27\3\2\2\2\u0203\u0201")
        buf.write("\3\2\2\2\u0204\u0208\5\26\f\2\u0205\u0207\7v\2\2\u0206")
        buf.write("\u0205\3\2\2\2\u0207\u020a\3\2\2\2\u0208\u0206\3\2\2\2")
        buf.write("\u0208\u0209\3\2\2\2\u0209\u021b\3\2\2\2\u020a\u0208\3")
        buf.write("\2\2\2\u020b\u020f\t\b\2\2\u020c\u020e\7v\2\2\u020d\u020c")
        buf.write("\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f")
        buf.write("\u0210\3\2\2\2\u0210\u0212\3\2\2\2\u0211\u020f\3\2\2\2")
        buf.write("\u0212\u0216\5\26\f\2\u0213\u0215\7v\2\2\u0214\u0213\3")
        buf.write("\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0217")
        buf.write("\3\2\2\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0219")
        buf.write("\u020b\3\2\2\2\u021a\u021d\3\2\2\2\u021b\u0219\3\2\2\2")
        buf.write("\u021b\u021c\3\2\2\2\u021c\31\3\2\2\2\u021d\u021b\3\2")
        buf.write("\2\2\u021e\u0222\5\30\r\2\u021f\u0221\7v\2\2\u0220\u021f")
        buf.write("\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223\u0235\3\2\2\2\u0224\u0222\3\2\2\2")
        buf.write("\u0225\u0229\t\t\2\2\u0226\u0228\7v\2\2\u0227\u0226\3")
        buf.write("\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a")
        buf.write("\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u0229\3\2\2\2\u022c")
        buf.write("\u0230\5\30\r\2\u022d\u022f\7v\2\2\u022e\u022d\3\2\2\2")
        buf.write("\u022f\u0232\3\2\2\2\u0230\u022e\3\2\2\2\u0230\u0231\3")
        buf.write("\2\2\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2\u0233\u0225")
        buf.write("\3\2\2\2\u0234\u0237\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\33\3\2\2\2\u0237\u0235\3\2\2\2\u0238")
        buf.write("\u023c\5\32\16\2\u0239\u023b\7v\2\2\u023a\u0239\3\2\2")
        buf.write("\2\u023b\u023e\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d")
        buf.write("\3\2\2\2\u023d\u024f\3\2\2\2\u023e\u023c\3\2\2\2\u023f")
        buf.write("\u0243\t\n\2\2\u0240\u0242\7v\2\2\u0241\u0240\3\2\2\2")
        buf.write("\u0242\u0245\3\2\2\2\u0243\u0241\3\2\2\2\u0243\u0244\3")
        buf.write("\2\2\2\u0244\u0246\3\2\2\2\u0245\u0243\3\2\2\2\u0246\u024a")
        buf.write("\5\32\16\2\u0247\u0249\7v\2\2\u0248\u0247\3\2\2\2\u0249")
        buf.write("\u024c\3\2\2\2\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2")
        buf.write("\u024b\u024e\3\2\2\2\u024c\u024a\3\2\2\2\u024d\u023f\3")
        buf.write("\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250")
        buf.write("\3\2\2\2\u0250\35\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u0256")
        buf.write("\5\34\17\2\u0253\u0255\7v\2\2\u0254\u0253\3\2\2\2\u0255")
        buf.write("\u0258\3\2\2\2\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2")
        buf.write("\u0257\u0269\3\2\2\2\u0258\u0256\3\2\2\2\u0259\u025d\t")
        buf.write("\13\2\2\u025a\u025c\7v\2\2\u025b\u025a\3\2\2\2\u025c\u025f")
        buf.write("\3\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("\u0260\3\2\2\2\u025f\u025d\3\2\2\2\u0260\u0264\5\34\17")
        buf.write("\2\u0261\u0263\7v\2\2\u0262\u0261\3\2\2\2\u0263\u0266")
        buf.write("\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265")
        buf.write("\u0268\3\2\2\2\u0266\u0264\3\2\2\2\u0267\u0259\3\2\2\2")
        buf.write("\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269\u026a\3")
        buf.write("\2\2\2\u026a\37\3\2\2\2\u026b\u0269\3\2\2\2\u026c\u0270")
        buf.write("\5\36\20\2\u026d\u026f\7v\2\2\u026e\u026d\3\2\2\2\u026f")
        buf.write("\u0272\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0283\3\2\2\2\u0272\u0270\3\2\2\2\u0273\u0277\7")
        buf.write("S\2\2\u0274\u0276\7v\2\2\u0275\u0274\3\2\2\2\u0276\u0279")
        buf.write("\3\2\2\2\u0277\u0275\3\2\2\2\u0277\u0278\3\2\2\2\u0278")
        buf.write("\u027a\3\2\2\2\u0279\u0277\3\2\2\2\u027a\u027e\5\36\20")
        buf.write("\2\u027b\u027d\7v\2\2\u027c\u027b\3\2\2\2\u027d\u0280")
        buf.write("\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f\3\2\2\2\u027f")
        buf.write("\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0281\u0273\3\2\2\2")
        buf.write("\u0282\u0285\3\2\2\2\u0283\u0281\3\2\2\2\u0283\u0284\3")
        buf.write("\2\2\2\u0284!\3\2\2\2\u0285\u0283\3\2\2\2\u0286\u028a")
        buf.write("\5 \21\2\u0287\u0289\7v\2\2\u0288\u0287\3\2\2\2\u0289")
        buf.write("\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2")
        buf.write("\u028b\u029d\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u0291\7")
        buf.write("W\2\2\u028e\u0290\7v\2\2\u028f\u028e\3\2\2\2\u0290\u0293")
        buf.write("\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292")
        buf.write("\u0294\3\2\2\2\u0293\u0291\3\2\2\2\u0294\u0298\5 \21\2")
        buf.write("\u0295\u0297\7v\2\2\u0296\u0295\3\2\2\2\u0297\u029a\3")
        buf.write("\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029c")
        buf.write("\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u028d\3\2\2\2\u029c")
        buf.write("\u029f\3\2\2\2\u029d\u029b\3\2\2\2\u029d\u029e\3\2\2\2")
        buf.write("\u029e#\3\2\2\2\u029f\u029d\3\2\2\2\u02a0\u02a4\5\"\22")
        buf.write("\2\u02a1\u02a3\7v\2\2\u02a2\u02a1\3\2\2\2\u02a3\u02a6")
        buf.write("\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5")
        buf.write("\u02b7\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02ab\7T\2\2")
        buf.write("\u02a8\u02aa\7v\2\2\u02a9\u02a8\3\2\2\2\u02aa\u02ad\3")
        buf.write("\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae")
        buf.write("\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae\u02b2\5\"\22\2\u02af")
        buf.write("\u02b1\7v\2\2\u02b0\u02af\3\2\2\2\u02b1\u02b4\3\2\2\2")
        buf.write("\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b6\3")
        buf.write("\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02a7\3\2\2\2\u02b6\u02b9")
        buf.write("\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8")
        buf.write("%\3\2\2\2\u02b9\u02b7\3\2\2\2\u02ba\u02be\5$\23\2\u02bb")
        buf.write("\u02bd\7v\2\2\u02bc\u02bb\3\2\2\2\u02bd\u02c0\3\2\2\2")
        buf.write("\u02be\u02bc\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02d1\3")
        buf.write("\2\2\2\u02c0\u02be\3\2\2\2\u02c1\u02c5\7U\2\2\u02c2\u02c4")
        buf.write("\7v\2\2\u02c3\u02c2\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c8\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c8\u02cc\5$\23\2\u02c9\u02cb\7")
        buf.write("v\2\2\u02ca\u02c9\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02cf\u02c1\3\2\2\2\u02d0\u02d3\3\2\2\2")
        buf.write("\u02d1\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\'\3\2\2")
        buf.write("\2\u02d3\u02d1\3\2\2\2\u02d4\u02d8\5&\24\2\u02d5\u02d7")
        buf.write("\7v\2\2\u02d6\u02d5\3\2\2\2\u02d7\u02da\3\2\2\2\u02d8")
        buf.write("\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02eb\3\2\2\2")
        buf.write("\u02da\u02d8\3\2\2\2\u02db\u02df\7V\2\2\u02dc\u02de\7")
        buf.write("v\2\2\u02dd\u02dc\3\2\2\2\u02de\u02e1\3\2\2\2\u02df\u02dd")
        buf.write("\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2\3\2\2\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e2\u02e6\5&\24\2\u02e3\u02e5\7v\2\2")
        buf.write("\u02e4\u02e3\3\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4\3")
        buf.write("\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6")
        buf.write("\3\2\2\2\u02e9\u02db\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb")
        buf.write("\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec)\3\2\2\2\u02ed")
        buf.write("\u02eb\3\2\2\2\u02ee\u02f2\5(\25\2\u02ef\u02f1\7v\2\2")
        buf.write("\u02f0\u02ef\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3")
        buf.write("\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u0311\3\2\2\2\u02f4\u02f2")
        buf.write("\3\2\2\2\u02f5\u02f9\7\\\2\2\u02f6\u02f8\7v\2\2\u02f7")
        buf.write("\u02f6\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb\u02f9\3")
        buf.write("\2\2\2\u02fc\u0300\5\60\31\2\u02fd\u02ff\7v\2\2\u02fe")
        buf.write("\u02fd\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0300\3")
        buf.write("\2\2\2\u0303\u0307\7]\2\2\u0304\u0306\7v\2\2\u0305\u0304")
        buf.write("\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307")
        buf.write("\u0308\3\2\2\2\u0308\u030a\3\2\2\2\u0309\u0307\3\2\2\2")
        buf.write("\u030a\u030e\5*\26\2\u030b\u030d\7v\2\2\u030c\u030b\3")
        buf.write("\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f")
        buf.write("\3\2\2\2\u030f\u0312\3\2\2\2\u0310\u030e\3\2\2\2\u0311")
        buf.write("\u02f5\3\2\2\2\u0311\u0312\3\2\2\2\u0312+\3\2\2\2\u0313")
        buf.write("\u0326\5*\26\2\u0314\u0318\5\20\t\2\u0315\u0317\7v\2\2")
        buf.write("\u0316\u0315\3\2\2\2\u0317\u031a\3\2\2\2\u0318\u0316\3")
        buf.write("\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3\2\2\2\u031a\u0318")
        buf.write("\3\2\2\2\u031b\u031f\5.\30\2\u031c\u031e\7v\2\2\u031d")
        buf.write("\u031c\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2\2")
        buf.write("\u031f\u0320\3\2\2\2\u0320\u0322\3\2\2\2\u0321\u031f\3")
        buf.write("\2\2\2\u0322\u0323\5,\27\2\u0323\u0326\3\2\2\2\u0324\u0326")
        buf.write("\7r\2\2\u0325\u0313\3\2\2\2\u0325\u0314\3\2\2\2\u0325")
        buf.write("\u0324\3\2\2\2\u0326-\3\2\2\2\u0327\u0328\t\f\2\2\u0328")
        buf.write("/\3\2\2\2\u0329\u032d\5,\27\2\u032a\u032c\7v\2\2\u032b")
        buf.write("\u032a\3\2\2\2\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2")
        buf.write("\u032d\u032e\3\2\2\2\u032e\u0340\3\2\2\2\u032f\u032d\3")
        buf.write("\2\2\2\u0330\u0334\7_\2\2\u0331\u0333\7v\2\2\u0332\u0331")
        buf.write("\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0334\3\2\2\2")
        buf.write("\u0337\u033b\5,\27\2\u0338\u033a\7v\2\2\u0339\u0338\3")
        buf.write("\2\2\2\u033a\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u033b\3\2\2\2\u033e")
        buf.write("\u0330\3\2\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2")
        buf.write("\u0340\u0341\3\2\2\2\u0341\61\3\2\2\2\u0342\u0340\3\2")
        buf.write("\2\2\u0343\u0344\5*\26\2\u0344\63\3\2\2\2\u0345\u0349")
        buf.write("\5\66\34\2\u0346\u0348\7v\2\2\u0347\u0346\3\2\2\2\u0348")
        buf.write("\u034b\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2")
        buf.write("\u034a\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u034e\5")
        buf.write(":\36\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f")
        buf.write("\3\2\2\2\u034f\u0350\5\u00ba^\2\u0350\u0353\3\2\2\2\u0351")
        buf.write("\u0353\5\u0084C\2\u0352\u0345\3\2\2\2\u0352\u0351\3\2")
        buf.write("\2\2\u0353\65\3\2\2\2\u0354\u0358\58\35\2\u0355\u0357")
        buf.write("\7v\2\2\u0356\u0355\3\2\2\2\u0357\u035a\3\2\2\2\u0358")
        buf.write("\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035c\3\2\2\2")
        buf.write("\u035a\u0358\3\2\2\2\u035b\u0354\3\2\2\2\u035c\u035d\3")
        buf.write("\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\67")
        buf.write("\3\2\2\2\u035f\u0365\5> \2\u0360\u0365\5@!\2\u0361\u0365")
        buf.write("\5Z.\2\u0362\u0365\5\\/\2\u0363\u0365\5^\60\2\u0364\u035f")
        buf.write("\3\2\2\2\u0364\u0360\3\2\2\2\u0364\u0361\3\2\2\2\u0364")
        buf.write("\u0362\3\2\2\2\u0364\u0363\3\2\2\2\u03659\3\2\2\2\u0366")
        buf.write("\u036a\5<\37\2\u0367\u0369\7v\2\2\u0368\u0367\3\2\2\2")
        buf.write("\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2\u036a\u036b\3")
        buf.write("\2\2\2\u036b\u037d\3\2\2\2\u036c\u036a\3\2\2\2\u036d\u0371")
        buf.write("\7_\2\2\u036e\u0370\7v\2\2\u036f\u036e\3\2\2\2\u0370\u0373")
        buf.write("\3\2\2\2\u0371\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372")
        buf.write("\u0374\3\2\2\2\u0373\u0371\3\2\2\2\u0374\u0378\5<\37\2")
        buf.write("\u0375\u0377\7v\2\2\u0376\u0375\3\2\2\2\u0377\u037a\3")
        buf.write("\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037c")
        buf.write("\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u036d\3\2\2\2\u037c")
        buf.write("\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2")
        buf.write("\u037e;\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0384\5`\61")
        buf.write("\2\u0381\u0383\7v\2\2\u0382\u0381\3\2\2\2\u0383\u0386")
        buf.write("\3\2\2\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2\2\2\u0385")
        buf.write("\u0395\3\2\2\2\u0386\u0384\3\2\2\2\u0387\u038b\7`\2\2")
        buf.write("\u0388\u038a\7v\2\2\u0389\u0388\3\2\2\2\u038a\u038d\3")
        buf.write("\2\2\2\u038b\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038e")
        buf.write("\3\2\2\2\u038d\u038b\3\2\2\2\u038e\u0392\5z>\2\u038f\u0391")
        buf.write("\7v\2\2\u0390\u038f\3\2\2\2\u0391\u0394\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0396\3\2\2\2")
        buf.write("\u0394\u0392\3\2\2\2\u0395\u0387\3\2\2\2\u0395\u0396\3")
        buf.write("\2\2\2\u0396=\3\2\2\2\u0397\u0398\t\r\2\2\u0398?\3\2\2")
        buf.write("\2\u0399\u03c0\b!\1\2\u039a\u03c1\7\64\2\2\u039b\u03c1")
        buf.write("\7\22\2\2\u039c\u03c1\7(\2\2\u039d\u03c1\7\"\2\2\u039e")
        buf.write("\u03c1\7-\2\2\u039f\u03c1\7$\2\2\u03a0\u03c1\7\35\2\2")
        buf.write("\u03a1\u03c1\7\27\2\2\u03a2\u03c1\7)\2\2\u03a3\u03a7\7")
        buf.write("#\2\2\u03a4\u03a6\7v\2\2\u03a5\u03a4\3\2\2\2\u03a6\u03a9")
        buf.write("\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8")
        buf.write("\u03aa\3\2\2\2\u03a9\u03a7\3\2\2\2\u03aa\u03ae\7F\2\2")
        buf.write("\u03ab\u03ad\7v\2\2\u03ac\u03ab\3\2\2\2\u03ad\u03b0\3")
        buf.write("\2\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1")
        buf.write("\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b1\u03b5\5j\66\2\u03b2")
        buf.write("\u03b4\7v\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3\2\2\2")
        buf.write("\u03b5\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3")
        buf.write("\2\2\2\u03b7\u03b5\3\2\2\2\u03b8\u03b9\7H\2\2\u03b9\u03c1")
        buf.write("\3\2\2\2\u03ba\u03c1\7\63\2\2\u03bb\u03c1\7:\2\2\u03bc")
        buf.write("\u03c1\7\3\2\2\u03bd\u03c1\7\4\2\2\u03be\u03c1\7\5\2\2")
        buf.write("\u03bf\u03c1\7\6\2\2\u03c0\u039a\3\2\2\2\u03c0\u039b\3")
        buf.write("\2\2\2\u03c0\u039c\3\2\2\2\u03c0\u039d\3\2\2\2\u03c0\u039e")
        buf.write("\3\2\2\2\u03c0\u039f\3\2\2\2\u03c0\u03a0\3\2\2\2\u03c0")
        buf.write("\u03a1\3\2\2\2\u03c0\u03a2\3\2\2\2\u03c0\u03a3\3\2\2\2")
        buf.write("\u03c0\u03ba\3\2\2\2\u03c0\u03bb\3\2\2\2\u03c0\u03bc\3")
        buf.write("\2\2\2\u03c0\u03bd\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03bf")
        buf.write("\3\2\2\2\u03c1\u03f4\3\2\2\2\u03c2\u03c6\7\7\2\2\u03c3")
        buf.write("\u03c5\7v\2\2\u03c4\u03c3\3\2\2\2\u03c5\u03c8\3\2\2\2")
        buf.write("\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c9\3")
        buf.write("\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03cd\7@\2\2\u03ca\u03cc")
        buf.write("\7v\2\2\u03cb\u03ca\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd")
        buf.write("\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d0\3\2\2\2")
        buf.write("\u03cf\u03cd\3\2\2\2\u03d0\u03d4\t\16\2\2\u03d1\u03d3")
        buf.write("\7v\2\2\u03d2\u03d1\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4")
        buf.write("\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d7\3\2\2\2")
        buf.write("\u03d6\u03d4\3\2\2\2\u03d7\u03f4\7A\2\2\u03d8\u03f4\5")
        buf.write("X-\2\u03d9\u03f4\5B\"\2\u03da\u03f4\5P)\2\u03db\u03f4")
        buf.write("\5x=\2\u03dc\u03e0\7\60\2\2\u03dd\u03df\7v\2\2\u03de\u03dd")
        buf.write("\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0")
        buf.write("\u03e1\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03e0\3\2\2\2")
        buf.write("\u03e3\u03e7\7@\2\2\u03e4\u03e6\7v\2\2\u03e5\u03e4\3\2")
        buf.write("\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7\u03e8")
        buf.write("\3\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e7\3\2\2\2\u03ea")
        buf.write("\u03ee\5\62\32\2\u03eb\u03ed\7v\2\2\u03ec\u03eb\3\2\2")
        buf.write("\2\u03ed\u03f0\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef")
        buf.write("\3\2\2\2\u03ef\u03f1\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f1")
        buf.write("\u03f2\7A\2\2\u03f2\u03f4\3\2\2\2\u03f3\u0399\3\2\2\2")
        buf.write("\u03f3\u03c2\3\2\2\2\u03f3\u03d8\3\2\2\2\u03f3\u03d9\3")
        buf.write("\2\2\2\u03f3\u03da\3\2\2\2\u03f3\u03db\3\2\2\2\u03f3\u03dc")
        buf.write("\3\2\2\2\u03f4\u03ff\3\2\2\2\u03f5\u03f9\f\3\2\2\u03f6")
        buf.write("\u03f8\7v\2\2\u03f7\u03f6\3\2\2\2\u03f8\u03fb\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\3")
        buf.write("\2\2\2\u03fb\u03f9\3\2\2\2\u03fc\u03fe\5f\64\2\u03fd\u03f5")
        buf.write("\3\2\2\2\u03fe\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff")
        buf.write("\u0400\3\2\2\2\u0400A\3\2\2\2\u0401\u03ff\3\2\2\2\u0402")
        buf.write("\u0406\5D#\2\u0403\u0405\7v\2\2\u0404\u0403\3\2\2\2\u0405")
        buf.write("\u0408\3\2\2\2\u0406\u0404\3\2\2\2\u0406\u0407\3\2\2\2")
        buf.write("\u0407\u0410\3\2\2\2\u0408\u0406\3\2\2\2\u0409\u040d\7")
        buf.write("p\2\2\u040a\u040c\7v\2\2\u040b\u040a\3\2\2\2\u040c\u040f")
        buf.write("\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u0411\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0409\3\2\2\2")
        buf.write("\u0410\u0411\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0416\7")
        buf.write("D\2\2\u0413\u0415\7v\2\2\u0414\u0413\3\2\2\2\u0415\u0418")
        buf.write("\3\2\2\2\u0416\u0414\3\2\2\2\u0416\u0417\3\2\2\2\u0417")
        buf.write("\u041c\3\2\2\2\u0418\u0416\3\2\2\2\u0419\u041b\5F$\2\u041a")
        buf.write("\u0419\3\2\2\2\u041b\u041e\3\2\2\2\u041c\u041a\3\2\2\2")
        buf.write("\u041c\u041d\3\2\2\2\u041d\u0422\3\2\2\2\u041e\u041c\3")
        buf.write("\2\2\2\u041f\u0421\7v\2\2\u0420\u041f\3\2\2\2\u0421\u0424")
        buf.write("\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423\3\2\2\2\u0423")
        buf.write("\u0425\3\2\2\2\u0424\u0422\3\2\2\2\u0425\u0426\7E\2\2")
        buf.write("\u0426\u0431\3\2\2\2\u0427\u042b\5D#\2\u0428\u042a\7v")
        buf.write("\2\2\u0429\u0428\3\2\2\2\u042a\u042d\3\2\2\2\u042b\u0429")
        buf.write("\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042e\3\2\2\2\u042d")
        buf.write("\u042b\3\2\2\2\u042e\u042f\7p\2\2\u042f\u0431\3\2\2\2")
        buf.write("\u0430\u0402\3\2\2\2\u0430\u0427\3\2\2\2\u0431C\3\2\2")
        buf.write("\2\u0432\u0433\t\17\2\2\u0433E\3\2\2\2\u0434\u0436\7v")
        buf.write("\2\2\u0435\u0434\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435")
        buf.write("\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u043a\3\2\2\2\u0439")
        buf.write("\u0437\3\2\2\2\u043a\u043e\5H%\2\u043b\u043d\7v\2\2\u043c")
        buf.write("\u043b\3\2\2\2\u043d\u0440\3\2\2\2\u043e\u043c\3\2\2\2")
        buf.write("\u043e\u043f\3\2\2\2\u043f\u0442\3\2\2\2\u0440\u043e\3")
        buf.write("\2\2\2\u0441\u0437\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444G\3\2\2\2\u0445\u0449")
        buf.write("\5J&\2\u0446\u0448\7v\2\2\u0447\u0446\3\2\2\2\u0448\u044b")
        buf.write("\3\2\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2\u044a")
        buf.write("\u044d\3\2\2\2\u044b\u0449\3\2\2\2\u044c\u044e\5L\'\2")
        buf.write("\u044d\u044c\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3")
        buf.write("\2\2\2\u044f\u0450\5\u00ba^\2\u0450\u0453\3\2\2\2\u0451")
        buf.write("\u0453\5\u0084C\2\u0452\u0445\3\2\2\2\u0452\u0451\3\2")
        buf.write("\2\2\u0453I\3\2\2\2\u0454\u0457\5@!\2\u0455\u0457\5Z.")
        buf.write("\2\u0456\u0454\3\2\2\2\u0456\u0455\3\2\2\2\u0457\u045b")
        buf.write("\3\2\2\2\u0458\u045a\7v\2\2\u0459\u0458\3\2\2\2\u045a")
        buf.write("\u045d\3\2\2\2\u045b\u0459\3\2\2\2\u045b\u045c\3\2\2\2")
        buf.write("\u045c\u045f\3\2\2\2\u045d\u045b\3\2\2\2\u045e\u0460\5")
        buf.write("J&\2\u045f\u045e\3\2\2\2\u045f\u0460\3\2\2\2\u0460K\3")
        buf.write("\2\2\2\u0461\u0465\5N(\2\u0462\u0464\7v\2\2\u0463\u0462")
        buf.write("\3\2\2\2\u0464\u0467\3\2\2\2\u0465\u0463\3\2\2\2\u0465")
        buf.write("\u0466\3\2\2\2\u0466\u0472\3\2\2\2\u0467\u0465\3\2\2\2")
        buf.write("\u0468\u046c\7_\2\2\u0469\u046b\7v\2\2\u046a\u0469\3\2")
        buf.write("\2\2\u046b\u046e\3\2\2\2\u046c\u046a\3\2\2\2\u046c\u046d")
        buf.write("\3\2\2\2\u046d\u046f\3\2\2\2\u046e\u046c\3\2\2\2\u046f")
        buf.write("\u0471\5N(\2\u0470\u0468\3\2\2\2\u0471\u0474\3\2\2\2\u0472")
        buf.write("\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473M\3\2\2\2\u0474")
        buf.write("\u0472\3\2\2\2\u0475\u0488\5`\61\2\u0476\u0478\5`\61\2")
        buf.write("\u0477\u0476\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047c\3")
        buf.write("\2\2\2\u0479\u047b\7v\2\2\u047a\u0479\3\2\2\2\u047b\u047e")
        buf.write("\3\2\2\2\u047c\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d")
        buf.write("\u047f\3\2\2\2\u047e\u047c\3\2\2\2\u047f\u0483\7]\2\2")
        buf.write("\u0480\u0482\7v\2\2\u0481\u0480\3\2\2\2\u0482\u0485\3")
        buf.write("\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486")
        buf.write("\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0488\5\62\32\2\u0487")
        buf.write("\u0475\3\2\2\2\u0487\u0477\3\2\2\2\u0488O\3\2\2\2\u0489")
        buf.write("\u048d\7\33\2\2\u048a\u048c\7v\2\2\u048b\u048a\3\2\2\2")
        buf.write("\u048c\u048f\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048e\3")
        buf.write("\2\2\2\u048e\u0491\3\2\2\2\u048f\u048d\3\2\2\2\u0490\u0492")
        buf.write("\7p\2\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2\2\2\u0492")
        buf.write("\u0496\3\2\2\2\u0493\u0495\7v\2\2\u0494\u0493\3\2\2\2")
        buf.write("\u0495\u0498\3\2\2\2\u0496\u0494\3\2\2\2\u0496\u0497\3")
        buf.write("\2\2\2\u0497\u0499\3\2\2\2\u0498\u0496\3\2\2\2\u0499\u049d")
        buf.write("\7D\2\2\u049a\u049c\7v\2\2\u049b\u049a\3\2\2\2\u049c\u049f")
        buf.write("\3\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e")
        buf.write("\u04a0\3\2\2\2\u049f\u049d\3\2\2\2\u04a0\u04a4\5R*\2\u04a1")
        buf.write("\u04a3\7v\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3\2\2\2")
        buf.write("\u04a4\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a8\3")
        buf.write("\2\2\2\u04a6\u04a4\3\2\2\2\u04a7\u04a9\7_\2\2\u04a8\u04a7")
        buf.write("\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ad\3\2\2\2\u04aa")
        buf.write("\u04ac\7v\2\2\u04ab\u04aa\3\2\2\2\u04ac\u04af\3\2\2\2")
        buf.write("\u04ad\u04ab\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b0\3")
        buf.write("\2\2\2\u04af\u04ad\3\2\2\2\u04b0\u04b1\7E\2\2\u04b1\u04bb")
        buf.write("\3\2\2\2\u04b2\u04b6\7\33\2\2\u04b3\u04b5\7v\2\2\u04b4")
        buf.write("\u04b3\3\2\2\2\u04b5\u04b8\3\2\2\2\u04b6\u04b4\3\2\2\2")
        buf.write("\u04b6\u04b7\3\2\2\2\u04b7\u04b9\3\2\2\2\u04b8\u04b6\3")
        buf.write("\2\2\2\u04b9\u04bb\7p\2\2\u04ba\u0489\3\2\2\2\u04ba\u04b2")
        buf.write("\3\2\2\2\u04bbQ\3\2\2\2\u04bc\u04c0\5T+\2\u04bd\u04bf")
        buf.write("\7v\2\2\u04be\u04bd\3\2\2\2\u04bf\u04c2\3\2\2\2\u04c0")
        buf.write("\u04be\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04d3\3\2\2\2")
        buf.write("\u04c2\u04c0\3\2\2\2\u04c3\u04c7\7_\2\2\u04c4\u04c6\7")
        buf.write("v\2\2\u04c5\u04c4\3\2\2\2\u04c6\u04c9\3\2\2\2\u04c7\u04c5")
        buf.write("\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca\3\2\2\2\u04c9")
        buf.write("\u04c7\3\2\2\2\u04ca\u04ce\5T+\2\u04cb\u04cd\7v\2\2\u04cc")
        buf.write("\u04cb\3\2\2\2\u04cd\u04d0\3\2\2\2\u04ce\u04cc\3\2\2\2")
        buf.write("\u04ce\u04cf\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3")
        buf.write("\2\2\2\u04d1\u04c3\3\2\2\2\u04d2\u04d5\3\2\2\2\u04d3\u04d1")
        buf.write("\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4S\3\2\2\2\u04d5\u04d3")
        buf.write("\3\2\2\2\u04d6\u04da\5V,\2\u04d7\u04d9\7v\2\2\u04d8\u04d7")
        buf.write("\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da\u04d8\3\2\2\2\u04da")
        buf.write("\u04db\3\2\2\2\u04db\u04eb\3\2\2\2\u04dc\u04da\3\2\2\2")
        buf.write("\u04dd\u04e1\7`\2\2\u04de\u04e0\7v\2\2\u04df\u04de\3\2")
        buf.write("\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2")
        buf.write("\3\2\2\2\u04e2\u04e4\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4")
        buf.write("\u04e8\5\62\32\2\u04e5\u04e7\7v\2\2\u04e6\u04e5\3\2\2")
        buf.write("\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9")
        buf.write("\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb")
        buf.write("\u04dd\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ecU\3\2\2\2\u04ed")
        buf.write("\u04ee\7p\2\2\u04eeW\3\2\2\2\u04ef\u04f3\79\2\2\u04f0")
        buf.write("\u04f2\7v\2\2\u04f1\u04f0\3\2\2\2\u04f2\u04f5\3\2\2\2")
        buf.write("\u04f3\u04f1\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6\3")
        buf.write("\2\2\2\u04f5\u04f3\3\2\2\2\u04f6\u04fa\7@\2\2\u04f7\u04f9")
        buf.write("\7v\2\2\u04f8\u04f7\3\2\2\2\u04f9\u04fc\3\2\2\2\u04fa")
        buf.write("\u04f8\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fd\3\2\2\2")
        buf.write("\u04fc\u04fa\3\2\2\2\u04fd\u0501\5r:\2\u04fe\u0500\7v")
        buf.write("\2\2\u04ff\u04fe\3\2\2\2\u0500\u0503\3\2\2\2\u0501\u04ff")
        buf.write("\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0504\3\2\2\2\u0503")
        buf.write("\u0501\3\2\2\2\u0504\u0508\7A\2\2\u0505\u0507\7v\2\2\u0506")
        buf.write("\u0505\3\2\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2")
        buf.write("\u0508\u0509\3\2\2\2\u0509Y\3\2\2\2\u050a\u0508\3\2\2")
        buf.write("\2\u050b\u050c\t\20\2\2\u050c[\3\2\2\2\u050d\u050e\t\21")
        buf.write("\2\2\u050e]\3\2\2\2\u050f\u0513\7\67\2\2\u0510\u0512\7")
        buf.write("v\2\2\u0511\u0510\3\2\2\2\u0512\u0515\3\2\2\2\u0513\u0511")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2\2\2\u0515")
        buf.write("\u0513\3\2\2\2\u0516\u051a\7@\2\2\u0517\u0519\7v\2\2\u0518")
        buf.write("\u0517\3\2\2\2\u0519\u051c\3\2\2\2\u051a\u0518\3\2\2\2")
        buf.write("\u051a\u051b\3\2\2\2\u051b\u051f\3\2\2\2\u051c\u051a\3")
        buf.write("\2\2\2\u051d\u0520\5r:\2\u051e\u0520\5\62\32\2\u051f\u051d")
        buf.write("\3\2\2\2\u051f\u051e\3\2\2\2\u0520\u0524\3\2\2\2\u0521")
        buf.write("\u0523\7v\2\2\u0522\u0521\3\2\2\2\u0523\u0526\3\2\2\2")
        buf.write("\u0524\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0527\3")
        buf.write("\2\2\2\u0526\u0524\3\2\2\2\u0527\u0528\7A\2\2\u0528_\3")
        buf.write("\2\2\2\u0529\u052b\5f\64\2\u052a\u0529\3\2\2\2\u052a\u052b")
        buf.write("\3\2\2\2\u052b\u052f\3\2\2\2\u052c\u052e\7v\2\2\u052d")
        buf.write("\u052c\3\2\2\2\u052e\u0531\3\2\2\2\u052f\u052d\3\2\2\2")
        buf.write("\u052f\u0530\3\2\2\2\u0530\u0532\3\2\2\2\u0531\u052f\3")
        buf.write("\2\2\2\u0532\u0533\5b\62\2\u0533a\3\2\2\2\u0534\u0535")
        buf.write("\b\62\1\2\u0535\u0576\7p\2\2\u0536\u053a\7@\2\2\u0537")
        buf.write("\u0539\7v\2\2\u0538\u0537\3\2\2\2\u0539\u053c\3\2\2\2")
        buf.write("\u053a\u0538\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\3")
        buf.write("\2\2\2\u053c\u053a\3\2\2\2\u053d\u0541\5`\61\2\u053e\u0540")
        buf.write("\7v\2\2\u053f\u053e\3\2\2\2\u0540\u0543\3\2\2\2\u0541")
        buf.write("\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0544\3\2\2\2")
        buf.write("\u0543\u0541\3\2\2\2\u0544\u0545\7A\2\2\u0545\u0576\3")
        buf.write("\2\2\2\u0546\u054a\7p\2\2\u0547\u0549\7v\2\2\u0548\u0547")
        buf.write("\3\2\2\2\u0549\u054c\3\2\2\2\u054a\u0548\3\2\2\2\u054a")
        buf.write("\u054b\3\2\2\2\u054b\u054d\3\2\2\2\u054c\u054a\3\2\2\2")
        buf.write("\u054d\u0551\7]\2\2\u054e\u0550\7v\2\2\u054f\u054e\3\2")
        buf.write("\2\2\u0550\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0551\u0552")
        buf.write("\3\2\2\2\u0552\u0554\3\2\2\2\u0553\u0551\3\2\2\2\u0554")
        buf.write("\u0576\7r\2\2\u0555\u0559\7@\2\2\u0556\u0558\7v\2\2\u0557")
        buf.write("\u0556\3\2\2\2\u0558\u055b\3\2\2\2\u0559\u0557\3\2\2\2")
        buf.write("\u0559\u055a\3\2\2\2\u055a\u055d\3\2\2\2\u055b\u0559\3")
        buf.write("\2\2\2\u055c\u055e\5@!\2\u055d\u055c\3\2\2\2\u055d\u055e")
        buf.write("\3\2\2\2\u055e\u0562\3\2\2\2\u055f\u0561\7v\2\2\u0560")
        buf.write("\u055f\3\2\2\2\u0561\u0564\3\2\2\2\u0562\u0560\3\2\2\2")
        buf.write("\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0562\3")
        buf.write("\2\2\2\u0565\u0569\5f\64\2\u0566\u0568\7v\2\2\u0567\u0566")
        buf.write("\3\2\2\2\u0568\u056b\3\2\2\2\u0569\u0567\3\2\2\2\u0569")
        buf.write("\u056a\3\2\2\2\u056a\u056c\3\2\2\2\u056b\u0569\3\2\2\2")
        buf.write("\u056c\u0570\5b\62\2\u056d\u056f\7v\2\2\u056e\u056d\3")
        buf.write("\2\2\2\u056f\u0572\3\2\2\2\u0570\u056e\3\2\2\2\u0570\u0571")
        buf.write("\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u0570\3\2\2\2\u0573")
        buf.write("\u0574\7A\2\2\u0574\u0576\3\2\2\2\u0575\u0534\3\2\2\2")
        buf.write("\u0575\u0536\3\2\2\2\u0575\u0546\3\2\2\2\u0575\u0555\3")
        buf.write("\2\2\2\u0576\u062e\3\2\2\2\u0577\u057b\f\n\2\2\u0578\u057a")
        buf.write("\7v\2\2\u0579\u0578\3\2\2\2\u057a\u057d\3\2\2\2\u057b")
        buf.write("\u0579\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057e\3\2\2\2")
        buf.write("\u057d\u057b\3\2\2\2\u057e\u0582\7B\2\2\u057f\u0581\7")
        buf.write("v\2\2\u0580\u057f\3\2\2\2\u0581\u0584\3\2\2\2\u0582\u0580")
        buf.write("\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u0586\3\2\2\2\u0584")
        buf.write("\u0582\3\2\2\2\u0585\u0587\5h\65\2\u0586\u0585\3\2\2\2")
        buf.write("\u0586\u0587\3\2\2\2\u0587\u058b\3\2\2\2\u0588\u058a\7")
        buf.write("v\2\2\u0589\u0588\3\2\2\2\u058a\u058d\3\2\2\2\u058b\u0589")
        buf.write("\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058f\3\2\2\2\u058d")
        buf.write("\u058b\3\2\2\2\u058e\u0590\5,\27\2\u058f\u058e\3\2\2\2")
        buf.write("\u058f\u0590\3\2\2\2\u0590\u0594\3\2\2\2\u0591\u0593\7")
        buf.write("v\2\2\u0592\u0591\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592")
        buf.write("\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0597\3\2\2\2\u0596")
        buf.write("\u0594\3\2\2\2\u0597\u062d\7C\2\2\u0598\u059c\f\t\2\2")
        buf.write("\u0599\u059b\7v\2\2\u059a\u0599\3\2\2\2\u059b\u059e\3")
        buf.write("\2\2\2\u059c\u059a\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059f")
        buf.write("\3\2\2\2\u059e\u059c\3\2\2\2\u059f\u05a3\7B\2\2\u05a0")
        buf.write("\u05a2\7v\2\2\u05a1\u05a0\3\2\2\2\u05a2\u05a5\3\2\2\2")
        buf.write("\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a6\3")
        buf.write("\2\2\2\u05a5\u05a3\3\2\2\2\u05a6\u05aa\7,\2\2\u05a7\u05a9")
        buf.write("\7v\2\2\u05a8\u05a7\3\2\2\2\u05a9\u05ac\3\2\2\2\u05aa")
        buf.write("\u05a8\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ae\3\2\2\2")
        buf.write("\u05ac\u05aa\3\2\2\2\u05ad\u05af\5h\65\2\u05ae\u05ad\3")
        buf.write("\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b3\3\2\2\2\u05b0\u05b2")
        buf.write("\7v\2\2\u05b1\u05b0\3\2\2\2\u05b2\u05b5\3\2\2\2\u05b3")
        buf.write("\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b6\3\2\2\2")
        buf.write("\u05b5\u05b3\3\2\2\2\u05b6\u05ba\5,\27\2\u05b7\u05b9\7")
        buf.write("v\2\2\u05b8\u05b7\3\2\2\2\u05b9\u05bc\3\2\2\2\u05ba\u05b8")
        buf.write("\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bd\3\2\2\2\u05bc")
        buf.write("\u05ba\3\2\2\2\u05bd\u05be\7C\2\2\u05be\u062d\3\2\2\2")
        buf.write("\u05bf\u05c3\f\b\2\2\u05c0\u05c2\7v\2\2\u05c1\u05c0\3")
        buf.write("\2\2\2\u05c2\u05c5\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4")
        buf.write("\3\2\2\2\u05c4\u05c6\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c6")
        buf.write("\u05ca\7B\2\2\u05c7\u05c9\7v\2\2\u05c8\u05c7\3\2\2\2\u05c9")
        buf.write("\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2")
        buf.write("\u05cb\u05cd\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cd\u05d1\5")
        buf.write("h\65\2\u05ce\u05d0\7v\2\2\u05cf\u05ce\3\2\2\2\u05d0\u05d3")
        buf.write("\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2")
        buf.write("\u05d4\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d4\u05d5\7,\2\2")
        buf.write("\u05d5\u05d9\5,\27\2\u05d6\u05d8\7v\2\2\u05d7\u05d6\3")
        buf.write("\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05da")
        buf.write("\3\2\2\2\u05da\u05dc\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc")
        buf.write("\u05dd\7C\2\2\u05dd\u062d\3\2\2\2\u05de\u05e2\f\7\2\2")
        buf.write("\u05df\u05e1\7v\2\2\u05e0\u05df\3\2\2\2\u05e1\u05e4\3")
        buf.write("\2\2\2\u05e2\u05e0\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5")
        buf.write("\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e5\u05e9\7B\2\2\u05e6")
        buf.write("\u05e8\7v\2\2\u05e7\u05e6\3\2\2\2\u05e8\u05eb\3\2\2\2")
        buf.write("\u05e9\u05e7\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ed\3")
        buf.write("\2\2\2\u05eb\u05e9\3\2\2\2\u05ec\u05ee\5h\65\2\u05ed\u05ec")
        buf.write("\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f2\3\2\2\2\u05ef")
        buf.write("\u05f1\7v\2\2\u05f0\u05ef\3\2\2\2\u05f1\u05f4\3\2\2\2")
        buf.write("\u05f2\u05f0\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f5\3")
        buf.write("\2\2\2\u05f4\u05f2\3\2\2\2\u05f5\u05f9\7P\2\2\u05f6\u05f8")
        buf.write("\7v\2\2\u05f7\u05f6\3\2\2\2\u05f8\u05fb\3\2\2\2\u05f9")
        buf.write("\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc\3\2\2\2")
        buf.write("\u05fb\u05f9\3\2\2\2\u05fc\u062d\7C\2\2\u05fd\u0601\f")
        buf.write("\6\2\2\u05fe\u0600\7v\2\2\u05ff\u05fe\3\2\2\2\u0600\u0603")
        buf.write("\3\2\2\2\u0601\u05ff\3\2\2\2\u0601\u0602\3\2\2\2\u0602")
        buf.write("\u0604\3\2\2\2\u0603\u0601\3\2\2\2\u0604\u0608\7@\2\2")
        buf.write("\u0605\u0607\7v\2\2\u0606\u0605\3\2\2\2\u0607\u060a\3")
        buf.write("\2\2\2\u0608\u0606\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060b")
        buf.write("\3\2\2\2\u060a\u0608\3\2\2\2\u060b\u060f\5j\66\2\u060c")
        buf.write("\u060e\7v\2\2\u060d\u060c\3\2\2\2\u060e\u0611\3\2\2\2")
        buf.write("\u060f\u060d\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0612\3")
        buf.write("\2\2\2\u0611\u060f\3\2\2\2\u0612\u0613\7A\2\2\u0613\u062d")
        buf.write("\3\2\2\2\u0614\u0618\f\5\2\2\u0615\u0617\7v\2\2\u0616")
        buf.write("\u0615\3\2\2\2\u0617\u061a\3\2\2\2\u0618\u0616\3\2\2\2")
        buf.write("\u0618\u0619\3\2\2\2\u0619\u061b\3\2\2\2\u061a\u0618\3")
        buf.write("\2\2\2\u061b\u061f\7@\2\2\u061c\u061e\7v\2\2\u061d\u061c")
        buf.write("\3\2\2\2\u061e\u0621\3\2\2\2\u061f\u061d\3\2\2\2\u061f")
        buf.write("\u0620\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3\2\2\2")
        buf.write("\u0622\u0624\5p9\2\u0623\u0622\3\2\2\2\u0623\u0624\3\2")
        buf.write("\2\2\u0624\u0628\3\2\2\2\u0625\u0627\7v\2\2\u0626\u0625")
        buf.write("\3\2\2\2\u0627\u062a\3\2\2\2\u0628\u0626\3\2\2\2\u0628")
        buf.write("\u0629\3\2\2\2\u0629\u062b\3\2\2\2\u062a\u0628\3\2\2\2")
        buf.write("\u062b\u062d\7A\2\2\u062c\u0577\3\2\2\2\u062c\u0598\3")
        buf.write("\2\2\2\u062c\u05bf\3\2\2\2\u062c\u05de\3\2\2\2\u062c\u05fd")
        buf.write("\3\2\2\2\u062c\u0614\3\2\2\2\u062d\u0630\3\2\2\2\u062e")
        buf.write("\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062fc\3\2\2\2\u0630")
        buf.write("\u062e\3\2\2\2\u0631\u0643\n\22\2\2\u0632\u0636\7@\2\2")
        buf.write("\u0633\u0635\7v\2\2\u0634\u0633\3\2\2\2\u0635\u0638\3")
        buf.write("\2\2\2\u0636\u0634\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u0639")
        buf.write("\3\2\2\2\u0638\u0636\3\2\2\2\u0639\u063d\5d\63\2\u063a")
        buf.write("\u063c\7v\2\2\u063b\u063a\3\2\2\2\u063c\u063f\3\2\2\2")
        buf.write("\u063d\u063b\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u0640\3")
        buf.write("\2\2\2\u063f\u063d\3\2\2\2\u0640\u0641\7A\2\2\u0641\u0643")
        buf.write("\3\2\2\2\u0642\u0631\3\2\2\2\u0642\u0632\3\2\2\2\u0643")
        buf.write("\u0646\3\2\2\2\u0644\u0642\3\2\2\2\u0644\u0645\3\2\2\2")
        buf.write("\u0645e\3\2\2\2\u0646\u0644\3\2\2\2\u0647\u064b\t\23\2")
        buf.write("\2\u0648\u064a\7v\2\2\u0649\u0648\3\2\2\2\u064a\u064d")
        buf.write("\3\2\2\2\u064b\u0649\3\2\2\2\u064b\u064c\3\2\2\2\u064c")
        buf.write("\u064f\3\2\2\2\u064d\u064b\3\2\2\2\u064e\u0650\5h\65\2")
        buf.write("\u064f\u064e\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0654\3")
        buf.write("\2\2\2\u0651\u0653\7v\2\2\u0652\u0651\3\2\2\2\u0653\u0656")
        buf.write("\3\2\2\2\u0654\u0652\3\2\2\2\u0654\u0655\3\2\2\2\u0655")
        buf.write("\u0658\3\2\2\2\u0656\u0654\3\2\2\2\u0657\u0647\3\2\2\2")
        buf.write("\u0658\u0659\3\2\2\2\u0659\u0657\3\2\2\2\u0659\u065a\3")
        buf.write("\2\2\2\u065ag\3\2\2\2\u065b\u065d\5Z.\2\u065c\u065b\3")
        buf.write("\2\2\2\u065d\u065e\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065f")
        buf.write("\3\2\2\2\u065fi\3\2\2\2\u0660\u0664\5l\67\2\u0661\u0663")
        buf.write("\7v\2\2\u0662\u0661\3\2\2\2\u0663\u0666\3\2\2\2\u0664")
        buf.write("\u0662\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u0675\3\2\2\2")
        buf.write("\u0666\u0664\3\2\2\2\u0667\u066b\7_\2\2\u0668\u066a\7")
        buf.write("v\2\2\u0669\u0668\3\2\2\2\u066a\u066d\3\2\2\2\u066b\u0669")
        buf.write("\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066e\3\2\2\2\u066d")
        buf.write("\u066b\3\2\2\2\u066e\u0672\7o\2\2\u066f\u0671\7v\2\2\u0670")
        buf.write("\u066f\3\2\2\2\u0671\u0674\3\2\2\2\u0672\u0670\3\2\2\2")
        buf.write("\u0672\u0673\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672\3")
        buf.write("\2\2\2\u0675\u0667\3\2\2\2\u0675\u0676\3\2\2\2\u0676k")
        buf.write("\3\2\2\2\u0677\u067b\5n8\2\u0678\u067a\7v\2\2\u0679\u0678")
        buf.write("\3\2\2\2\u067a\u067d\3\2\2\2\u067b\u0679\3\2\2\2\u067b")
        buf.write("\u067c\3\2\2\2\u067c\u068e\3\2\2\2\u067d\u067b\3\2\2\2")
        buf.write("\u067e\u0682\7_\2\2\u067f\u0681\7v\2\2\u0680\u067f\3\2")
        buf.write("\2\2\u0681\u0684\3\2\2\2\u0682\u0680\3\2\2\2\u0682\u0683")
        buf.write("\3\2\2\2\u0683\u0685\3\2\2\2\u0684\u0682\3\2\2\2\u0685")
        buf.write("\u0689\5n8\2\u0686\u0688\7v\2\2\u0687\u0686\3\2\2\2\u0688")
        buf.write("\u068b\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u068a\3\2\2\2")
        buf.write("\u068a\u068d\3\2\2\2\u068b\u0689\3\2\2\2\u068c\u067e\3")
        buf.write("\2\2\2\u068d\u0690\3\2\2\2\u068e\u068c\3\2\2\2\u068e\u068f")
        buf.write("\3\2\2\2\u068fm\3\2\2\2\u0690\u068e\3\2\2\2\u0691\u0695")
        buf.write("\5\66\34\2\u0692\u0694\7v\2\2\u0693\u0692\3\2\2\2\u0694")
        buf.write("\u0697\3\2\2\2\u0695\u0693\3\2\2\2\u0695\u0696\3\2\2\2")
        buf.write("\u0696\u0698\3\2\2\2\u0697\u0695\3\2\2\2\u0698\u0699\5")
        buf.write("`\61\2\u0699\u06a5\3\2\2\2\u069a\u069e\5\66\34\2\u069b")
        buf.write("\u069d\7v\2\2\u069c\u069b\3\2\2\2\u069d\u06a0\3\2\2\2")
        buf.write("\u069e\u069c\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a2\3")
        buf.write("\2\2\2\u06a0\u069e\3\2\2\2\u06a1\u06a3\5t;\2\u06a2\u06a1")
        buf.write("\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a5\3\2\2\2\u06a4")
        buf.write("\u0691\3\2\2\2\u06a4\u069a\3\2\2\2\u06a5o\3\2\2\2\u06a6")
        buf.write("\u06aa\7p\2\2\u06a7\u06a9\7v\2\2\u06a8\u06a7\3\2\2\2\u06a9")
        buf.write("\u06ac\3\2\2\2\u06aa\u06a8\3\2\2\2\u06aa\u06ab\3\2\2\2")
        buf.write("\u06ab\u06bd\3\2\2\2\u06ac\u06aa\3\2\2\2\u06ad\u06b1\7")
        buf.write("_\2\2\u06ae\u06b0\7v\2\2\u06af\u06ae\3\2\2\2\u06b0\u06b3")
        buf.write("\3\2\2\2\u06b1\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2")
        buf.write("\u06b4\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b4\u06b8\7p\2\2")
        buf.write("\u06b5\u06b7\7v\2\2\u06b6\u06b5\3\2\2\2\u06b7\u06ba\3")
        buf.write("\2\2\2\u06b8\u06b6\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bc")
        buf.write("\3\2\2\2\u06ba\u06b8\3\2\2\2\u06bb\u06ad\3\2\2\2\u06bc")
        buf.write("\u06bf\3\2\2\2\u06bd\u06bb\3\2\2\2\u06bd\u06be\3\2\2\2")
        buf.write("\u06beq\3\2\2\2\u06bf\u06bd\3\2\2\2\u06c0\u06c4\5J&\2")
        buf.write("\u06c1\u06c3\7v\2\2\u06c2\u06c1\3\2\2\2\u06c3\u06c6\3")
        buf.write("\2\2\2\u06c4\u06c2\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c8")
        buf.write("\3\2\2\2\u06c6\u06c4\3\2\2\2\u06c7\u06c9\5t;\2\u06c8\u06c7")
        buf.write("\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9s\3\2\2\2\u06ca\u06d6")
        buf.write("\5f\64\2\u06cb\u06cd\5f\64\2\u06cc\u06cb\3\2\2\2\u06cc")
        buf.write("\u06cd\3\2\2\2\u06cd\u06d1\3\2\2\2\u06ce\u06d0\7v\2\2")
        buf.write("\u06cf\u06ce\3\2\2\2\u06d0\u06d3\3\2\2\2\u06d1\u06cf\3")
        buf.write("\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2\u06d3\u06d1")
        buf.write("\3\2\2\2\u06d4\u06d6\5v<\2\u06d5\u06ca\3\2\2\2\u06d5\u06cc")
        buf.write("\3\2\2\2\u06d6u\3\2\2\2\u06d7\u06d8\b<\1\2\u06d8\u06dc")
        buf.write("\7@\2\2\u06d9\u06db\7v\2\2\u06da\u06d9\3\2\2\2\u06db\u06de")
        buf.write("\3\2\2\2\u06dc\u06da\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd")
        buf.write("\u06df\3\2\2\2\u06de\u06dc\3\2\2\2\u06df\u06e3\5t;\2\u06e0")
        buf.write("\u06e2\7v\2\2\u06e1\u06e0\3\2\2\2\u06e2\u06e5\3\2\2\2")
        buf.write("\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e6\3")
        buf.write("\2\2\2\u06e5\u06e3\3\2\2\2\u06e6\u06e7\7A\2\2\u06e7\u0761")
        buf.write("\3\2\2\2\u06e8\u06ec\7B\2\2\u06e9\u06eb\7v\2\2\u06ea\u06e9")
        buf.write("\3\2\2\2\u06eb\u06ee\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec")
        buf.write("\u06ed\3\2\2\2\u06ed\u06f0\3\2\2\2\u06ee\u06ec\3\2\2\2")
        buf.write("\u06ef\u06f1\5h\65\2\u06f0\u06ef\3\2\2\2\u06f0\u06f1\3")
        buf.write("\2\2\2\u06f1\u06f5\3\2\2\2\u06f2\u06f4\7v\2\2\u06f3\u06f2")
        buf.write("\3\2\2\2\u06f4\u06f7\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5")
        buf.write("\u06f6\3\2\2\2\u06f6\u06f9\3\2\2\2\u06f7\u06f5\3\2\2\2")
        buf.write("\u06f8\u06fa\5,\27\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3")
        buf.write("\2\2\2\u06fa\u06fe\3\2\2\2\u06fb\u06fd\7v\2\2\u06fc\u06fb")
        buf.write("\3\2\2\2\u06fd\u0700\3\2\2\2\u06fe\u06fc\3\2\2\2\u06fe")
        buf.write("\u06ff\3\2\2\2\u06ff\u0701\3\2\2\2\u0700\u06fe\3\2\2\2")
        buf.write("\u0701\u0761\7C\2\2\u0702\u0706\7B\2\2\u0703\u0705\7v")
        buf.write("\2\2\u0704\u0703\3\2\2\2\u0705\u0708\3\2\2\2\u0706\u0704")
        buf.write("\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0709\3\2\2\2\u0708")
        buf.write("\u0706\3\2\2\2\u0709\u070d\7,\2\2\u070a\u070c\7v\2\2\u070b")
        buf.write("\u070a\3\2\2\2\u070c\u070f\3\2\2\2\u070d\u070b\3\2\2\2")
        buf.write("\u070d\u070e\3\2\2\2\u070e\u0711\3\2\2\2\u070f\u070d\3")
        buf.write("\2\2\2\u0710\u0712\5h\65\2\u0711\u0710\3\2\2\2\u0711\u0712")
        buf.write("\3\2\2\2\u0712\u0716\3\2\2\2\u0713\u0715\7v\2\2\u0714")
        buf.write("\u0713\3\2\2\2\u0715\u0718\3\2\2\2\u0716\u0714\3\2\2\2")
        buf.write("\u0716\u0717\3\2\2\2\u0717\u0719\3\2\2\2\u0718\u0716\3")
        buf.write("\2\2\2\u0719\u071d\5,\27\2\u071a\u071c\7v\2\2\u071b\u071a")
        buf.write("\3\2\2\2\u071c\u071f\3\2\2\2\u071d\u071b\3\2\2\2\u071d")
        buf.write("\u071e\3\2\2\2\u071e\u0720\3\2\2\2\u071f\u071d\3\2\2\2")
        buf.write("\u0720\u0721\7C\2\2\u0721\u0761\3\2\2\2\u0722\u0726\7")
        buf.write("B\2\2\u0723\u0725\7v\2\2\u0724\u0723\3\2\2\2\u0725\u0728")
        buf.write("\3\2\2\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727")
        buf.write("\u0729\3\2\2\2\u0728\u0726\3\2\2\2\u0729\u072d\5h\65\2")
        buf.write("\u072a\u072c\7v\2\2\u072b\u072a\3\2\2\2\u072c\u072f\3")
        buf.write("\2\2\2\u072d\u072b\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u0730")
        buf.write("\3\2\2\2\u072f\u072d\3\2\2\2\u0730\u0734\7,\2\2\u0731")
        buf.write("\u0733\7v\2\2\u0732\u0731\3\2\2\2\u0733\u0736\3\2\2\2")
        buf.write("\u0734\u0732\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0737\3")
        buf.write("\2\2\2\u0736\u0734\3\2\2\2\u0737\u073b\5,\27\2\u0738\u073a")
        buf.write("\7v\2\2\u0739\u0738\3\2\2\2\u073a\u073d\3\2\2\2\u073b")
        buf.write("\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u073e\3\2\2\2")
        buf.write("\u073d\u073b\3\2\2\2\u073e\u073f\7C\2\2\u073f\u0761\3")
        buf.write("\2\2\2\u0740\u0744\7B\2\2\u0741\u0743\7v\2\2\u0742\u0741")
        buf.write("\3\2\2\2\u0743\u0746\3\2\2\2\u0744\u0742\3\2\2\2\u0744")
        buf.write("\u0745\3\2\2\2\u0745\u0747\3\2\2\2\u0746\u0744\3\2\2\2")
        buf.write("\u0747\u074b\7P\2\2\u0748\u074a\7v\2\2\u0749\u0748\3\2")
        buf.write("\2\2\u074a\u074d\3\2\2\2\u074b\u0749\3\2\2\2\u074b\u074c")
        buf.write("\3\2\2\2\u074c\u074e\3\2\2\2\u074d\u074b\3\2\2\2\u074e")
        buf.write("\u0761\7C\2\2\u074f\u0753\7@\2\2\u0750\u0752\7v\2\2\u0751")
        buf.write("\u0750\3\2\2\2\u0752\u0755\3\2\2\2\u0753\u0751\3\2\2\2")
        buf.write("\u0753\u0754\3\2\2\2\u0754\u0757\3\2\2\2\u0755\u0753\3")
        buf.write("\2\2\2\u0756\u0758\5j\66\2\u0757\u0756\3\2\2\2\u0757\u0758")
        buf.write("\3\2\2\2\u0758\u075c\3\2\2\2\u0759\u075b\7v\2\2\u075a")
        buf.write("\u0759\3\2\2\2\u075b\u075e\3\2\2\2\u075c\u075a\3\2\2\2")
        buf.write("\u075c\u075d\3\2\2\2\u075d\u075f\3\2\2\2\u075e\u075c\3")
        buf.write("\2\2\2\u075f\u0761\7A\2\2\u0760\u06d7\3\2\2\2\u0760\u06e8")
        buf.write("\3\2\2\2\u0760\u0702\3\2\2\2\u0760\u0722\3\2\2\2\u0760")
        buf.write("\u0740\3\2\2\2\u0760\u074f\3\2\2\2\u0761\u07ff\3\2\2\2")
        buf.write("\u0762\u0766\f\7\2\2\u0763\u0765\7v\2\2\u0764\u0763\3")
        buf.write("\2\2\2\u0765\u0768\3\2\2\2\u0766\u0764\3\2\2\2\u0766\u0767")
        buf.write("\3\2\2\2\u0767\u0769\3\2\2\2\u0768\u0766\3\2\2\2\u0769")
        buf.write("\u076d\7B\2\2\u076a\u076c\7v\2\2\u076b\u076a\3\2\2\2\u076c")
        buf.write("\u076f\3\2\2\2\u076d\u076b\3\2\2\2\u076d\u076e\3\2\2\2")
        buf.write("\u076e\u0771\3\2\2\2\u076f\u076d\3\2\2\2\u0770\u0772\5")
        buf.write("h\65\2\u0771\u0770\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0776")
        buf.write("\3\2\2\2\u0773\u0775\7v\2\2\u0774\u0773\3\2\2\2\u0775")
        buf.write("\u0778\3\2\2\2\u0776\u0774\3\2\2\2\u0776\u0777\3\2\2\2")
        buf.write("\u0777\u077a\3\2\2\2\u0778\u0776\3\2\2\2\u0779\u077b\5")
        buf.write(",\27\2\u077a\u0779\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077f")
        buf.write("\3\2\2\2\u077c\u077e\7v\2\2\u077d\u077c\3\2\2\2\u077e")
        buf.write("\u0781\3\2\2\2\u077f\u077d\3\2\2\2\u077f\u0780\3\2\2\2")
        buf.write("\u0780\u0782\3\2\2\2\u0781\u077f\3\2\2\2\u0782\u07fe\7")
        buf.write("C\2\2\u0783\u0787\f\6\2\2\u0784\u0786\7v\2\2\u0785\u0784")
        buf.write("\3\2\2\2\u0786\u0789\3\2\2\2\u0787\u0785\3\2\2\2\u0787")
        buf.write("\u0788\3\2\2\2\u0788\u078a\3\2\2\2\u0789\u0787\3\2\2\2")
        buf.write("\u078a\u078e\7B\2\2\u078b\u078d\7v\2\2\u078c\u078b\3\2")
        buf.write("\2\2\u078d\u0790\3\2\2\2\u078e\u078c\3\2\2\2\u078e\u078f")
        buf.write("\3\2\2\2\u078f\u0791\3\2\2\2\u0790\u078e\3\2\2\2\u0791")
        buf.write("\u0795\7,\2\2\u0792\u0794\7v\2\2\u0793\u0792\3\2\2\2\u0794")
        buf.write("\u0797\3\2\2\2\u0795\u0793\3\2\2\2\u0795\u0796\3\2\2\2")
        buf.write("\u0796\u0799\3\2\2\2\u0797\u0795\3\2\2\2\u0798\u079a\5")
        buf.write("h\65\2\u0799\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079e")
        buf.write("\3\2\2\2\u079b\u079d\7v\2\2\u079c\u079b\3\2\2\2\u079d")
        buf.write("\u07a0\3\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3\2\2\2")
        buf.write("\u079f\u07a1\3\2\2\2\u07a0\u079e\3\2\2\2\u07a1\u07a5\5")
        buf.write(",\27\2\u07a2\u07a4\7v\2\2\u07a3\u07a2\3\2\2\2\u07a4\u07a7")
        buf.write("\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6")
        buf.write("\u07a8\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a8\u07a9\7C\2\2")
        buf.write("\u07a9\u07fe\3\2\2\2\u07aa\u07ae\f\5\2\2\u07ab\u07ad\7")
        buf.write("v\2\2\u07ac\u07ab\3\2\2\2\u07ad\u07b0\3\2\2\2\u07ae\u07ac")
        buf.write("\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\3\2\2\2\u07b0")
        buf.write("\u07ae\3\2\2\2\u07b1\u07b5\7B\2\2\u07b2\u07b4\7v\2\2\u07b3")
        buf.write("\u07b2\3\2\2\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3\3\2\2\2")
        buf.write("\u07b5\u07b6\3\2\2\2\u07b6\u07b8\3\2\2\2\u07b7\u07b5\3")
        buf.write("\2\2\2\u07b8\u07bc\5h\65\2\u07b9\u07bb\7v\2\2\u07ba\u07b9")
        buf.write("\3\2\2\2\u07bb\u07be\3\2\2\2\u07bc\u07ba\3\2\2\2\u07bc")
        buf.write("\u07bd\3\2\2\2\u07bd\u07bf\3\2\2\2\u07be\u07bc\3\2\2\2")
        buf.write("\u07bf\u07c3\7,\2\2\u07c0\u07c2\7v\2\2\u07c1\u07c0\3\2")
        buf.write("\2\2\u07c2\u07c5\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c4")
        buf.write("\3\2\2\2\u07c4\u07c6\3\2\2\2\u07c5\u07c3\3\2\2\2\u07c6")
        buf.write("\u07ca\5,\27\2\u07c7\u07c9\7v\2\2\u07c8\u07c7\3\2\2\2")
        buf.write("\u07c9\u07cc\3\2\2\2\u07ca\u07c8\3\2\2\2\u07ca\u07cb\3")
        buf.write("\2\2\2\u07cb\u07cd\3\2\2\2\u07cc\u07ca\3\2\2\2\u07cd\u07ce")
        buf.write("\7C\2\2\u07ce\u07fe\3\2\2\2\u07cf\u07d3\f\4\2\2\u07d0")
        buf.write("\u07d2\7v\2\2\u07d1\u07d0\3\2\2\2\u07d2\u07d5\3\2\2\2")
        buf.write("\u07d3\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\3")
        buf.write("\2\2\2\u07d5\u07d3\3\2\2\2\u07d6\u07da\7B\2\2\u07d7\u07d9")
        buf.write("\7v\2\2\u07d8\u07d7\3\2\2\2\u07d9\u07dc\3\2\2\2\u07da")
        buf.write("\u07d8\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dd\3\2\2\2")
        buf.write("\u07dc\u07da\3\2\2\2\u07dd\u07e1\7P\2\2\u07de\u07e0\7")
        buf.write("v\2\2\u07df\u07de\3\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07df")
        buf.write("\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3")
        buf.write("\u07e1\3\2\2\2\u07e4\u07fe\7C\2\2\u07e5\u07e9\f\3\2\2")
        buf.write("\u07e6\u07e8\7v\2\2\u07e7\u07e6\3\2\2\2\u07e8\u07eb\3")
        buf.write("\2\2\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec")
        buf.write("\3\2\2\2\u07eb\u07e9\3\2\2\2\u07ec\u07f0\7@\2\2\u07ed")
        buf.write("\u07ef\7v\2\2\u07ee\u07ed\3\2\2\2\u07ef\u07f2\3\2\2\2")
        buf.write("\u07f0\u07ee\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f4\3")
        buf.write("\2\2\2\u07f2\u07f0\3\2\2\2\u07f3\u07f5\5j\66\2\u07f4\u07f3")
        buf.write("\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f9\3\2\2\2\u07f6")
        buf.write("\u07f8\7v\2\2\u07f7\u07f6\3\2\2\2\u07f8\u07fb\3\2\2\2")
        buf.write("\u07f9\u07f7\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fc\3")
        buf.write("\2\2\2\u07fb\u07f9\3\2\2\2\u07fc\u07fe\7A\2\2\u07fd\u0762")
        buf.write("\3\2\2\2\u07fd\u0783\3\2\2\2\u07fd\u07aa\3\2\2\2\u07fd")
        buf.write("\u07cf\3\2\2\2\u07fd\u07e5\3\2\2\2\u07fe\u0801\3\2\2\2")
        buf.write("\u07ff\u07fd\3\2\2\2\u07ff\u0800\3\2\2\2\u0800w\3\2\2")
        buf.write("\2\u0801\u07ff\3\2\2\2\u0802\u0803\7p\2\2\u0803y\3\2\2")
        buf.write("\2\u0804\u0820\5,\27\2\u0805\u0809\7D\2\2\u0806\u0808")
        buf.write("\7v\2\2\u0807\u0806\3\2\2\2\u0808\u080b\3\2\2\2\u0809")
        buf.write("\u0807\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080d\3\2\2\2")
        buf.write("\u080b\u0809\3\2\2\2\u080c\u080e\5|?\2\u080d\u080c\3\2")
        buf.write("\2\2\u080d\u080e\3\2\2\2\u080e\u0812\3\2\2\2\u080f\u0811")
        buf.write("\7v\2\2\u0810\u080f\3\2\2\2\u0811\u0814\3\2\2\2\u0812")
        buf.write("\u0810\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0816\3\2\2\2")
        buf.write("\u0814\u0812\3\2\2\2\u0815\u0817\7_\2\2\u0816\u0815\3")
        buf.write("\2\2\2\u0816\u0817\3\2\2\2\u0817\u081b\3\2\2\2\u0818\u081a")
        buf.write("\7v\2\2\u0819\u0818\3\2\2\2\u081a\u081d\3\2\2\2\u081b")
        buf.write("\u0819\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081e\3\2\2\2")
        buf.write("\u081d\u081b\3\2\2\2\u081e\u0820\7E\2\2\u081f\u0804\3")
        buf.write("\2\2\2\u081f\u0805\3\2\2\2\u0820{\3\2\2\2\u0821\u0823")
        buf.write("\5~@\2\u0822\u0821\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0827")
        buf.write("\3\2\2\2\u0824\u0826\7v\2\2\u0825\u0824\3\2\2\2\u0826")
        buf.write("\u0829\3\2\2\2\u0827\u0825\3\2\2\2\u0827\u0828\3\2\2\2")
        buf.write("\u0828\u082a\3\2\2\2\u0829\u0827\3\2\2\2\u082a\u082e\5")
        buf.write("z>\2\u082b\u082d\7v\2\2\u082c\u082b\3\2\2\2\u082d\u0830")
        buf.write("\3\2\2\2\u082e\u082c\3\2\2\2\u082e\u082f\3\2\2\2\u082f")
        buf.write("\u084a\3\2\2\2\u0830\u082e\3\2\2\2\u0831\u0835\7_\2\2")
        buf.write("\u0832\u0834\7v\2\2\u0833\u0832\3\2\2\2\u0834\u0837\3")
        buf.write("\2\2\2\u0835\u0833\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0839")
        buf.write("\3\2\2\2\u0837\u0835\3\2\2\2\u0838\u083a\5~@\2\u0839\u0838")
        buf.write("\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083e\3\2\2\2\u083b")
        buf.write("\u083d\7v\2\2\u083c\u083b\3\2\2\2\u083d\u0840\3\2\2\2")
        buf.write("\u083e\u083c\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0841\3")
        buf.write("\2\2\2\u0840\u083e\3\2\2\2\u0841\u0845\5z>\2\u0842\u0844")
        buf.write("\7v\2\2\u0843\u0842\3\2\2\2\u0844\u0847\3\2\2\2\u0845")
        buf.write("\u0843\3\2\2\2\u0845\u0846\3\2\2\2\u0846\u0849\3\2\2\2")
        buf.write("\u0847\u0845\3\2\2\2\u0848\u0831\3\2\2\2\u0849\u084c\3")
        buf.write("\2\2\2\u084a\u0848\3\2\2\2\u084a\u084b\3\2\2\2\u084b}")
        buf.write("\3\2\2\2\u084c\u084a\3\2\2\2\u084d\u0851\5\u0080A\2\u084e")
        buf.write("\u0850\7v\2\2\u084f\u084e\3\2\2\2\u0850\u0853\3\2\2\2")
        buf.write("\u0851\u084f\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0854\3")
        buf.write("\2\2\2\u0853\u0851\3\2\2\2\u0854\u0855\7`\2\2\u0855\177")
        buf.write("\3\2\2\2\u0856\u0858\5\u0082B\2\u0857\u0856\3\2\2\2\u0858")
        buf.write("\u0859\3\2\2\2\u0859\u0857\3\2\2\2\u0859\u085a\3\2\2\2")
        buf.write("\u085a\u0081\3\2\2\2\u085b\u085f\7B\2\2\u085c\u085e\7")
        buf.write("v\2\2\u085d\u085c\3\2\2\2\u085e\u0861\3\2\2\2\u085f\u085d")
        buf.write("\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0862\3\2\2\2\u0861")
        buf.write("\u085f\3\2\2\2\u0862\u0866\5\62\32\2\u0863\u0865\7v\2")
        buf.write("\2\u0864\u0863\3\2\2\2\u0865\u0868\3\2\2\2\u0866\u0864")
        buf.write("\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0869\3\2\2\2\u0868")
        buf.write("\u0866\3\2\2\2\u0869\u086a\7C\2\2\u086a\u0874\3\2\2\2")
        buf.write("\u086b\u086f\7n\2\2\u086c\u086e\7v\2\2\u086d\u086c\3\2")
        buf.write("\2\2\u086e\u0871\3\2\2\2\u086f\u086d\3\2\2\2\u086f\u0870")
        buf.write("\3\2\2\2\u0870\u0872\3\2\2\2\u0871\u086f\3\2\2\2\u0872")
        buf.write("\u0874\7p\2\2\u0873\u085b\3\2\2\2\u0873\u086b\3\2\2\2")
        buf.write("\u0874\u0083\3\2\2\2\u0875\u0879\7>\2\2\u0876\u0878\7")
        buf.write("v\2\2\u0877\u0876\3\2\2\2\u0878\u087b\3\2\2\2\u0879\u0877")
        buf.write("\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u087c\3\2\2\2\u087b")
        buf.write("\u0879\3\2\2\2\u087c\u0880\7@\2\2\u087d\u087f\7v\2\2\u087e")
        buf.write("\u087d\3\2\2\2\u087f\u0882\3\2\2\2\u0880\u087e\3\2\2\2")
        buf.write("\u0880\u0881\3\2\2\2\u0881\u0883\3\2\2\2\u0882\u0880\3")
        buf.write("\2\2\2\u0883\u0887\5\62\32\2\u0884\u0886\7v\2\2\u0885")
        buf.write("\u0884\3\2\2\2\u0886\u0889\3\2\2\2\u0887\u0885\3\2\2\2")
        buf.write("\u0887\u0888\3\2\2\2\u0888\u088a\3\2\2\2\u0889\u0887\3")
        buf.write("\2\2\2\u088a\u088e\7_\2\2\u088b\u088d\7v\2\2\u088c\u088b")
        buf.write("\3\2\2\2\u088d\u0890\3\2\2\2\u088e\u088c\3\2\2\2\u088e")
        buf.write("\u088f\3\2\2\2\u088f\u0892\3\2\2\2\u0890\u088e\3\2\2\2")
        buf.write("\u0891\u0893\7s\2\2\u0892\u0891\3\2\2\2\u0893\u0894\3")
        buf.write("\2\2\2\u0894\u0892\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u0899")
        buf.write("\3\2\2\2\u0896\u0898\7v\2\2\u0897\u0896\3\2\2\2\u0898")
        buf.write("\u089b\3\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2\2\2")
        buf.write("\u089a\u089c\3\2\2\2\u089b\u0899\3\2\2\2\u089c\u089d\7")
        buf.write("A\2\2\u089d\u089e\5\u00ba^\2\u089e\u0085\3\2\2\2\u089f")
        buf.write("\u0908\5\u0088E\2\u08a0\u0908\5\u008aF\2\u08a1\u0908\5")
        buf.write("\u0090I\2\u08a2\u0908\5\u0092J\2\u08a3\u0908\5\u009aN")
        buf.write("\2\u08a4\u0908\5\u009cO\2\u08a5\u0908\5\u00a4S\2\u08a6")
        buf.write("\u08aa\t\24\2\2\u08a7\u08a9\7v\2\2\u08a8\u08a7\3\2\2\2")
        buf.write("\u08a9\u08ac\3\2\2\2\u08aa\u08a8\3\2\2\2\u08aa\u08ab\3")
        buf.write("\2\2\2\u08ab\u08ad\3\2\2\2\u08ac\u08aa\3\2\2\2\u08ad\u08b1")
        buf.write("\t\25\2\2\u08ae\u08b0\7v\2\2\u08af\u08ae\3\2\2\2\u08b0")
        buf.write("\u08b3\3\2\2\2\u08b1\u08af\3\2\2\2\u08b1\u08b2\3\2\2\2")
        buf.write("\u08b2\u08b4\3\2\2\2\u08b3\u08b1\3\2\2\2\u08b4\u08b8\7")
        buf.write("@\2\2\u08b5\u08b7\7v\2\2\u08b6\u08b5\3\2\2\2\u08b7\u08ba")
        buf.write("\3\2\2\2\u08b8\u08b6\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9")
        buf.write("\u08d5\3\2\2\2\u08ba\u08b8\3\2\2\2\u08bb\u08bf\5(\25\2")
        buf.write("\u08bc\u08be\7v\2\2\u08bd\u08bc\3\2\2\2\u08be\u08c1\3")
        buf.write("\2\2\2\u08bf\u08bd\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08d2")
        buf.write("\3\2\2\2\u08c1\u08bf\3\2\2\2\u08c2\u08c6\7_\2\2\u08c3")
        buf.write("\u08c5\7v\2\2\u08c4\u08c3\3\2\2\2\u08c5\u08c8\3\2\2\2")
        buf.write("\u08c6\u08c4\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c9\3")
        buf.write("\2\2\2\u08c8\u08c6\3\2\2\2\u08c9\u08cd\5(\25\2\u08ca\u08cc")
        buf.write("\7v\2\2\u08cb\u08ca\3\2\2\2\u08cc\u08cf\3\2\2\2\u08cd")
        buf.write("\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d1\3\2\2\2")
        buf.write("\u08cf\u08cd\3\2\2\2\u08d0\u08c2\3\2\2\2\u08d1\u08d4\3")
        buf.write("\2\2\2\u08d2\u08d0\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d6")
        buf.write("\3\2\2\2\u08d4\u08d2\3\2\2\2\u08d5\u08bb\3\2\2\2\u08d5")
        buf.write("\u08d6\3\2\2\2\u08d6\u08da\3\2\2\2\u08d7\u08d9\7v\2\2")
        buf.write("\u08d8\u08d7\3\2\2\2\u08d9\u08dc\3\2\2\2\u08da\u08d8\3")
        buf.write("\2\2\2\u08da\u08db\3\2\2\2\u08db\u08fc\3\2\2\2\u08dc\u08da")
        buf.write("\3\2\2\2\u08dd\u08e1\7]\2\2\u08de\u08e0\7v\2\2\u08df\u08de")
        buf.write("\3\2\2\2\u08e0\u08e3\3\2\2\2\u08e1\u08df\3\2\2\2\u08e1")
        buf.write("\u08e2\3\2\2\2\u08e2\u08f8\3\2\2\2\u08e3\u08e1\3\2\2\2")
        buf.write("\u08e4\u08e8\5(\25\2\u08e5\u08e7\7v\2\2\u08e6\u08e5\3")
        buf.write("\2\2\2\u08e7\u08ea\3\2\2\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9")
        buf.write("\3\2\2\2\u08e9\u08f5\3\2\2\2\u08ea\u08e8\3\2\2\2\u08eb")
        buf.write("\u08ef\7_\2\2\u08ec\u08ee\7v\2\2\u08ed\u08ec\3\2\2\2\u08ee")
        buf.write("\u08f1\3\2\2\2\u08ef\u08ed\3\2\2\2\u08ef\u08f0\3\2\2\2")
        buf.write("\u08f0\u08f2\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f2\u08f4\5")
        buf.write("(\25\2\u08f3\u08eb\3\2\2\2\u08f4\u08f7\3\2\2\2\u08f5\u08f3")
        buf.write("\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f9\3\2\2\2\u08f7")
        buf.write("\u08f5\3\2\2\2\u08f8\u08e4\3\2\2\2\u08f8\u08f9\3\2\2\2")
        buf.write("\u08f9\u08fb\3\2\2\2\u08fa\u08dd\3\2\2\2\u08fb\u08fe\3")
        buf.write("\2\2\2\u08fc\u08fa\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u0902")
        buf.write("\3\2\2\2\u08fe\u08fc\3\2\2\2\u08ff\u0901\7v\2\2\u0900")
        buf.write("\u08ff\3\2\2\2\u0901\u0904\3\2\2\2\u0902\u0900\3\2\2\2")
        buf.write("\u0902\u0903\3\2\2\2\u0903\u0905\3\2\2\2\u0904\u0902\3")
        buf.write("\2\2\2\u0905\u0906\7A\2\2\u0906\u0908\5\u00ba^\2\u0907")
        buf.write("\u089f\3\2\2\2\u0907\u08a0\3\2\2\2\u0907\u08a1\3\2\2\2")
        buf.write("\u0907\u08a2\3\2\2\2\u0907\u08a3\3\2\2\2\u0907\u08a4\3")
        buf.write("\2\2\2\u0907\u08a5\3\2\2\2\u0907\u08a6\3\2\2\2\u0908\u0087")
        buf.write("\3\2\2\2\u0909\u090d\7p\2\2\u090a\u090c\7v\2\2\u090b\u090a")
        buf.write("\3\2\2\2\u090c\u090f\3\2\2\2\u090d\u090b\3\2\2\2\u090d")
        buf.write("\u090e\3\2\2\2\u090e\u0910\3\2\2\2\u090f\u090d\3\2\2\2")
        buf.write("\u0910\u0914\7]\2\2\u0911\u0913\7v\2\2\u0912\u0911\3\2")
        buf.write("\2\2\u0913\u0916\3\2\2\2\u0914\u0912\3\2\2\2\u0914\u0915")
        buf.write("\3\2\2\2\u0915\u0917\3\2\2\2\u0916\u0914\3\2\2\2\u0917")
        buf.write("\u093f\5\u0086D\2\u0918\u091c\7\21\2\2\u0919\u091b\7v")
        buf.write("\2\2\u091a\u0919\3\2\2\2\u091b\u091e\3\2\2\2\u091c\u091a")
        buf.write("\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091f\3\2\2\2\u091e")
        buf.write("\u091c\3\2\2\2\u091f\u0923\5\62\32\2\u0920\u0922\7v\2")
        buf.write("\2\u0921\u0920\3\2\2\2\u0922\u0925\3\2\2\2\u0923\u0921")
        buf.write("\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0926\3\2\2\2\u0925")
        buf.write("\u0923\3\2\2\2\u0926\u092a\7]\2\2\u0927\u0929\7v\2\2\u0928")
        buf.write("\u0927\3\2\2\2\u0929\u092c\3\2\2\2\u092a\u0928\3\2\2\2")
        buf.write("\u092a\u092b\3\2\2\2\u092b\u092d\3\2\2\2\u092c\u092a\3")
        buf.write("\2\2\2\u092d\u092e\5\u0086D\2\u092e\u093f\3\2\2\2\u092f")
        buf.write("\u0933\7\25\2\2\u0930\u0932\7v\2\2\u0931\u0930\3\2\2\2")
        buf.write("\u0932\u0935\3\2\2\2\u0933\u0931\3\2\2\2\u0933\u0934\3")
        buf.write("\2\2\2\u0934\u0936\3\2\2\2\u0935\u0933\3\2\2\2\u0936\u093a")
        buf.write("\7]\2\2\u0937\u0939\7v\2\2\u0938\u0937\3\2\2\2\u0939\u093c")
        buf.write("\3\2\2\2\u093a\u0938\3\2\2\2\u093a\u093b\3\2\2\2\u093b")
        buf.write("\u093d\3\2\2\2\u093c\u093a\3\2\2\2\u093d\u093f\5\u0086")
        buf.write("D\2\u093e\u0909\3\2\2\2\u093e\u0918\3\2\2\2\u093e\u092f")
        buf.write("\3\2\2\2\u093f\u0089\3\2\2\2\u0940\u0944\7D\2\2\u0941")
        buf.write("\u0943\7v\2\2\u0942\u0941\3\2\2\2\u0943\u0946\3\2\2\2")
        buf.write("\u0944\u0942\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0948\3")
        buf.write("\2\2\2\u0946\u0944\3\2\2\2\u0947\u0949\5\u008cG\2\u0948")
        buf.write("\u0947\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094d\3\2\2\2")
        buf.write("\u094a\u094c\7v\2\2\u094b\u094a\3\2\2\2\u094c\u094f\3")
        buf.write("\2\2\2\u094d\u094b\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u0950")
        buf.write("\3\2\2\2\u094f\u094d\3\2\2\2\u0950\u0951\7E\2\2\u0951")
        buf.write("\u008b\3\2\2\2\u0952\u0954\5\u008eH\2\u0953\u0952\3\2")
        buf.write("\2\2\u0954\u0955\3\2\2\2\u0955\u0953\3\2\2\2\u0955\u0956")
        buf.write("\3\2\2\2\u0956\u008d\3\2\2\2\u0957\u0959\7v\2\2\u0958")
        buf.write("\u0957\3\2\2\2\u0959\u095c\3\2\2\2\u095a\u0958\3\2\2\2")
        buf.write("\u095a\u095b\3\2\2\2\u095b\u095f\3\2\2\2\u095c\u095a\3")
        buf.write("\2\2\2\u095d\u0960\5\u0086D\2\u095e\u0960\5\64\33\2\u095f")
        buf.write("\u095d\3\2\2\2\u095f\u095e\3\2\2\2\u0960\u0964\3\2\2\2")
        buf.write("\u0961\u0963\7v\2\2\u0962\u0961\3\2\2\2\u0963\u0966\3")
        buf.write("\2\2\2\u0964\u0962\3\2\2\2\u0964\u0965\3\2\2\2\u0965\u008f")
        buf.write("\3\2\2\2\u0966\u0964\3\2\2\2\u0967\u0969\5\60\31\2\u0968")
        buf.write("\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096a\3\2\2\2")
        buf.write("\u096a\u096b\5\u00ba^\2\u096b\u0091\3\2\2\2\u096c\u0970")
        buf.write("\7\13\2\2\u096d\u096f\7v\2\2\u096e\u096d\3\2\2\2\u096f")
        buf.write("\u0972\3\2\2\2\u0970\u096e\3\2\2\2\u0970\u0971\3\2\2\2")
        buf.write("\u0971\u0973\3\2\2\2\u0972\u0970\3\2\2\2\u0973\u0977\5")
        buf.write("\u008aF\2\u0974\u0976\7v\2\2\u0975\u0974\3\2\2\2\u0976")
        buf.write("\u0979\3\2\2\2\u0977\u0975\3\2\2\2\u0977\u0978\3\2\2\2")
        buf.write("\u0978\u097b\3\2\2\2\u0979\u0977\3\2\2\2\u097a\u097c\5")
        buf.write("\u0094K\2\u097b\u097a\3\2\2\2\u097c\u097d\3\2\2\2\u097d")
        buf.write("\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0982\3\2\2\2")
        buf.write("\u097f\u0981\7v\2\2\u0980\u097f\3\2\2\2\u0981\u0984\3")
        buf.write("\2\2\2\u0982\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u09a5")
        buf.write("\3\2\2\2\u0984\u0982\3\2\2\2\u0985\u0989\5\u0096L\2\u0986")
        buf.write("\u0988\7v\2\2\u0987\u0986\3\2\2\2\u0988\u098b\3\2\2\2")
        buf.write("\u0989\u0987\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u098d\3")
        buf.write("\2\2\2\u098b\u0989\3\2\2\2\u098c\u098e\5\u0098M\2\u098d")
        buf.write("\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u0992\3\2\2\2")
        buf.write("\u098f\u0991\7v\2\2\u0990\u098f\3\2\2\2\u0991\u0994\3")
        buf.write("\2\2\2\u0992\u0990\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u09a6")
        buf.write("\3\2\2\2\u0994\u0992\3\2\2\2\u0995\u0999\5\u0098M\2\u0996")
        buf.write("\u0998\7v\2\2\u0997\u0996\3\2\2\2\u0998\u099b\3\2\2\2")
        buf.write("\u0999\u0997\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099d\3")
        buf.write("\2\2\2\u099b\u0999\3\2\2\2\u099c\u099e\5\u0096L\2\u099d")
        buf.write("\u099c\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u09a2\3\2\2\2")
        buf.write("\u099f\u09a1\7v\2\2\u09a0\u099f\3\2\2\2\u09a1\u09a4\3")
        buf.write("\2\2\2\u09a2\u09a0\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a6")
        buf.write("\3\2\2\2\u09a4\u09a2\3\2\2\2\u09a5\u0985\3\2\2\2\u09a5")
        buf.write("\u0995\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u0093\3\2\2\2")
        buf.write("\u09a7\u09ab\7\f\2\2\u09a8\u09aa\7v\2\2\u09a9\u09a8\3")
        buf.write("\2\2\2\u09aa\u09ad\3\2\2\2\u09ab\u09a9\3\2\2\2\u09ab\u09ac")
        buf.write("\3\2\2\2\u09ac\u09ae\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ae")
        buf.write("\u09b2\7@\2\2\u09af\u09b1\7v\2\2\u09b0\u09af\3\2\2\2\u09b1")
        buf.write("\u09b4\3\2\2\2\u09b2\u09b0\3\2\2\2\u09b2\u09b3\3\2\2\2")
        buf.write("\u09b3\u09b7\3\2\2\2\u09b4\u09b2\3\2\2\2\u09b5\u09b8\7")
        buf.write("p\2\2\u09b6\u09b8\5p9\2\u09b7\u09b5\3\2\2\2\u09b7\u09b6")
        buf.write("\3\2\2\2\u09b8\u09bc\3\2\2\2\u09b9\u09bb\7v\2\2\u09ba")
        buf.write("\u09b9\3\2\2\2\u09bb\u09be\3\2\2\2\u09bc\u09ba\3\2\2\2")
        buf.write("\u09bc\u09bd\3\2\2\2\u09bd\u09bf\3\2\2\2\u09be\u09bc\3")
        buf.write("\2\2\2\u09bf\u09c3\7A\2\2\u09c0\u09c2\7v\2\2\u09c1\u09c0")
        buf.write("\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3\u09c1\3\2\2\2\u09c3")
        buf.write("\u09c4\3\2\2\2\u09c4\u09ce\3\2\2\2\u09c5\u09c3\3\2\2\2")
        buf.write("\u09c6\u09ca\7\16\2\2\u09c7\u09c9\7v\2\2\u09c8\u09c7\3")
        buf.write("\2\2\2\u09c9\u09cc\3\2\2\2\u09ca\u09c8\3\2\2\2\u09ca\u09cb")
        buf.write("\3\2\2\2\u09cb\u09cd\3\2\2\2\u09cc\u09ca\3\2\2\2\u09cd")
        buf.write("\u09cf\7p\2\2\u09ce\u09c6\3\2\2\2\u09ce\u09cf\3\2\2\2")
        buf.write("\u09cf\u09d3\3\2\2\2\u09d0\u09d2\7v\2\2\u09d1\u09d0\3")
        buf.write("\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2\u09d3\u09d4")
        buf.write("\3\2\2\2\u09d4\u09d6\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d6")
        buf.write("\u09d7\5\u008aF\2\u09d7\u0095\3\2\2\2\u09d8\u09dc\7\r")
        buf.write("\2\2\u09d9\u09db\7v\2\2\u09da\u09d9\3\2\2\2\u09db\u09de")
        buf.write("\3\2\2\2\u09dc\u09da\3\2\2\2\u09dc\u09dd\3\2\2\2\u09dd")
        buf.write("\u09df\3\2\2\2\u09de\u09dc\3\2\2\2\u09df\u09e0\5\u008a")
        buf.write("F\2\u09e0\u0097\3\2\2\2\u09e1\u09e5\7\30\2\2\u09e2\u09e4")
        buf.write("\7v\2\2\u09e3\u09e2\3\2\2\2\u09e4\u09e7\3\2\2\2\u09e5")
        buf.write("\u09e3\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e8\3\2\2\2")
        buf.write("\u09e7\u09e5\3\2\2\2\u09e8\u09e9\5\u008aF\2\u09e9\u0099")
        buf.write("\3\2\2\2\u09ea\u09ee\7 \2\2\u09eb\u09ed\7v\2\2\u09ec\u09eb")
        buf.write("\3\2\2\2\u09ed\u09f0\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ee")
        buf.write("\u09ef\3\2\2\2\u09ef\u09f1\3\2\2\2\u09f0\u09ee\3\2\2\2")
        buf.write("\u09f1\u09f5\7@\2\2\u09f2\u09f4\7v\2\2\u09f3\u09f2\3\2")
        buf.write("\2\2\u09f4\u09f7\3\2\2\2\u09f5\u09f3\3\2\2\2\u09f5\u09f6")
        buf.write("\3\2\2\2\u09f6\u09f8\3\2\2\2\u09f7\u09f5\3\2\2\2\u09f8")
        buf.write("\u09fc\5\60\31\2\u09f9\u09fb\7v\2\2\u09fa\u09f9\3\2\2")
        buf.write("\2\u09fb\u09fe\3\2\2\2\u09fc\u09fa\3\2\2\2\u09fc\u09fd")
        buf.write("\3\2\2\2\u09fd\u09ff\3\2\2\2\u09fe\u09fc\3\2\2\2\u09ff")
        buf.write("\u0a03\7A\2\2\u0a00\u0a02\7v\2\2\u0a01\u0a00\3\2\2\2\u0a02")
        buf.write("\u0a05\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04\3\2\2\2")
        buf.write("\u0a04\u0a06\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a06\u0a0a\5")
        buf.write("\u0086D\2\u0a07\u0a09\7v\2\2\u0a08\u0a07\3\2\2\2\u0a09")
        buf.write("\u0a0c\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0a\u0a0b\3\2\2\2")
        buf.write("\u0a0b\u0a15\3\2\2\2\u0a0c\u0a0a\3\2\2\2\u0a0d\u0a11\7")
        buf.write("\30\2\2\u0a0e\u0a10\7v\2\2\u0a0f\u0a0e\3\2\2\2\u0a10\u0a13")
        buf.write("\3\2\2\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12")
        buf.write("\u0a14\3\2\2\2\u0a13\u0a11\3\2\2\2\u0a14\u0a16\5\u0086")
        buf.write("D\2\u0a15\u0a0d\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a36")
        buf.write("\3\2\2\2\u0a17\u0a1b\7/\2\2\u0a18\u0a1a\7v\2\2\u0a19\u0a18")
        buf.write("\3\2\2\2\u0a1a\u0a1d\3\2\2\2\u0a1b\u0a19\3\2\2\2\u0a1b")
        buf.write("\u0a1c\3\2\2\2\u0a1c\u0a1e\3\2\2\2\u0a1d\u0a1b\3\2\2\2")
        buf.write("\u0a1e\u0a22\7@\2\2\u0a1f\u0a21\7v\2\2\u0a20\u0a1f\3\2")
        buf.write("\2\2\u0a21\u0a24\3\2\2\2\u0a22\u0a20\3\2\2\2\u0a22\u0a23")
        buf.write("\3\2\2\2\u0a23\u0a25\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a25")
        buf.write("\u0a29\5\60\31\2\u0a26\u0a28\7v\2\2\u0a27\u0a26\3\2\2")
        buf.write("\2\u0a28\u0a2b\3\2\2\2\u0a29\u0a27\3\2\2\2\u0a29\u0a2a")
        buf.write("\3\2\2\2\u0a2a\u0a2c\3\2\2\2\u0a2b\u0a29\3\2\2\2\u0a2c")
        buf.write("\u0a30\7A\2\2\u0a2d\u0a2f\7v\2\2\u0a2e\u0a2d\3\2\2\2\u0a2f")
        buf.write("\u0a32\3\2\2\2\u0a30\u0a2e\3\2\2\2\u0a30\u0a31\3\2\2\2")
        buf.write("\u0a31\u0a33\3\2\2\2\u0a32\u0a30\3\2\2\2\u0a33\u0a34\5")
        buf.write("\u0086D\2\u0a34\u0a36\3\2\2\2\u0a35\u09ea\3\2\2\2\u0a35")
        buf.write("\u0a17\3\2\2\2\u0a36\u009b\3\2\2\2\u0a37\u0a3b\7\66\2")
        buf.write("\2\u0a38\u0a3a\7v\2\2\u0a39\u0a38\3\2\2\2\u0a3a\u0a3d")
        buf.write("\3\2\2\2\u0a3b\u0a39\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c")
        buf.write("\u0a3e\3\2\2\2\u0a3d\u0a3b\3\2\2\2\u0a3e\u0a42\7@\2\2")
        buf.write("\u0a3f\u0a41\7v\2\2\u0a40\u0a3f\3\2\2\2\u0a41\u0a44\3")
        buf.write("\2\2\2\u0a42\u0a40\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a45")
        buf.write("\3\2\2\2\u0a44\u0a42\3\2\2\2\u0a45\u0a49\5\60\31\2\u0a46")
        buf.write("\u0a48\7v\2\2\u0a47\u0a46\3\2\2\2\u0a48\u0a4b\3\2\2\2")
        buf.write("\u0a49\u0a47\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a4c\3")
        buf.write("\2\2\2\u0a4b\u0a49\3\2\2\2\u0a4c\u0a50\7A\2\2\u0a4d\u0a4f")
        buf.write("\7v\2\2\u0a4e\u0a4d\3\2\2\2\u0a4f\u0a52\3\2\2\2\u0a50")
        buf.write("\u0a4e\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a53\3\2\2\2")
        buf.write("\u0a52\u0a50\3\2\2\2\u0a53\u0a54\5\u0086D\2\u0a54\u0a9a")
        buf.write("\3\2\2\2\u0a55\u0a59\7\26\2\2\u0a56\u0a58\7v\2\2\u0a57")
        buf.write("\u0a56\3\2\2\2\u0a58\u0a5b\3\2\2\2\u0a59\u0a57\3\2\2\2")
        buf.write("\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a59\3")
        buf.write("\2\2\2\u0a5c\u0a60\5\u0086D\2\u0a5d\u0a5f\7v\2\2\u0a5e")
        buf.write("\u0a5d\3\2\2\2\u0a5f\u0a62\3\2\2\2\u0a60\u0a5e\3\2\2\2")
        buf.write("\u0a60\u0a61\3\2\2\2\u0a61\u0a63\3\2\2\2\u0a62\u0a60\3")
        buf.write("\2\2\2\u0a63\u0a67\7\66\2\2\u0a64\u0a66\7v\2\2\u0a65\u0a64")
        buf.write("\3\2\2\2\u0a66\u0a69\3\2\2\2\u0a67\u0a65\3\2\2\2\u0a67")
        buf.write("\u0a68\3\2\2\2\u0a68\u0a6a\3\2\2\2\u0a69\u0a67\3\2\2\2")
        buf.write("\u0a6a\u0a6e\7@\2\2\u0a6b\u0a6d\7v\2\2\u0a6c\u0a6b\3\2")
        buf.write("\2\2\u0a6d\u0a70\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6f")
        buf.write("\3\2\2\2\u0a6f\u0a71\3\2\2\2\u0a70\u0a6e\3\2\2\2\u0a71")
        buf.write("\u0a75\5\60\31\2\u0a72\u0a74\7v\2\2\u0a73\u0a72\3\2\2")
        buf.write("\2\u0a74\u0a77\3\2\2\2\u0a75\u0a73\3\2\2\2\u0a75\u0a76")
        buf.write("\3\2\2\2\u0a76\u0a78\3\2\2\2\u0a77\u0a75\3\2\2\2\u0a78")
        buf.write("\u0a79\7A\2\2\u0a79\u0a7a\5\u00ba^\2\u0a7a\u0a9a\3\2\2")
        buf.write("\2\u0a7b\u0a7f\7\36\2\2\u0a7c\u0a7e\7v\2\2\u0a7d\u0a7c")
        buf.write("\3\2\2\2\u0a7e\u0a81\3\2\2\2\u0a7f\u0a7d\3\2\2\2\u0a7f")
        buf.write("\u0a80\3\2\2\2\u0a80\u0a82\3\2\2\2\u0a81\u0a7f\3\2\2\2")
        buf.write("\u0a82\u0a86\7@\2\2\u0a83\u0a85\7v\2\2\u0a84\u0a83\3\2")
        buf.write("\2\2\u0a85\u0a88\3\2\2\2\u0a86\u0a84\3\2\2\2\u0a86\u0a87")
        buf.write("\3\2\2\2\u0a87\u0a89\3\2\2\2\u0a88\u0a86\3\2\2\2\u0a89")
        buf.write("\u0a8d\5\u009eP\2\u0a8a\u0a8c\7v\2\2\u0a8b\u0a8a\3\2\2")
        buf.write("\2\u0a8c\u0a8f\3\2\2\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8e")
        buf.write("\3\2\2\2\u0a8e\u0a90\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a90")
        buf.write("\u0a94\7A\2\2\u0a91\u0a93\7v\2\2\u0a92\u0a91\3\2\2\2\u0a93")
        buf.write("\u0a96\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a94\u0a95\3\2\2\2")
        buf.write("\u0a95\u0a97\3\2\2\2\u0a96\u0a94\3\2\2\2\u0a97\u0a98\5")
        buf.write("\u0086D\2\u0a98\u0a9a\3\2\2\2\u0a99\u0a37\3\2\2\2\u0a99")
        buf.write("\u0a55\3\2\2\2\u0a99\u0a7b\3\2\2\2\u0a9a\u009d\3\2\2\2")
        buf.write("\u0a9b\u0aa0\5\u00a0Q\2\u0a9c\u0a9e\5\60\31\2\u0a9d\u0a9c")
        buf.write("\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0aa0\3\2\2\2\u0a9f")
        buf.write("\u0a9b\3\2\2\2\u0a9f\u0a9d\3\2\2\2\u0aa0\u0aa1\3\2\2\2")
        buf.write("\u0aa1\u0aa3\5\u00ba^\2\u0aa2\u0aa4\5\u00a2R\2\u0aa3\u0aa2")
        buf.write("\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5")
        buf.write("\u0aa7\5\u00ba^\2\u0aa6\u0aa8\5\u00a2R\2\u0aa7\u0aa6\3")
        buf.write("\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u009f\3\2\2\2\u0aa9\u0aad")
        buf.write("\5\66\34\2\u0aaa\u0aac\7v\2\2\u0aab\u0aaa\3\2\2\2\u0aac")
        buf.write("\u0aaf\3\2\2\2\u0aad\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2")
        buf.write("\u0aae\u0ab1\3\2\2\2\u0aaf\u0aad\3\2\2\2\u0ab0\u0ab2\5")
        buf.write(":\36\2\u0ab1\u0ab0\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u00a1")
        buf.write("\3\2\2\2\u0ab3\u0ab7\5,\27\2\u0ab4\u0ab6\7v\2\2\u0ab5")
        buf.write("\u0ab4\3\2\2\2\u0ab6\u0ab9\3\2\2\2\u0ab7\u0ab5\3\2\2\2")
        buf.write("\u0ab7\u0ab8\3\2\2\2\u0ab8\u0aca\3\2\2\2\u0ab9\u0ab7\3")
        buf.write("\2\2\2\u0aba\u0abe\7_\2\2\u0abb\u0abd\7v\2\2\u0abc\u0abb")
        buf.write("\3\2\2\2\u0abd\u0ac0\3\2\2\2\u0abe\u0abc\3\2\2\2\u0abe")
        buf.write("\u0abf\3\2\2\2\u0abf\u0ac1\3\2\2\2\u0ac0\u0abe\3\2\2\2")
        buf.write("\u0ac1\u0ac5\5,\27\2\u0ac2\u0ac4\7v\2\2\u0ac3\u0ac2\3")
        buf.write("\2\2\2\u0ac4\u0ac7\3\2\2\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac6")
        buf.write("\3\2\2\2\u0ac6\u0ac9\3\2\2\2\u0ac7\u0ac5\3\2\2\2\u0ac8")
        buf.write("\u0aba\3\2\2\2\u0ac9\u0acc\3\2\2\2\u0aca\u0ac8\3\2\2\2")
        buf.write("\u0aca\u0acb\3\2\2\2\u0acb\u00a3\3\2\2\2\u0acc\u0aca\3")
        buf.write("\2\2\2\u0acd\u0ad1\7\37\2\2\u0ace\u0ad0\7v\2\2\u0acf\u0ace")
        buf.write("\3\2\2\2\u0ad0\u0ad3\3\2\2\2\u0ad1\u0acf\3\2\2\2\u0ad1")
        buf.write("\u0ad2\3\2\2\2\u0ad2\u0ad4\3\2\2\2\u0ad3\u0ad1\3\2\2\2")
        buf.write("\u0ad4\u0ae9\7p\2\2\u0ad5\u0ae9\t\26\2\2\u0ad6\u0ada\7")
        buf.write("\'\2\2\u0ad7\u0ad9\7v\2\2\u0ad8\u0ad7\3\2\2\2\u0ad9\u0adc")
        buf.write("\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb")
        buf.write("\u0ade\3\2\2\2\u0adc\u0ada\3\2\2\2\u0add\u0adf\5\60\31")
        buf.write("\2\u0ade\u0add\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf\u0ae9")
        buf.write("\3\2\2\2\u0ae0\u0ae4\7\37\2\2\u0ae1\u0ae3\7v\2\2\u0ae2")
        buf.write("\u0ae1\3\2\2\2\u0ae3\u0ae6\3\2\2\2\u0ae4\u0ae2\3\2\2\2")
        buf.write("\u0ae4\u0ae5\3\2\2\2\u0ae5\u0ae7\3\2\2\2\u0ae6\u0ae4\3")
        buf.write("\2\2\2\u0ae7\u0ae9\5\20\t\2\u0ae8\u0acd\3\2\2\2\u0ae8")
        buf.write("\u0ad5\3\2\2\2\u0ae8\u0ad6\3\2\2\2\u0ae8\u0ae0\3\2\2\2")
        buf.write("\u0ae9\u0aea\3\2\2\2\u0aea\u0aeb\5\u00ba^\2\u0aeb\u00a5")
        buf.write("\3\2\2\2\u0aec\u0aee\5\u00a8U\2\u0aed\u0aec\3\2\2\2\u0aed")
        buf.write("\u0aee\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af0\7\2\2\3")
        buf.write("\u0af0\u00a7\3\2\2\2\u0af1\u0af9\5\u00aaV\2\u0af2\u0af9")
        buf.write("\5\u00ba^\2\u0af3\u0af5\7v\2\2\u0af4\u0af3\3\2\2\2\u0af5")
        buf.write("\u0af6\3\2\2\2\u0af6\u0af4\3\2\2\2\u0af6\u0af7\3\2\2\2")
        buf.write("\u0af7\u0af9\3\2\2\2\u0af8\u0af1\3\2\2\2\u0af8\u0af2\3")
        buf.write("\2\2\2\u0af8\u0af4\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0af8")
        buf.write("\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u00a9\3\2\2\2\u0afc")
        buf.write("\u0b00\5\u00acW\2\u0afd\u0b00\5\64\33\2\u0afe\u0b00\5")
        buf.write("\u00b2Z\2\u0aff\u0afc\3\2\2\2\u0aff\u0afd\3\2\2\2\u0aff")
        buf.write("\u0afe\3\2\2\2\u0b00\u00ab\3\2\2\2\u0b01\u0b05\5\u00ae")
        buf.write("X\2\u0b02\u0b04\7v\2\2\u0b03\u0b02\3\2\2\2\u0b04\u0b07")
        buf.write("\3\2\2\2\u0b05\u0b03\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06")
        buf.write("\u0b08\3\2\2\2\u0b07\u0b05\3\2\2\2\u0b08\u0b0c\5`\61\2")
        buf.write("\u0b09\u0b0b\7v\2\2\u0b0a\u0b09\3\2\2\2\u0b0b\u0b0e\3")
        buf.write("\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u0b10")
        buf.write("\3\2\2\2\u0b0e\u0b0c\3\2\2\2\u0b0f\u0b11\5\u00b8]\2\u0b10")
        buf.write("\u0b0f\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b15\3\2\2\2")
        buf.write("\u0b12\u0b14\7v\2\2\u0b13\u0b12\3\2\2\2\u0b14\u0b17\3")
        buf.write("\2\2\2\u0b15\u0b13\3\2\2\2\u0b15\u0b16\3\2\2\2\u0b16\u0b18")
        buf.write("\3\2\2\2\u0b17\u0b15\3\2\2\2\u0b18\u0b19\5\u008aF\2\u0b19")
        buf.write("\u0b35\3\2\2\2\u0b1a\u0b1e\5\u00aeX\2\u0b1b\u0b1d\7v\2")
        buf.write("\2\u0b1c\u0b1b\3\2\2\2\u0b1d\u0b20\3\2\2\2\u0b1e\u0b1c")
        buf.write("\3\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b21\3\2\2\2\u0b20")
        buf.write("\u0b1e\3\2\2\2\u0b21\u0b25\5`\61\2\u0b22\u0b24\7v\2\2")
        buf.write("\u0b23\u0b22\3\2\2\2\u0b24\u0b27\3\2\2\2\u0b25\u0b23\3")
        buf.write("\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b29\3\2\2\2\u0b27\u0b25")
        buf.write("\3\2\2\2\u0b28\u0b2a\5\u00b8]\2\u0b29\u0b28\3\2\2\2\u0b29")
        buf.write("\u0b2a\3\2\2\2\u0b2a\u0b2e\3\2\2\2\u0b2b\u0b2d\7v\2\2")
        buf.write("\u0b2c\u0b2b\3\2\2\2\u0b2d\u0b30\3\2\2\2\u0b2e\u0b2c\3")
        buf.write("\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b31\3\2\2\2\u0b30\u0b2e")
        buf.write("\3\2\2\2\u0b31\u0b32\5\b\5\2\u0b32\u0b33\5\u00ba^\2\u0b33")
        buf.write("\u0b35\3\2\2\2\u0b34\u0b01\3\2\2\2\u0b34\u0b1a\3\2\2\2")
        buf.write("\u0b35\u00ad\3\2\2\2\u0b36\u0b38\5\u00b0Y\2\u0b37\u0b36")
        buf.write("\3\2\2\2\u0b38\u0b3b\3\2\2\2\u0b39\u0b37\3\2\2\2\u0b39")
        buf.write("\u0b3a\3\2\2\2\u0b3a\u0b3f\3\2\2\2\u0b3b\u0b39\3\2\2\2")
        buf.write("\u0b3c\u0b3e\7v\2\2\u0b3d\u0b3c\3\2\2\2\u0b3e\u0b41\3")
        buf.write("\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b43")
        buf.write("\3\2\2\2\u0b41\u0b3f\3\2\2\2\u0b42\u0b44\5\66\34\2\u0b43")
        buf.write("\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u00af\3\2\2\2")
        buf.write("\u0b45\u0b46\7Z\2\2\u0b46\u0b47\7p\2\2\u0b47\u00b1\3\2")
        buf.write("\2\2\u0b48\u0b4c\7\31\2\2\u0b49\u0b4b\7v\2\2\u0b4a\u0b49")
        buf.write("\3\2\2\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4c")
        buf.write("\u0b4d\3\2\2\2\u0b4d\u0b4f\3\2\2\2\u0b4e\u0b4c\3\2\2\2")
        buf.write("\u0b4f\u0b53\7p\2\2\u0b50\u0b52\7v\2\2\u0b51\u0b50\3\2")
        buf.write("\2\2\u0b52\u0b55\3\2\2\2\u0b53\u0b51\3\2\2\2\u0b53\u0b54")
        buf.write("\3\2\2\2\u0b54\u0b56\3\2\2\2\u0b55\u0b53\3\2\2\2\u0b56")
        buf.write("\u0b5a\5b\62\2\u0b57\u0b59\7v\2\2\u0b58\u0b57\3\2\2\2")
        buf.write("\u0b59\u0b5c\3\2\2\2\u0b5a\u0b58\3\2\2\2\u0b5a\u0b5b\3")
        buf.write("\2\2\2\u0b5b\u0b5e\3\2\2\2\u0b5c\u0b5a\3\2\2\2\u0b5d\u0b5f")
        buf.write("\5\u00b8]\2\u0b5e\u0b5d\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f")
        buf.write("\u0b63\3\2\2\2\u0b60\u0b62\7v\2\2\u0b61\u0b60\3\2\2\2")
        buf.write("\u0b62\u0b65\3\2\2\2\u0b63\u0b61\3\2\2\2\u0b63\u0b64\3")
        buf.write("\2\2\2\u0b64\u0b66\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b66\u0b67")
        buf.write("\5\u00b4[\2\u0b67\u00b3\3\2\2\2\u0b68\u0b6c\7D\2\2\u0b69")
        buf.write("\u0b6b\7v\2\2\u0b6a\u0b69\3\2\2\2\u0b6b\u0b6e\3\2\2\2")
        buf.write("\u0b6c\u0b6a\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b89\3")
        buf.write("\2\2\2\u0b6e\u0b6c\3\2\2\2\u0b6f\u0b73\5\u00b6\\\2\u0b70")
        buf.write("\u0b72\7v\2\2\u0b71\u0b70\3\2\2\2\u0b72\u0b75\3\2\2\2")
        buf.write("\u0b73\u0b71\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b86\3")
        buf.write("\2\2\2\u0b75\u0b73\3\2\2\2\u0b76\u0b7a\7_\2\2\u0b77\u0b79")
        buf.write("\7v\2\2\u0b78\u0b77\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a")
        buf.write("\u0b78\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d\3\2\2\2")
        buf.write("\u0b7c\u0b7a\3\2\2\2\u0b7d\u0b81\5\u00b6\\\2\u0b7e\u0b80")
        buf.write("\7v\2\2\u0b7f\u0b7e\3\2\2\2\u0b80\u0b83\3\2\2\2\u0b81")
        buf.write("\u0b7f\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b85\3\2\2\2")
        buf.write("\u0b83\u0b81\3\2\2\2\u0b84\u0b76\3\2\2\2\u0b85\u0b88\3")
        buf.write("\2\2\2\u0b86\u0b84\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b8a")
        buf.write("\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b89\u0b6f\3\2\2\2\u0b89")
        buf.write("\u0b8a\3\2\2\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0b8c\7E\2\2")
        buf.write("\u0b8c\u00b5\3\2\2\2\u0b8d\u0b91\7p\2\2\u0b8e\u0b90\7")
        buf.write("v\2\2\u0b8f\u0b8e\3\2\2\2\u0b90\u0b93\3\2\2\2\u0b91\u0b8f")
        buf.write("\3\2\2\2\u0b91\u0b92\3\2\2\2\u0b92\u0b94\3\2\2\2\u0b93")
        buf.write("\u0b91\3\2\2\2\u0b94\u0b98\7]\2\2\u0b95\u0b97\7v\2\2\u0b96")
        buf.write("\u0b95\3\2\2\2\u0b97\u0b9a\3\2\2\2\u0b98\u0b96\3\2\2\2")
        buf.write("\u0b98\u0b99\3\2\2\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b98\3")
        buf.write("\2\2\2\u0b9b\u0b9c\5\2\2\2\u0b9c\u00b7\3\2\2\2\u0b9d\u0ba1")
        buf.write("\5\64\33\2\u0b9e\u0ba0\7v\2\2\u0b9f\u0b9e\3\2\2\2\u0ba0")
        buf.write("\u0ba3\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba1\u0ba2\3\2\2\2")
        buf.write("\u0ba2\u0ba5\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba4\u0b9d\3")
        buf.write("\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7")
        buf.write("\3\2\2\2\u0ba7\u00b9\3\2\2\2\u0ba8\u0baa\7w\2\2\u0ba9")
        buf.write("\u0ba8\3\2\2\2\u0baa\u0bad\3\2\2\2\u0bab\u0ba9\3\2\2\2")
        buf.write("\u0bab\u0bac\3\2\2\2\u0bac\u0bae\3\2\2\2\u0bad\u0bab\3")
        buf.write("\2\2\2\u0bae\u0bb2\7^\2\2\u0baf\u0bb1\7w\2\2\u0bb0\u0baf")
        buf.write("\3\2\2\2\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2")
        buf.write("\u0bb3\3\2\2\2\u0bb3\u00bb\3\2\2\2\u0bb4\u0bb2\3\2\2\2")
        buf.write("\u01c4\u00c1\u00c9\u00d0\u00d6\u00da\u00df\u00e6\u00ed")
        buf.write("\u00f3\u00fc\u0106\u010d\u0114\u011b\u0122\u0126\u012b")
        buf.write("\u0130\u0135\u013c\u0143\u014c\u0150\u0155\u015d\u0162")
        buf.write("\u0164\u016b\u0172\u0179\u017e\u0184\u018a\u0192\u019b")
        buf.write("\u01a2\u01a9\u01b2\u01b6\u01bf\u01c6\u01cd\u01d4\u01da")
        buf.write("\u01e1\u01e7\u01ee\u01f5\u01fc\u0201\u0208\u020f\u0216")
        buf.write("\u021b\u0222\u0229\u0230\u0235\u023c\u0243\u024a\u024f")
        buf.write("\u0256\u025d\u0264\u0269\u0270\u0277\u027e\u0283\u028a")
        buf.write("\u0291\u0298\u029d\u02a4\u02ab\u02b2\u02b7\u02be\u02c5")
        buf.write("\u02cc\u02d1\u02d8\u02df\u02e6\u02eb\u02f2\u02f9\u0300")
        buf.write("\u0307\u030e\u0311\u0318\u031f\u0325\u032d\u0334\u033b")
        buf.write("\u0340\u0349\u034d\u0352\u0358\u035d\u0364\u036a\u0371")
        buf.write("\u0378\u037d\u0384\u038b\u0392\u0395\u03a7\u03ae\u03b5")
        buf.write("\u03c0\u03c6\u03cd\u03d4\u03e0\u03e7\u03ee\u03f3\u03f9")
        buf.write("\u03ff\u0406\u040d\u0410\u0416\u041c\u0422\u042b\u0430")
        buf.write("\u0437\u043e\u0443\u0449\u044d\u0452\u0456\u045b\u045f")
        buf.write("\u0465\u046c\u0472\u0477\u047c\u0483\u0487\u048d\u0491")
        buf.write("\u0496\u049d\u04a4\u04a8\u04ad\u04b6\u04ba\u04c0\u04c7")
        buf.write("\u04ce\u04d3\u04da\u04e1\u04e8\u04eb\u04f3\u04fa\u0501")
        buf.write("\u0508\u0513\u051a\u051f\u0524\u052a\u052f\u053a\u0541")
        buf.write("\u054a\u0551\u0559\u055d\u0562\u0569\u0570\u0575\u057b")
        buf.write("\u0582\u0586\u058b\u058f\u0594\u059c\u05a3\u05aa\u05ae")
        buf.write("\u05b3\u05ba\u05c3\u05ca\u05d1\u05d9\u05e2\u05e9\u05ed")
        buf.write("\u05f2\u05f9\u0601\u0608\u060f\u0618\u061f\u0623\u0628")
        buf.write("\u062c\u062e\u0636\u063d\u0642\u0644\u064b\u064f\u0654")
        buf.write("\u0659\u065e\u0664\u066b\u0672\u0675\u067b\u0682\u0689")
        buf.write("\u068e\u0695\u069e\u06a2\u06a4\u06aa\u06b1\u06b8\u06bd")
        buf.write("\u06c4\u06c8\u06cc\u06d1\u06d5\u06dc\u06e3\u06ec\u06f0")
        buf.write("\u06f5\u06f9\u06fe\u0706\u070d\u0711\u0716\u071d\u0726")
        buf.write("\u072d\u0734\u073b\u0744\u074b\u0753\u0757\u075c\u0760")
        buf.write("\u0766\u076d\u0771\u0776\u077a\u077f\u0787\u078e\u0795")
        buf.write("\u0799\u079e\u07a5\u07ae\u07b5\u07bc\u07c3\u07ca\u07d3")
        buf.write("\u07da\u07e1\u07e9\u07f0\u07f4\u07f9\u07fd\u07ff\u0809")
        buf.write("\u080d\u0812\u0816\u081b\u081f\u0822\u0827\u082e\u0835")
        buf.write("\u0839\u083e\u0845\u084a\u0851\u0859\u085f\u0866\u086f")
        buf.write("\u0873\u0879\u0880\u0887\u088e\u0894\u0899\u08aa\u08b1")
        buf.write("\u08b8\u08bf\u08c6\u08cd\u08d2\u08d5\u08da\u08e1\u08e8")
        buf.write("\u08ef\u08f5\u08f8\u08fc\u0902\u0907\u090d\u0914\u091c")
        buf.write("\u0923\u092a\u0933\u093a\u093e\u0944\u0948\u094d\u0955")
        buf.write("\u095a\u095f\u0964\u0968\u0970\u0977\u097d\u0982\u0989")
        buf.write("\u098d\u0992\u0999\u099d\u09a2\u09a5\u09ab\u09b2\u09b7")
        buf.write("\u09bc\u09c3\u09ca\u09ce\u09d3\u09dc\u09e5\u09ee\u09f5")
        buf.write("\u09fc\u0a03\u0a0a\u0a11\u0a15\u0a1b\u0a22\u0a29\u0a30")
        buf.write("\u0a35\u0a3b\u0a42\u0a49\u0a50\u0a59\u0a60\u0a67\u0a6e")
        buf.write("\u0a75\u0a7f\u0a86\u0a8d\u0a94\u0a99\u0a9d\u0a9f\u0aa3")
        buf.write("\u0aa7\u0aad\u0ab1\u0ab7\u0abe\u0ac5\u0aca\u0ad1\u0ada")
        buf.write("\u0ade\u0ae4\u0ae8\u0aed\u0af6\u0af8\u0afa\u0aff\u0b05")
        buf.write("\u0b0c\u0b10\u0b15\u0b1e\u0b25\u0b29\u0b2e\u0b34\u0b39")
        buf.write("\u0b3f\u0b43\u0b4c\u0b53\u0b5a\u0b5e\u0b63\u0b6c\u0b73")
        buf.write("\u0b7a\u0b81\u0b86\u0b89\u0b91\u0b98\u0ba1\u0ba6\u0bab")
        buf.write("\u0bb2")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'_Complex'", "'__m128'", "'__m128d'", 
                     "'__m128i'", "'__extension__'", "'__asm'", "'__asm__'", 
                     "'__volatile__'", "'try'", "'except'", "'finally'", 
                     "'as'", "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'exttask'", "'entry'", "'enum'", "'extern'", "'float'", 
                     "'for'", "'goto'", "'if'", "'inline'", "'int'", "'lambda'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'spawn'", "'static'", "'status'", 
                     "'struct'", "'switch'", "'typeof'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'alignas'", 
                     "'alignof'", "'atomic'", "'bool'", "'complex'", "'imaginary'", 
                     "'noreturn'", "'static_assert'", "'thread_local'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", 
                     "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                     "'||'", "'^'", "'!'", "'~'", "'@'", "'=>'", "'?'", 
                     "':'", "';'", "','", "'='", "'*='", "'/='", "'%='", 
                     "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
                     "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "As", "Auto", "Break", "Case", "Char", "Const", "Continue", 
                      "Default", "Do", "Double", "Else", "ExtensionTask", 
                      "Entry", "Enum", "Extern", "Float", "For", "Goto", 
                      "If", "Inline", "Int", "Lambda", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Spawn", "Static", "Status", "Struct", "Switch", "Typeof", 
                      "Typedef", "Union", "Unsigned", "Void", "Volatile", 
                      "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "DecoratorSign", "LambdaStartBlock", "Question", 
                      "Colon", "Semi", "Comma", "Assign", "StarAssign", 
                      "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftAssign", "RightShiftAssign", "AndAssign", 
                      "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", 
                      "Dot", "Ellipsis", "Identifier", "Constant", "DigitSequence", 
                      "StringLiteral", "AsmBlock", "Directive", "WS", "Whitespace", 
                      "Newline" ]

    RULE_primaryExpression = 0
    RULE_lambdaFunction = 1
    RULE_lambdaBody = 2
    RULE_expressionLambda = 3
    RULE_statementLambda = 4
    RULE_postfixExpression = 5
    RULE_argumentExpressionList = 6
    RULE_unaryExpression = 7
    RULE_unaryOperator = 8
    RULE_castOrConvertExpression = 9
    RULE_multiplicativeExpression = 10
    RULE_additiveExpression = 11
    RULE_shiftExpression = 12
    RULE_relationalExpression = 13
    RULE_equalityExpression = 14
    RULE_andExpression = 15
    RULE_exclusiveOrExpression = 16
    RULE_inclusiveOrExpression = 17
    RULE_logicalAndExpression = 18
    RULE_logicalOrExpression = 19
    RULE_conditionalExpression = 20
    RULE_assignmentExpression = 21
    RULE_assignmentOperator = 22
    RULE_expression = 23
    RULE_constantExpression = 24
    RULE_declaration = 25
    RULE_declarationSpecifiers = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_storageClassSpecifier = 30
    RULE_typeSpecifier = 31
    RULE_structOrUnionSpecifier = 32
    RULE_structOrUnion = 33
    RULE_structDeclarationList = 34
    RULE_structDeclaration = 35
    RULE_specifierQualifierList = 36
    RULE_structDeclaratorList = 37
    RULE_structDeclarator = 38
    RULE_enumSpecifier = 39
    RULE_enumeratorList = 40
    RULE_enumerator = 41
    RULE_enumerationConstant = 42
    RULE_atomicTypeSpecifier = 43
    RULE_typeQualifier = 44
    RULE_functionSpecifier = 45
    RULE_alignmentSpecifier = 46
    RULE_declarator = 47
    RULE_directDeclarator = 48
    RULE_nestedParenthesesBlock = 49
    RULE_pointer = 50
    RULE_typeQualifierList = 51
    RULE_parameterTypeList = 52
    RULE_parameterList = 53
    RULE_parameterDeclaration = 54
    RULE_identifierList = 55
    RULE_typeName = 56
    RULE_abstractDeclarator = 57
    RULE_directAbstractDeclarator = 58
    RULE_typedefName = 59
    RULE_initializer = 60
    RULE_initializerList = 61
    RULE_designation = 62
    RULE_designatorList = 63
    RULE_designator = 64
    RULE_staticAssertDeclaration = 65
    RULE_statement = 66
    RULE_labeledStatement = 67
    RULE_compoundStatement = 68
    RULE_blockItemList = 69
    RULE_blockItem = 70
    RULE_expressionStatement = 71
    RULE_tryExceptStatement = 72
    RULE_exceptBlock = 73
    RULE_finallyBlock = 74
    RULE_elseBlock = 75
    RULE_selectionStatement = 76
    RULE_iterationStatement = 77
    RULE_forCondition = 78
    RULE_forDeclaration = 79
    RULE_forExpression = 80
    RULE_jumpStatement = 81
    RULE_compilationUnit = 82
    RULE_translationUnit = 83
    RULE_externalItem = 84
    RULE_functionDefinition = 85
    RULE_functionDeclarationSpecifiers = 86
    RULE_decoratorSpecifier = 87
    RULE_extensionTaskDefinition = 88
    RULE_extensionTaskParameterList = 89
    RULE_extensionTaskParameter = 90
    RULE_declarationList = 91
    RULE_endOfItem = 92

    ruleNames =  [ "primaryExpression", "lambdaFunction", "lambdaBody", 
                   "expressionLambda", "statementLambda", "postfixExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castOrConvertExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "tryExceptStatement", "exceptBlock", "finallyBlock", 
                   "elseBlock", "selectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalItem", 
                   "functionDefinition", "functionDeclarationSpecifiers", 
                   "decoratorSpecifier", "extensionTaskDefinition", "extensionTaskParameterList", 
                   "extensionTaskParameter", "declarationList", "endOfItem" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    As=12
    Auto=13
    Break=14
    Case=15
    Char=16
    Const=17
    Continue=18
    Default=19
    Do=20
    Double=21
    Else=22
    ExtensionTask=23
    Entry=24
    Enum=25
    Extern=26
    Float=27
    For=28
    Goto=29
    If=30
    Inline=31
    Int=32
    Lambda=33
    Long=34
    Register=35
    Restrict=36
    Return=37
    Short=38
    Signed=39
    Sizeof=40
    Spawn=41
    Static=42
    Status=43
    Struct=44
    Switch=45
    Typeof=46
    Typedef=47
    Union=48
    Unsigned=49
    Void=50
    Volatile=51
    While=52
    Alignas=53
    Alignof=54
    Atomic=55
    Bool=56
    Complex=57
    Imaginary=58
    Noreturn=59
    StaticAssert=60
    ThreadLocal=61
    LeftParen=62
    RightParen=63
    LeftBracket=64
    RightBracket=65
    LeftBrace=66
    RightBrace=67
    Less=68
    LessEqual=69
    Greater=70
    GreaterEqual=71
    LeftShift=72
    RightShift=73
    Plus=74
    PlusPlus=75
    Minus=76
    MinusMinus=77
    Star=78
    Div=79
    Mod=80
    And=81
    Or=82
    AndAnd=83
    OrOr=84
    Caret=85
    Not=86
    Tilde=87
    DecoratorSign=88
    LambdaStartBlock=89
    Question=90
    Colon=91
    Semi=92
    Comma=93
    Assign=94
    StarAssign=95
    DivAssign=96
    ModAssign=97
    PlusAssign=98
    MinusAssign=99
    LeftShiftAssign=100
    RightShiftAssign=101
    AndAssign=102
    XorAssign=103
    OrAssign=104
    Equal=105
    NotEqual=106
    Arrow=107
    Dot=108
    Ellipsis=109
    Identifier=110
    Constant=111
    DigitSequence=112
    StringLiteral=113
    AsmBlock=114
    Directive=115
    WS=116
    Whitespace=117
    Newline=118

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Spawn(self):
            return self.getToken(ParaCParser.Spawn, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaFunction(self):
            return self.getTypedRuleContext(ParaCParser.LambdaFunctionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 186
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 187
                self.match(ParaCParser.Spawn)
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 188
                    self.match(ParaCParser.WS)
                    self.state = 193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 194
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 197 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 196
                        self.match(ParaCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 199 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 201
                self.match(ParaCParser.LeftParen)
                self.state = 202
                self.expression()
                self.state = 203
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 205
                self.lambdaFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(ParaCParser.LambdaBodyContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunction" ):
                listener.enterLambdaFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunction" ):
                listener.exitLambdaFunction(self)




    def lambdaFunction(self):

        localctx = ParaCParser.LambdaFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdaFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(ParaCParser.LeftParen)
            self.state = 212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 209
                    self.match(ParaCParser.WS) 
                self.state = 214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                self.state = 215
                self.parameterList()


            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 218
                self.match(ParaCParser.WS)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(ParaCParser.RightParen)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 225
                self.match(ParaCParser.WS)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)


        def statementLambda(self):
            return self.getTypedRuleContext(ParaCParser.StatementLambdaContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = ParaCParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_lambdaBody)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.expressionLambda()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.statementLambda()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expressionLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)




    def expressionLambda(self):

        localctx = ParaCParser.ExpressionLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 238
                    self.match(ParaCParser.WS) 
                self.state = 243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 244
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statementLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLambda" ):
                listener.enterStatementLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLambda" ):
                listener.exitStatementLambda(self)




    def statementLambda(self):

        localctx = ParaCParser.StatementLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 247
                self.match(ParaCParser.WS)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 253
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 255
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 256
                self.match(ParaCParser.LeftParen)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 257
                    self.match(ParaCParser.WS)
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 263
                self.typeName()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 264
                    self.match(ParaCParser.WS)
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 270
                self.match(ParaCParser.RightParen)
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 271
                    self.match(ParaCParser.WS)
                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 277
                self.match(ParaCParser.LeftBrace)
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 278
                        self.match(ParaCParser.WS) 
                    self.state = 283
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 284
                self.initializerList()
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 285
                        self.match(ParaCParser.WS) 
                    self.state = 290
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 291
                    self.match(ParaCParser.Comma)


                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 294
                    self.match(ParaCParser.WS)
                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 300
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 307
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 304
                    self.match(ParaCParser.WS) 
                self.state = 309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

            self.state = 354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 352
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.LeftBracket]:
                        self.state = 310
                        self.match(ParaCParser.LeftBracket)
                        self.state = 314
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 311
                                self.match(ParaCParser.WS) 
                            self.state = 316
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                        self.state = 317
                        self.expression()
                        self.state = 321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 318
                            self.match(ParaCParser.WS)
                            self.state = 323
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 324
                        self.match(ParaCParser.RightBracket)
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 326
                        self.match(ParaCParser.LeftParen)
                        self.state = 330
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 327
                                self.match(ParaCParser.WS) 
                            self.state = 332
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                        self.state = 334
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                        if la_ == 1:
                            self.state = 333
                            self.argumentExpressionList()


                        self.state = 339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 336
                            self.match(ParaCParser.WS)
                            self.state = 341
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 342
                        self.match(ParaCParser.RightParen)
                        pass
                    elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                        self.state = 343
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 347
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 344
                            self.match(ParaCParser.WS)
                            self.state = 349
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 350
                        self.match(ParaCParser.Identifier)
                        pass
                    elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                        self.state = 351
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.assignmentExpression()
            self.state = 361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 358
                    self.match(ParaCParser.WS) 
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 364
                self.match(ParaCParser.Comma)
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 365
                        self.match(ParaCParser.WS) 
                    self.state = 370
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 371
                self.assignmentExpression()
                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 372
                        self.match(ParaCParser.WS) 
                    self.state = 377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 383
                    _la = self._input.LA(1)
                    if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (ParaCParser.Sizeof - 40)) | (1 << (ParaCParser.PlusPlus - 40)) | (1 << (ParaCParser.MinusMinus - 40)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 389
                self.match(ParaCParser.WS)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Spawn, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral]:
                self.state = 395
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 396
                self.unaryOperator()
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 397
                        self.match(ParaCParser.WS) 
                    self.state = 402
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 403
                self.castOrConvertExpression(0)
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 405
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 406
                    self.match(ParaCParser.WS)
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 412
                self.match(ParaCParser.LeftParen)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 413
                    self.match(ParaCParser.WS)
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 419
                self.typeName()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 420
                    self.match(ParaCParser.WS)
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 426
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 428
                self.match(ParaCParser.AndAnd)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 429
                    self.match(ParaCParser.WS)
                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 435
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (ParaCParser.Plus - 74)) | (1 << (ParaCParser.Minus - 74)) | (1 << (ParaCParser.Star - 74)) | (1 << (ParaCParser.And - 74)) | (1 << (ParaCParser.Not - 74)) | (1 << (ParaCParser.Tilde - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOrConvertExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castOrConvertExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOrConvertExpression" ):
                listener.enterCastOrConvertExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOrConvertExpression" ):
                listener.exitCastOrConvertExpression(self)



    def castOrConvertExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.CastOrConvertExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_castOrConvertExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 441
                self.match(ParaCParser.LeftParen)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 442
                    self.match(ParaCParser.WS)
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 448
                self.typeName()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 449
                    self.match(ParaCParser.WS)
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 455
                self.match(ParaCParser.RightParen)
                self.state = 459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 456
                        self.match(ParaCParser.WS) 
                    self.state = 461
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                self.state = 462
                self.castOrConvertExpression(4)
                pass

            elif la_ == 2:
                self.state = 464
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 465
                self.match(ParaCParser.DigitSequence)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.CastOrConvertExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_castOrConvertExpression)
                    self.state = 468
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 469
                        self.match(ParaCParser.WS)
                        self.state = 474
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 475
                    self.match(ParaCParser.As)
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 476
                        self.match(ParaCParser.WS)
                        self.state = 481
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 482
                    self.typeName() 
                self.state = 487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castOrConvertExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastOrConvertExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.castOrConvertExpression(0)
            self.state = 492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 489
                    self.match(ParaCParser.WS) 
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 495
                    _la = self._input.LA(1)
                    if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (ParaCParser.Star - 78)) | (1 << (ParaCParser.Div - 78)) | (1 << (ParaCParser.Mod - 78)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 499
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 496
                            self.match(ParaCParser.WS) 
                        self.state = 501
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                    self.state = 502
                    self.castOrConvertExpression(0)
                    self.state = 506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 503
                            self.match(ParaCParser.WS) 
                        self.state = 508
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
             
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.multiplicativeExpression()
            self.state = 518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 515
                    self.match(ParaCParser.WS) 
                self.state = 520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 521
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 525
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 522
                            self.match(ParaCParser.WS) 
                        self.state = 527
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                    self.state = 528
                    self.multiplicativeExpression()
                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 529
                            self.match(ParaCParser.WS) 
                        self.state = 534
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
             
                self.state = 539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.additiveExpression()
            self.state = 544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 541
                    self.match(ParaCParser.WS) 
                self.state = 546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 551
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 548
                            self.match(ParaCParser.WS) 
                        self.state = 553
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                    self.state = 554
                    self.additiveExpression()
                    self.state = 558
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 555
                            self.match(ParaCParser.WS) 
                        self.state = 560
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
             
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.shiftExpression()
            self.state = 570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self.match(ParaCParser.WS) 
                self.state = 572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 573
                    _la = self._input.LA(1)
                    if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (ParaCParser.Less - 68)) | (1 << (ParaCParser.LessEqual - 68)) | (1 << (ParaCParser.Greater - 68)) | (1 << (ParaCParser.GreaterEqual - 68)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 577
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 574
                            self.match(ParaCParser.WS) 
                        self.state = 579
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                    self.state = 580
                    self.shiftExpression()
                    self.state = 584
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 581
                            self.match(ParaCParser.WS) 
                        self.state = 586
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
             
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.relationalExpression()
            self.state = 596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.match(ParaCParser.WS) 
                self.state = 598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 599
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 603
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 600
                            self.match(ParaCParser.WS) 
                        self.state = 605
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                    self.state = 606
                    self.relationalExpression()
                    self.state = 610
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 607
                            self.match(ParaCParser.WS) 
                        self.state = 612
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
             
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.equalityExpression()
            self.state = 622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 619
                    self.match(ParaCParser.WS) 
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 625
                    self.match(ParaCParser.And)
                    self.state = 629
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 626
                            self.match(ParaCParser.WS) 
                        self.state = 631
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                    self.state = 632
                    self.equalityExpression()
                    self.state = 636
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 633
                            self.match(ParaCParser.WS) 
                        self.state = 638
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
             
                self.state = 643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.andExpression()
            self.state = 648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 645
                    self.match(ParaCParser.WS) 
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 651
                    self.match(ParaCParser.Caret)
                    self.state = 655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 652
                            self.match(ParaCParser.WS) 
                        self.state = 657
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 658
                    self.andExpression()
                    self.state = 662
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 659
                            self.match(ParaCParser.WS) 
                        self.state = 664
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
             
                self.state = 669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_inclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.exclusiveOrExpression()
            self.state = 674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 671
                    self.match(ParaCParser.WS) 
                self.state = 676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 677
                    self.match(ParaCParser.Or)
                    self.state = 681
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 678
                            self.match(ParaCParser.WS) 
                        self.state = 683
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                    self.state = 684
                    self.exclusiveOrExpression()
                    self.state = 688
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 685
                            self.match(ParaCParser.WS) 
                        self.state = 690
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
             
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.inclusiveOrExpression()
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 697
                    self.match(ParaCParser.WS) 
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 703
                    self.match(ParaCParser.AndAnd)
                    self.state = 707
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 704
                            self.match(ParaCParser.WS) 
                        self.state = 709
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                    self.state = 710
                    self.inclusiveOrExpression()
                    self.state = 714
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 711
                            self.match(ParaCParser.WS) 
                        self.state = 716
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
             
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_logicalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.logicalAndExpression()
            self.state = 726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 723
                    self.match(ParaCParser.WS) 
                self.state = 728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 729
                    self.match(ParaCParser.OrOr)
                    self.state = 733
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 730
                            self.match(ParaCParser.WS) 
                        self.state = 735
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                    self.state = 736
                    self.logicalAndExpression()
                    self.state = 740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 737
                            self.match(ParaCParser.WS) 
                        self.state = 742
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
             
                self.state = 747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.logicalOrExpression()
            self.state = 752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 749
                    self.match(ParaCParser.WS) 
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 755
                self.match(ParaCParser.Question)
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 756
                        self.match(ParaCParser.WS) 
                    self.state = 761
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 762
                self.expression()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 763
                    self.match(ParaCParser.WS)
                    self.state = 768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 769
                self.match(ParaCParser.Colon)
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 770
                        self.match(ParaCParser.WS) 
                    self.state = 775
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 776
                self.conditionalExpression()
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 777
                        self.match(ParaCParser.WS) 
                    self.state = 782
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentExpression)
        self._la = 0 # Token type
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.unaryExpression()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 787
                    self.match(ParaCParser.WS)
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 793
                self.assignmentOperator()
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 794
                        self.match(ParaCParser.WS) 
                    self.state = 799
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 800
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (ParaCParser.Assign - 94)) | (1 << (ParaCParser.StarAssign - 94)) | (1 << (ParaCParser.DivAssign - 94)) | (1 << (ParaCParser.ModAssign - 94)) | (1 << (ParaCParser.PlusAssign - 94)) | (1 << (ParaCParser.MinusAssign - 94)) | (1 << (ParaCParser.LeftShiftAssign - 94)) | (1 << (ParaCParser.RightShiftAssign - 94)) | (1 << (ParaCParser.AndAssign - 94)) | (1 << (ParaCParser.XorAssign - 94)) | (1 << (ParaCParser.OrAssign - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.assignmentExpression()
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 808
                    self.match(ParaCParser.WS) 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 814
                    self.match(ParaCParser.Comma)
                    self.state = 818
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 815
                            self.match(ParaCParser.WS) 
                        self.state = 820
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                    self.state = 821
                    self.assignmentExpression()
                    self.state = 825
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 822
                            self.match(ParaCParser.WS) 
                        self.state = 827
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
             
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.declarationSpecifiers()
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 836
                        self.match(ParaCParser.WS) 
                    self.state = 841
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (ParaCParser.LeftParen - 62)) | (1 << (ParaCParser.Star - 62)) | (1 << (ParaCParser.Caret - 62)) | (1 << (ParaCParser.Identifier - 62)) | (1 << (ParaCParser.WS - 62)))) != 0):
                    self.state = 842
                    self.initDeclaratorList()


                self.state = 845
                self.endOfItem()
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 850
                    self.declarationSpecifier()
                    self.state = 854
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 851
                            self.match(ParaCParser.WS) 
                        self.state = 856
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 859 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 863
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 865
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.initDeclarator()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 869
                self.match(ParaCParser.WS)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 875
                self.match(ParaCParser.Comma)
                self.state = 879
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 876
                        self.match(ParaCParser.WS) 
                    self.state = 881
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                self.state = 882
                self.initDeclarator()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 883
                    self.match(ParaCParser.WS)
                    self.state = 888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.declarator()
            self.state = 898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 895
                    self.match(ParaCParser.WS) 
                self.state = 900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 901
                self.match(ParaCParser.Assign)
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 902
                        self.match(ParaCParser.WS) 
                    self.state = 907
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                self.state = 908
                self.initializer()
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 909
                        self.match(ParaCParser.WS) 
                    self.state = 914
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Register) | (1 << ParaCParser.Static) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def Lambda(self):
            return self.getToken(ParaCParser.Lambda, 0)

        def Less(self):
            return self.getToken(ParaCParser.Less, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def Greater(self):
            return self.getToken(ParaCParser.Greater, 0)

        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def Typeof(self):
            return self.getToken(ParaCParser.Typeof, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool]:
                self.state = 958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.Void]:
                    self.state = 920
                    self.match(ParaCParser.Void)
                    pass
                elif token in [ParaCParser.Char]:
                    self.state = 921
                    self.match(ParaCParser.Char)
                    pass
                elif token in [ParaCParser.Short]:
                    self.state = 922
                    self.match(ParaCParser.Short)
                    pass
                elif token in [ParaCParser.Int]:
                    self.state = 923
                    self.match(ParaCParser.Int)
                    pass
                elif token in [ParaCParser.Status]:
                    self.state = 924
                    self.match(ParaCParser.Status)
                    pass
                elif token in [ParaCParser.Long]:
                    self.state = 925
                    self.match(ParaCParser.Long)
                    pass
                elif token in [ParaCParser.Float]:
                    self.state = 926
                    self.match(ParaCParser.Float)
                    pass
                elif token in [ParaCParser.Double]:
                    self.state = 927
                    self.match(ParaCParser.Double)
                    pass
                elif token in [ParaCParser.Signed]:
                    self.state = 928
                    self.match(ParaCParser.Signed)
                    pass
                elif token in [ParaCParser.Lambda]:
                    self.state = 929
                    self.match(ParaCParser.Lambda)
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 930
                        self.match(ParaCParser.WS)
                        self.state = 935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 936
                    self.match(ParaCParser.Less)
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 937
                        self.match(ParaCParser.WS)
                        self.state = 942
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 943
                    self.parameterTypeList()
                    self.state = 947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 944
                        self.match(ParaCParser.WS)
                        self.state = 949
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 950
                    self.match(ParaCParser.Greater)
                    pass
                elif token in [ParaCParser.Unsigned]:
                    self.state = 952
                    self.match(ParaCParser.Unsigned)
                    pass
                elif token in [ParaCParser.Bool]:
                    self.state = 953
                    self.match(ParaCParser.Bool)
                    pass
                elif token in [ParaCParser.T__0]:
                    self.state = 954
                    self.match(ParaCParser.T__0)
                    pass
                elif token in [ParaCParser.T__1]:
                    self.state = 955
                    self.match(ParaCParser.T__1)
                    pass
                elif token in [ParaCParser.T__2]:
                    self.state = 956
                    self.match(ParaCParser.T__2)
                    pass
                elif token in [ParaCParser.T__3]:
                    self.state = 957
                    self.match(ParaCParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ParaCParser.T__4]:
                self.state = 960
                self.match(ParaCParser.T__4)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 961
                    self.match(ParaCParser.WS)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 967
                self.match(ParaCParser.LeftParen)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 968
                    self.match(ParaCParser.WS)
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 974
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 975
                    self.match(ParaCParser.WS)
                    self.state = 980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 981
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 982
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 983
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 984
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 985
                self.typedefName()
                pass
            elif token in [ParaCParser.Typeof]:
                self.state = 986
                self.match(ParaCParser.Typeof)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 987
                    self.match(ParaCParser.WS)
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 993
                self.match(ParaCParser.LeftParen)
                self.state = 997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 994
                        self.match(ParaCParser.WS) 
                    self.state = 999
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                self.state = 1000
                self.constantExpression()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1001
                    self.match(ParaCParser.WS)
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1007
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1021
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 1011
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1012
                        self.match(ParaCParser.WS)
                        self.state = 1017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1018
                    self.pointer() 
                self.state = 1023
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def structDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.structOrUnion()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1025
                    self.match(ParaCParser.WS)
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 1031
                    self.match(ParaCParser.Identifier)
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1032
                        self.match(ParaCParser.WS)
                        self.state = 1037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1040
                self.match(ParaCParser.LeftBrace)
                self.state = 1044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1041
                        self.match(ParaCParser.WS) 
                    self.state = 1046
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1047
                        self.structDeclarationList() 
                    self.state = 1052
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1053
                    self.match(ParaCParser.WS)
                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1059
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.structOrUnion()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1062
                    self.match(ParaCParser.WS)
                    self.state = 1067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1068
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1074
                        self.match(ParaCParser.WS)
                        self.state = 1079
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1080
                    self.structDeclaration()
                    self.state = 1084
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1081
                            self.match(ParaCParser.WS) 
                        self.state = 1086
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,135,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1089 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.specifierQualifierList()
                self.state = 1095
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1092
                        self.match(ParaCParser.WS) 
                    self.state = 1097
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (ParaCParser.LeftParen - 62)) | (1 << (ParaCParser.Star - 62)) | (1 << (ParaCParser.Caret - 62)) | (1 << (ParaCParser.Colon - 62)) | (1 << (ParaCParser.Identifier - 62)) | (1 << (ParaCParser.WS - 62)))) != 0):
                    self.state = 1098
                    self.structDeclaratorList()


                self.state = 1101
                self.endOfItem()
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1106
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 1107
                self.typeQualifier()
                pass


            self.state = 1113
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1110
                    self.match(ParaCParser.WS) 
                self.state = 1115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1116
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.structDeclarator()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1120
                self.match(ParaCParser.WS)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1126
                self.match(ParaCParser.Comma)
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1127
                        self.match(ParaCParser.WS) 
                    self.state = 1132
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                self.state = 1133
                self.structDeclarator()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1139
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1140
                    self.declarator()


                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1143
                    self.match(ParaCParser.WS)
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1149
                self.match(ParaCParser.Colon)
                self.state = 1153
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1150
                        self.match(ParaCParser.WS) 
                    self.state = 1155
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                self.state = 1156
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.match(ParaCParser.Enum)
                self.state = 1163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1160
                        self.match(ParaCParser.WS) 
                    self.state = 1165
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 1166
                    self.match(ParaCParser.Identifier)


                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1169
                    self.match(ParaCParser.WS)
                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1175
                self.match(ParaCParser.LeftBrace)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1176
                    self.match(ParaCParser.WS)
                    self.state = 1181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1182
                self.enumeratorList()
                self.state = 1186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1183
                        self.match(ParaCParser.WS) 
                    self.state = 1188
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 1189
                    self.match(ParaCParser.Comma)


                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1192
                    self.match(ParaCParser.WS)
                    self.state = 1197
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1198
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.match(ParaCParser.Enum)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1201
                    self.match(ParaCParser.WS)
                    self.state = 1206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1207
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumeratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.enumerator()
            self.state = 1214
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1211
                    self.match(ParaCParser.WS) 
                self.state = 1216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

            self.state = 1233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1217
                    self.match(ParaCParser.Comma)
                    self.state = 1221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1218
                        self.match(ParaCParser.WS)
                        self.state = 1223
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1224
                    self.enumerator()
                    self.state = 1228
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1225
                            self.match(ParaCParser.WS) 
                        self.state = 1230
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
             
                self.state = 1235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.enumerationConstant()
            self.state = 1240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1237
                    self.match(ParaCParser.WS) 
                self.state = 1242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 1243
                self.match(ParaCParser.Assign)
                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1244
                        self.match(ParaCParser.WS) 
                    self.state = 1249
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                self.state = 1250
                self.constantExpression()
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1251
                        self.match(ParaCParser.WS) 
                    self.state = 1256
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_atomicTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(ParaCParser.Atomic)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1262
                self.match(ParaCParser.WS)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1268
            self.match(ParaCParser.LeftParen)
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1269
                self.match(ParaCParser.WS)
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1275
            self.typeName()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1276
                self.match(ParaCParser.WS)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1282
            self.match(ParaCParser.RightParen)
            self.state = 1286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1283
                    self.match(ParaCParser.WS) 
                self.state = 1288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Entry or _la==ParaCParser.Noreturn):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alignmentSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(ParaCParser.Alignas)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1294
                self.match(ParaCParser.WS)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1300
            self.match(ParaCParser.LeftParen)
            self.state = 1304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1301
                    self.match(ParaCParser.WS) 
                self.state = 1306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1307
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 1308
                self.constantExpression()
                pass


            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1311
                self.match(ParaCParser.WS)
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1317
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 1319
                self.pointer()


            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 1322
                self.match(ParaCParser.WS)
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1328
            self.directDeclarator(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1331
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1332
                self.match(ParaCParser.LeftParen)
                self.state = 1336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1333
                        self.match(ParaCParser.WS) 
                    self.state = 1338
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

                self.state = 1339
                self.declarator()
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1340
                    self.match(ParaCParser.WS)
                    self.state = 1345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1346
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 1348
                self.match(ParaCParser.Identifier)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1349
                    self.match(ParaCParser.WS)
                    self.state = 1354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1355
                self.match(ParaCParser.Colon)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1356
                    self.match(ParaCParser.WS)
                    self.state = 1361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1362
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 1363
                self.match(ParaCParser.LeftParen)
                self.state = 1367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1364
                        self.match(ParaCParser.WS) 
                    self.state = 1369
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 1370
                    self.typeSpecifier(0)


                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1373
                    self.match(ParaCParser.WS)
                    self.state = 1378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1379
                self.pointer()
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1380
                    self.match(ParaCParser.WS)
                    self.state = 1385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1386
                self.directDeclarator(0)
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1387
                    self.match(ParaCParser.WS)
                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1393
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1580
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1578
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1397
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1398
                            self.match(ParaCParser.WS)
                            self.state = 1403
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1404
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1408
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1405
                                self.match(ParaCParser.WS) 
                            self.state = 1410
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                        self.state = 1412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1411
                            self.typeQualifierList()


                        self.state = 1417
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1414
                                self.match(ParaCParser.WS) 
                            self.state = 1419
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                        self.state = 1421
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                        if la_ == 1:
                            self.state = 1420
                            self.assignmentExpression()


                        self.state = 1426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1423
                            self.match(ParaCParser.WS)
                            self.state = 1428
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1429
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1430
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1431
                            self.match(ParaCParser.WS)
                            self.state = 1436
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1437
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1438
                            self.match(ParaCParser.WS)
                            self.state = 1443
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1444
                        self.match(ParaCParser.Static)
                        self.state = 1448
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1445
                                self.match(ParaCParser.WS) 
                            self.state = 1450
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                        self.state = 1452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1451
                            self.typeQualifierList()


                        self.state = 1457
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1454
                                self.match(ParaCParser.WS) 
                            self.state = 1459
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                        self.state = 1460
                        self.assignmentExpression()
                        self.state = 1464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1461
                            self.match(ParaCParser.WS)
                            self.state = 1466
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1467
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1469
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1473
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1470
                            self.match(ParaCParser.WS)
                            self.state = 1475
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1476
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1480
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1477
                            self.match(ParaCParser.WS)
                            self.state = 1482
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1483
                        self.typeQualifierList()
                        self.state = 1487
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1484
                            self.match(ParaCParser.WS)
                            self.state = 1489
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1490
                        self.match(ParaCParser.Static)
                        self.state = 1491
                        self.assignmentExpression()
                        self.state = 1495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1492
                            self.match(ParaCParser.WS)
                            self.state = 1497
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1498
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1500
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1504
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1501
                            self.match(ParaCParser.WS)
                            self.state = 1506
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1507
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1511
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1508
                                self.match(ParaCParser.WS) 
                            self.state = 1513
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

                        self.state = 1515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1514
                            self.typeQualifierList()


                        self.state = 1520
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1517
                            self.match(ParaCParser.WS)
                            self.state = 1522
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1523
                        self.match(ParaCParser.Star)
                        self.state = 1527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1524
                            self.match(ParaCParser.WS)
                            self.state = 1529
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1530
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1531
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1532
                            self.match(ParaCParser.WS)
                            self.state = 1537
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1538
                        self.match(ParaCParser.LeftParen)
                        self.state = 1542
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1539
                            self.match(ParaCParser.WS)
                            self.state = 1544
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1545
                        self.parameterTypeList()
                        self.state = 1549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1546
                            self.match(ParaCParser.WS)
                            self.state = 1551
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1552
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 1554
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1555
                            self.match(ParaCParser.WS)
                            self.state = 1560
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1561
                        self.match(ParaCParser.LeftParen)
                        self.state = 1565
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1562
                                self.match(ParaCParser.WS) 
                            self.state = 1567
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                        self.state = 1569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 1568
                            self.identifierList()


                        self.state = 1574
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1571
                            self.match(ParaCParser.WS)
                            self.state = 1576
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1577
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 1582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1600
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__10, ParaCParser.As, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.DecoratorSign, ParaCParser.LambdaStartBlock, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.AsmBlock, ParaCParser.Directive, ParaCParser.WS, ParaCParser.Whitespace, ParaCParser.Newline]:
                        self.state = 1583
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 1584
                        self.match(ParaCParser.LeftParen)
                        self.state = 1588
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1585
                                self.match(ParaCParser.WS) 
                            self.state = 1590
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

                        self.state = 1591
                        self.nestedParenthesesBlock()
                        self.state = 1595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1592
                            self.match(ParaCParser.WS)
                            self.state = 1597
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1598
                        self.match(ParaCParser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1605
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1609
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1606
                            self.match(ParaCParser.WS) 
                        self.state = 1611
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

                    self.state = 1613
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                    if la_ == 1:
                        self.state = 1612
                        self.typeQualifierList()


                    self.state = 1618
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1615
                            self.match(ParaCParser.WS) 
                        self.state = 1620
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,223,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 1623 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1625
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1628 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.parameterList()
            self.state = 1634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1631
                    self.match(ParaCParser.WS) 
                self.state = 1636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 1637
                self.match(ParaCParser.Comma)
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1638
                    self.match(ParaCParser.WS)
                    self.state = 1643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1644
                self.match(ParaCParser.Ellipsis)
                self.state = 1648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1645
                        self.match(ParaCParser.WS) 
                    self.state = 1650
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,228,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.parameterDeclaration()
            self.state = 1657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1654
                    self.match(ParaCParser.WS) 
                self.state = 1659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

            self.state = 1676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1660
                    self.match(ParaCParser.Comma)
                    self.state = 1664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 1661
                        self.match(ParaCParser.WS)
                        self.state = 1666
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1667
                    self.parameterDeclaration()
                    self.state = 1671
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1668
                            self.match(ParaCParser.WS) 
                        self.state = 1673
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
             
                self.state = 1678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AbstractParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractParameterDeclaration" ):
                listener.enterAbstractParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractParameterDeclaration" ):
                listener.exitAbstractParameterDeclaration(self)


    class RegularParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularParameterDeclaration" ):
                listener.enterRegularParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularParameterDeclaration" ):
                listener.exitRegularParameterDeclaration(self)



    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_parameterDeclaration)
        try:
            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.RegularParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.declarationSpecifiers()
                self.state = 1683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1680
                        self.match(ParaCParser.WS) 
                    self.state = 1685
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

                self.state = 1686
                self.declarator()
                pass

            elif la_ == 2:
                localctx = ParaCParser.AbstractParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1688
                self.declarationSpecifiers()
                self.state = 1692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1689
                        self.match(ParaCParser.WS) 
                    self.state = 1694
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

                self.state = 1696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1695
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.match(ParaCParser.Identifier)
            self.state = 1704
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1701
                    self.match(ParaCParser.WS) 
                self.state = 1706
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

            self.state = 1723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1707
                self.match(ParaCParser.Comma)
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1708
                    self.match(ParaCParser.WS)
                    self.state = 1713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1714
                self.match(ParaCParser.Identifier)
                self.state = 1718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1715
                        self.match(ParaCParser.WS) 
                    self.state = 1720
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.specifierQualifierList()
            self.state = 1730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1727
                    self.match(ParaCParser.WS) 
                self.state = 1732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1733
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1736
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 1737
                    self.pointer()


                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1740
                    self.match(ParaCParser.WS)
                    self.state = 1745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1746
                self.directAbstractDeclarator(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 1750
                self.match(ParaCParser.LeftParen)
                self.state = 1754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1751
                        self.match(ParaCParser.WS) 
                    self.state = 1756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

                self.state = 1757
                self.abstractDeclarator()
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1758
                    self.match(ParaCParser.WS)
                    self.state = 1763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1764
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 2:
                self.state = 1766
                self.match(ParaCParser.LeftBracket)
                self.state = 1770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1767
                        self.match(ParaCParser.WS) 
                    self.state = 1772
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 1773
                    self.typeQualifierList()


                self.state = 1779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1776
                        self.match(ParaCParser.WS) 
                    self.state = 1781
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

                self.state = 1783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1782
                    self.assignmentExpression()


                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1785
                    self.match(ParaCParser.WS)
                    self.state = 1790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1791
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 1792
                self.match(ParaCParser.LeftBracket)
                self.state = 1796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1793
                    self.match(ParaCParser.WS)
                    self.state = 1798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1799
                self.match(ParaCParser.Static)
                self.state = 1803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1800
                        self.match(ParaCParser.WS) 
                    self.state = 1805
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 1806
                    self.typeQualifierList()


                self.state = 1812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1809
                        self.match(ParaCParser.WS) 
                    self.state = 1814
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

                self.state = 1815
                self.assignmentExpression()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1816
                    self.match(ParaCParser.WS)
                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1822
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 1824
                self.match(ParaCParser.LeftBracket)
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1825
                    self.match(ParaCParser.WS)
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1831
                self.typeQualifierList()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1832
                    self.match(ParaCParser.WS)
                    self.state = 1837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1838
                self.match(ParaCParser.Static)
                self.state = 1842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1839
                        self.match(ParaCParser.WS) 
                    self.state = 1844
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

                self.state = 1845
                self.assignmentExpression()
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1846
                    self.match(ParaCParser.WS)
                    self.state = 1851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1852
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 1854
                self.match(ParaCParser.LeftBracket)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1855
                    self.match(ParaCParser.WS)
                    self.state = 1860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1861
                self.match(ParaCParser.Star)
                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1862
                    self.match(ParaCParser.WS)
                    self.state = 1867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1868
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 1869
                self.match(ParaCParser.LeftParen)
                self.state = 1873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1870
                        self.match(ParaCParser.WS) 
                    self.state = 1875
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 1876
                    self.parameterTypeList()


                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 1879
                    self.match(ParaCParser.WS)
                    self.state = 1884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1885
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2043
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1888
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1889
                            self.match(ParaCParser.WS)
                            self.state = 1894
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1895
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1899
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1896
                                self.match(ParaCParser.WS) 
                            self.state = 1901
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

                        self.state = 1903
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1902
                            self.typeQualifierList()


                        self.state = 1908
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1905
                                self.match(ParaCParser.WS) 
                            self.state = 1910
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

                        self.state = 1912
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                        if la_ == 1:
                            self.state = 1911
                            self.assignmentExpression()


                        self.state = 1917
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1914
                            self.match(ParaCParser.WS)
                            self.state = 1919
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1920
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1921
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1925
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1922
                            self.match(ParaCParser.WS)
                            self.state = 1927
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1928
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1932
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1929
                            self.match(ParaCParser.WS)
                            self.state = 1934
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1935
                        self.match(ParaCParser.Static)
                        self.state = 1939
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1936
                                self.match(ParaCParser.WS) 
                            self.state = 1941
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

                        self.state = 1943
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 1942
                            self.typeQualifierList()


                        self.state = 1948
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1945
                                self.match(ParaCParser.WS) 
                            self.state = 1950
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

                        self.state = 1951
                        self.assignmentExpression()
                        self.state = 1955
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1952
                            self.match(ParaCParser.WS)
                            self.state = 1957
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1958
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1960
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1961
                            self.match(ParaCParser.WS)
                            self.state = 1966
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1967
                        self.match(ParaCParser.LeftBracket)
                        self.state = 1971
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1968
                            self.match(ParaCParser.WS)
                            self.state = 1973
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1974
                        self.typeQualifierList()
                        self.state = 1978
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1975
                            self.match(ParaCParser.WS)
                            self.state = 1980
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1981
                        self.match(ParaCParser.Static)
                        self.state = 1985
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1982
                                self.match(ParaCParser.WS) 
                            self.state = 1987
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

                        self.state = 1988
                        self.assignmentExpression()
                        self.state = 1992
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1989
                            self.match(ParaCParser.WS)
                            self.state = 1994
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1995
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1997
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 1998
                            self.match(ParaCParser.WS)
                            self.state = 2003
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2004
                        self.match(ParaCParser.LeftBracket)
                        self.state = 2008
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2005
                            self.match(ParaCParser.WS)
                            self.state = 2010
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2011
                        self.match(ParaCParser.Star)
                        self.state = 2015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2012
                            self.match(ParaCParser.WS)
                            self.state = 2017
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2018
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 2019
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2020
                            self.match(ParaCParser.WS)
                            self.state = 2025
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2026
                        self.match(ParaCParser.LeftParen)
                        self.state = 2030
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2027
                                self.match(ParaCParser.WS) 
                            self.state = 2032
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

                        self.state = 2034
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                            self.state = 2033
                            self.parameterTypeList()


                        self.state = 2039
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.WS:
                            self.state = 2036
                            self.match(ParaCParser.WS)
                            self.state = 2041
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2042
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 2047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Alignof, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.WS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2050
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self.match(ParaCParser.LeftBrace)
                self.state = 2055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2052
                        self.match(ParaCParser.WS) 
                    self.state = 2057
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

                self.state = 2059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2058
                    self.initializerList()


                self.state = 2064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2061
                        self.match(ParaCParser.WS) 
                    self.state = 2066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 2067
                    self.match(ParaCParser.Comma)


                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2070
                    self.match(ParaCParser.WS)
                    self.state = 2075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2076
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 2079
                self.designation()


            self.state = 2085
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2082
                    self.match(ParaCParser.WS) 
                self.state = 2087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

            self.state = 2088
            self.initializer()
            self.state = 2092
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2089
                    self.match(ParaCParser.WS) 
                self.state = 2094
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

            self.state = 2120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2095
                    self.match(ParaCParser.Comma)
                    self.state = 2099
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2096
                            self.match(ParaCParser.WS) 
                        self.state = 2101
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

                    self.state = 2103
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 2102
                        self.designation()


                    self.state = 2108
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2105
                            self.match(ParaCParser.WS) 
                        self.state = 2110
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                    self.state = 2111
                    self.initializer()
                    self.state = 2115
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2112
                            self.match(ParaCParser.WS) 
                        self.state = 2117
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
             
                self.state = 2122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_designation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.designatorList()
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2124
                self.match(ParaCParser.WS)
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2130
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2132
                self.designator()
                self.state = 2135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_designator)
        self._la = 0 # Token type
        try:
            self.state = 2161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(ParaCParser.LeftBracket)
                self.state = 2141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2138
                        self.match(ParaCParser.WS) 
                    self.state = 2143
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

                self.state = 2144
                self.constantExpression()
                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2145
                    self.match(ParaCParser.WS)
                    self.state = 2150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2151
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2153
                self.match(ParaCParser.Dot)
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2154
                    self.match(ParaCParser.WS)
                    self.state = 2159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2160
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.match(ParaCParser.StaticAssert)
            self.state = 2167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2164
                self.match(ParaCParser.WS)
                self.state = 2169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2170
            self.match(ParaCParser.LeftParen)
            self.state = 2174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2171
                    self.match(ParaCParser.WS) 
                self.state = 2176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

            self.state = 2177
            self.constantExpression()
            self.state = 2181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2178
                self.match(ParaCParser.WS)
                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2184
            self.match(ParaCParser.Comma)
            self.state = 2188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2185
                self.match(ParaCParser.WS)
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2192 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2191
                self.match(ParaCParser.StringLiteral)
                self.state = 2194 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 2199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2196
                self.match(ParaCParser.WS)
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2202
            self.match(ParaCParser.RightParen)
            self.state = 2203
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def tryExceptStatement(self):
            return self.getTypedRuleContext(ParaCParser.TryExceptStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 2309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2205
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2206
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2207
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2208
                self.tryExceptStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2209
                self.selectionStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2210
                self.iterationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2211
                self.jumpStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2212
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__5 or _la==ParaCParser.T__6):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2213
                    self.match(ParaCParser.WS)
                    self.state = 2218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2219
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__7 or _la==ParaCParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2220
                    self.match(ParaCParser.WS)
                    self.state = 2225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2226
                self.match(ParaCParser.LeftParen)
                self.state = 2230
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2227
                        self.match(ParaCParser.WS) 
                    self.state = 2232
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

                self.state = 2259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2233
                    self.logicalOrExpression()
                    self.state = 2237
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2234
                            self.match(ParaCParser.WS) 
                        self.state = 2239
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

                    self.state = 2256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 2240
                        self.match(ParaCParser.Comma)
                        self.state = 2244
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2241
                                self.match(ParaCParser.WS) 
                            self.state = 2246
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

                        self.state = 2247
                        self.logicalOrExpression()
                        self.state = 2251
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2248
                                self.match(ParaCParser.WS) 
                            self.state = 2253
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

                        self.state = 2258
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2261
                        self.match(ParaCParser.WS) 
                    self.state = 2266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 2267
                    self.match(ParaCParser.Colon)
                    self.state = 2271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2268
                            self.match(ParaCParser.WS) 
                        self.state = 2273
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

                    self.state = 2294
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                    if la_ == 1:
                        self.state = 2274
                        self.logicalOrExpression()
                        self.state = 2278
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2275
                                self.match(ParaCParser.WS) 
                            self.state = 2280
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

                        self.state = 2291
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 2281
                            self.match(ParaCParser.Comma)
                            self.state = 2285
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt==1:
                                    self.state = 2282
                                    self.match(ParaCParser.WS) 
                                self.state = 2287
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

                            self.state = 2288
                            self.logicalOrExpression()
                            self.state = 2293
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2301
                    self.match(ParaCParser.WS)
                    self.state = 2306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2307
                self.match(ParaCParser.RightParen)
                self.state = 2308
                self.endOfItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.state = 2364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2311
                self.match(ParaCParser.Identifier)
                self.state = 2315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2312
                    self.match(ParaCParser.WS)
                    self.state = 2317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2318
                self.match(ParaCParser.Colon)
                self.state = 2322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2319
                        self.match(ParaCParser.WS) 
                    self.state = 2324
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

                self.state = 2325
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2326
                self.match(ParaCParser.Case)
                self.state = 2330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2327
                        self.match(ParaCParser.WS) 
                    self.state = 2332
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

                self.state = 2333
                self.constantExpression()
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2334
                    self.match(ParaCParser.WS)
                    self.state = 2339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2340
                self.match(ParaCParser.Colon)
                self.state = 2344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2341
                        self.match(ParaCParser.WS) 
                    self.state = 2346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

                self.state = 2347
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2349
                self.match(ParaCParser.Default)
                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2350
                    self.match(ParaCParser.WS)
                    self.state = 2355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2356
                self.match(ParaCParser.Colon)
                self.state = 2360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2357
                        self.match(ParaCParser.WS) 
                    self.state = 2362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

                self.state = 2363
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.match(ParaCParser.LeftBrace)
            self.state = 2370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2367
                    self.match(ParaCParser.WS) 
                self.state = 2372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)

            self.state = 2374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2373
                self.blockItemList()


            self.state = 2379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2376
                self.match(ParaCParser.WS)
                self.state = 2381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2382
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_blockItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2384
                    self.blockItem()

                else:
                    raise NoViableAltException(self)
                self.state = 2387 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_blockItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2389
                    self.match(ParaCParser.WS) 
                self.state = 2394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 2395
                self.statement()
                pass

            elif la_ == 2:
                self.state = 2396
                self.declaration()
                pass


            self.state = 2402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,352,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2399
                    self.match(ParaCParser.WS) 
                self.state = 2404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,352,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (ParaCParser.Plus - 74)) | (1 << (ParaCParser.PlusPlus - 74)) | (1 << (ParaCParser.Minus - 74)) | (1 << (ParaCParser.MinusMinus - 74)) | (1 << (ParaCParser.Star - 74)) | (1 << (ParaCParser.And - 74)) | (1 << (ParaCParser.AndAnd - 74)) | (1 << (ParaCParser.Not - 74)) | (1 << (ParaCParser.Tilde - 74)) | (1 << (ParaCParser.Identifier - 74)) | (1 << (ParaCParser.Constant - 74)) | (1 << (ParaCParser.DigitSequence - 74)) | (1 << (ParaCParser.StringLiteral - 74)) | (1 << (ParaCParser.WS - 74)))) != 0):
                self.state = 2405
                self.expression()


            self.state = 2408
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def exceptBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExceptBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExceptBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(ParaCParser.FinallyBlockContext,0)


        def elseBlock(self):
            return self.getTypedRuleContext(ParaCParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_tryExceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExceptStatement" ):
                listener.enterTryExceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExceptStatement" ):
                listener.exitTryExceptStatement(self)




    def tryExceptStatement(self):

        localctx = ParaCParser.TryExceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tryExceptStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self.match(ParaCParser.T__8)
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2411
                self.match(ParaCParser.WS)
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2417
            self.compoundStatement()
            self.state = 2421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2418
                self.match(ParaCParser.WS)
                self.state = 2423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2425 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2424
                self.exceptBlock()
                self.state = 2427 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.T__9):
                    break

            self.state = 2432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2429
                    self.match(ParaCParser.WS) 
                self.state = 2434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

            self.state = 2467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 2435
                self.finallyBlock()
                self.state = 2439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2436
                        self.match(ParaCParser.WS) 
                    self.state = 2441
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

                self.state = 2443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 2442
                    self.elseBlock()


                self.state = 2448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,360,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2445
                        self.match(ParaCParser.WS) 
                    self.state = 2450
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,360,self._ctx)


            elif la_ == 2:
                self.state = 2451
                self.elseBlock()
                self.state = 2455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2452
                        self.match(ParaCParser.WS) 
                    self.state = 2457
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

                self.state = 2459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__10:
                    self.state = 2458
                    self.finallyBlock()


                self.state = 2464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,363,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2461
                        self.match(ParaCParser.WS) 
                    self.state = 2466
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,363,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = ParaCParser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_exceptBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2469
            self.match(ParaCParser.T__9)
            self.state = 2473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2470
                self.match(ParaCParser.WS)
                self.state = 2475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2476
            self.match(ParaCParser.LeftParen)
            self.state = 2480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2477
                self.match(ParaCParser.WS)
                self.state = 2482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 2483
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 2484
                self.identifierList()
                pass


            self.state = 2490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2487
                self.match(ParaCParser.WS)
                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2493
            self.match(ParaCParser.RightParen)
            self.state = 2497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2494
                    self.match(ParaCParser.WS) 
                self.state = 2499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

            self.state = 2508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.As:
                self.state = 2500
                self.match(ParaCParser.As)
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2501
                    self.match(ParaCParser.WS)
                    self.state = 2506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2507
                self.match(ParaCParser.Identifier)


            self.state = 2513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2510
                self.match(ParaCParser.WS)
                self.state = 2515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2516
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = ParaCParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(ParaCParser.T__10)
            self.state = 2522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2519
                self.match(ParaCParser.WS)
                self.state = 2524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2525
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)




    def elseBlock(self):

        localctx = ParaCParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_elseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.match(ParaCParser.Else)
            self.state = 2531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2528
                self.match(ParaCParser.WS)
                self.state = 2533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2534
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_selectionStatement)
        self._la = 0 # Token type
        try:
            self.state = 2611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2536
                self.match(ParaCParser.If)
                self.state = 2540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2537
                    self.match(ParaCParser.WS)
                    self.state = 2542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2543
                self.match(ParaCParser.LeftParen)
                self.state = 2547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2544
                        self.match(ParaCParser.WS) 
                    self.state = 2549
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

                self.state = 2550
                self.expression()
                self.state = 2554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2551
                    self.match(ParaCParser.WS)
                    self.state = 2556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2557
                self.match(ParaCParser.RightParen)
                self.state = 2561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2558
                        self.match(ParaCParser.WS) 
                    self.state = 2563
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

                self.state = 2564
                self.statement()
                self.state = 2568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,379,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2565
                        self.match(ParaCParser.WS) 
                    self.state = 2570
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,379,self._ctx)

                self.state = 2579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
                if la_ == 1:
                    self.state = 2571
                    self.match(ParaCParser.Else)
                    self.state = 2575
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,380,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2572
                            self.match(ParaCParser.WS) 
                        self.state = 2577
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,380,self._ctx)

                    self.state = 2578
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2581
                self.match(ParaCParser.Switch)
                self.state = 2585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2582
                    self.match(ParaCParser.WS)
                    self.state = 2587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2588
                self.match(ParaCParser.LeftParen)
                self.state = 2592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2589
                        self.match(ParaCParser.WS) 
                    self.state = 2594
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

                self.state = 2595
                self.expression()
                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2596
                    self.match(ParaCParser.WS)
                    self.state = 2601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2602
                self.match(ParaCParser.RightParen)
                self.state = 2606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,385,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2603
                        self.match(ParaCParser.WS) 
                    self.state = 2608
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,385,self._ctx)

                self.state = 2609
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 2711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2613
                self.match(ParaCParser.While)
                self.state = 2617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2614
                    self.match(ParaCParser.WS)
                    self.state = 2619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2620
                self.match(ParaCParser.LeftParen)
                self.state = 2624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2621
                        self.match(ParaCParser.WS) 
                    self.state = 2626
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

                self.state = 2627
                self.expression()
                self.state = 2631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2628
                    self.match(ParaCParser.WS)
                    self.state = 2633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2634
                self.match(ParaCParser.RightParen)
                self.state = 2638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2635
                        self.match(ParaCParser.WS) 
                    self.state = 2640
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                self.state = 2641
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2643
                self.match(ParaCParser.Do)
                self.state = 2647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2644
                        self.match(ParaCParser.WS) 
                    self.state = 2649
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

                self.state = 2650
                self.statement()
                self.state = 2654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2651
                    self.match(ParaCParser.WS)
                    self.state = 2656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2657
                self.match(ParaCParser.While)
                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2658
                    self.match(ParaCParser.WS)
                    self.state = 2663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2664
                self.match(ParaCParser.LeftParen)
                self.state = 2668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2665
                        self.match(ParaCParser.WS) 
                    self.state = 2670
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

                self.state = 2671
                self.expression()
                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2672
                    self.match(ParaCParser.WS)
                    self.state = 2677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2678
                self.match(ParaCParser.RightParen)
                self.state = 2679
                self.endOfItem()
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2681
                self.match(ParaCParser.For)
                self.state = 2685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2682
                    self.match(ParaCParser.WS)
                    self.state = 2687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2688
                self.match(ParaCParser.LeftParen)
                self.state = 2692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,397,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2689
                        self.match(ParaCParser.WS) 
                    self.state = 2694
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,397,self._ctx)

                self.state = 2695
                self.forCondition()
                self.state = 2699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2696
                    self.match(ParaCParser.WS)
                    self.state = 2701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2702
                self.match(ParaCParser.RightParen)
                self.state = 2706
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2703
                        self.match(ParaCParser.WS) 
                    self.state = 2708
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

                self.state = 2709
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EndOfItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EndOfItemContext,i)


        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 2713
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (ParaCParser.Plus - 74)) | (1 << (ParaCParser.PlusPlus - 74)) | (1 << (ParaCParser.Minus - 74)) | (1 << (ParaCParser.MinusMinus - 74)) | (1 << (ParaCParser.Star - 74)) | (1 << (ParaCParser.And - 74)) | (1 << (ParaCParser.AndAnd - 74)) | (1 << (ParaCParser.Not - 74)) | (1 << (ParaCParser.Tilde - 74)) | (1 << (ParaCParser.Identifier - 74)) | (1 << (ParaCParser.Constant - 74)) | (1 << (ParaCParser.DigitSequence - 74)) | (1 << (ParaCParser.StringLiteral - 74)) | (1 << (ParaCParser.WS - 74)))) != 0):
                    self.state = 2714
                    self.expression()


                pass


            self.state = 2719
            self.endOfItem()
            self.state = 2721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (ParaCParser.Plus - 74)) | (1 << (ParaCParser.PlusPlus - 74)) | (1 << (ParaCParser.Minus - 74)) | (1 << (ParaCParser.MinusMinus - 74)) | (1 << (ParaCParser.Star - 74)) | (1 << (ParaCParser.And - 74)) | (1 << (ParaCParser.AndAnd - 74)) | (1 << (ParaCParser.Not - 74)) | (1 << (ParaCParser.Tilde - 74)) | (1 << (ParaCParser.Identifier - 74)) | (1 << (ParaCParser.Constant - 74)) | (1 << (ParaCParser.DigitSequence - 74)) | (1 << (ParaCParser.StringLiteral - 74)) | (1 << (ParaCParser.WS - 74)))) != 0):
                self.state = 2720
                self.forExpression()


            self.state = 2723
            self.endOfItem()
            self.state = 2725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.state = 2724
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2727
            self.declarationSpecifiers()
            self.state = 2731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,405,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2728
                    self.match(ParaCParser.WS) 
                self.state = 2733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,405,self._ctx)

            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (ParaCParser.LeftParen - 62)) | (1 << (ParaCParser.Star - 62)) | (1 << (ParaCParser.Caret - 62)) | (1 << (ParaCParser.Identifier - 62)) | (1 << (ParaCParser.WS - 62)))) != 0):
                self.state = 2734
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2737
            self.assignmentExpression()
            self.state = 2741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2738
                    self.match(ParaCParser.WS) 
                self.state = 2743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

            self.state = 2760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 2744
                self.match(ParaCParser.Comma)
                self.state = 2748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,408,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2745
                        self.match(ParaCParser.WS) 
                    self.state = 2750
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,408,self._ctx)

                self.state = 2751
                self.assignmentExpression()
                self.state = 2755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2752
                        self.match(ParaCParser.WS) 
                    self.state = 2757
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

                self.state = 2762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)


        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 2763
                self.match(ParaCParser.Goto)
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2764
                    self.match(ParaCParser.WS)
                    self.state = 2769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2770
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 2771
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 2772
                self.match(ParaCParser.Return)
                self.state = 2776
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,412,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2773
                        self.match(ParaCParser.WS) 
                    self.state = 2778
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,412,self._ctx)

                self.state = 2780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (ParaCParser.Plus - 74)) | (1 << (ParaCParser.PlusPlus - 74)) | (1 << (ParaCParser.Minus - 74)) | (1 << (ParaCParser.MinusMinus - 74)) | (1 << (ParaCParser.Star - 74)) | (1 << (ParaCParser.And - 74)) | (1 << (ParaCParser.AndAnd - 74)) | (1 << (ParaCParser.Not - 74)) | (1 << (ParaCParser.Tilde - 74)) | (1 << (ParaCParser.Identifier - 74)) | (1 << (ParaCParser.Constant - 74)) | (1 << (ParaCParser.DigitSequence - 74)) | (1 << (ParaCParser.StringLiteral - 74)) | (1 << (ParaCParser.WS - 74)))) != 0):
                    self.state = 2779
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 2782
                self.match(ParaCParser.Goto)
                self.state = 2786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2783
                        self.match(ParaCParser.WS) 
                    self.state = 2788
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,414,self._ctx)

                self.state = 2789
                self.unaryExpression()
                pass


            self.state = 2792
            self.endOfItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (ParaCParser.Star - 78)) | (1 << (ParaCParser.Caret - 78)) | (1 << (ParaCParser.DecoratorSign - 78)) | (1 << (ParaCParser.Semi - 78)) | (1 << (ParaCParser.Identifier - 78)) | (1 << (ParaCParser.WS - 78)) | (1 << (ParaCParser.Whitespace - 78)))) != 0):
                self.state = 2794
                self.translationUnit()


            self.state = 2797
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalItemContext,i)


        def endOfItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EndOfItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EndOfItemContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 2799
                    self.externalItem()
                    pass

                elif la_ == 2:
                    self.state = 2800
                    self.endOfItem()
                    pass

                elif la_ == 3:
                    self.state = 2802 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2801
                            self.match(ParaCParser.WS)

                        else:
                            raise NoViableAltException(self)
                        self.state = 2804 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

                    pass


                self.state = 2808 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (ParaCParser.Star - 78)) | (1 << (ParaCParser.Caret - 78)) | (1 << (ParaCParser.DecoratorSign - 78)) | (1 << (ParaCParser.Semi - 78)) | (1 << (ParaCParser.Identifier - 78)) | (1 << (ParaCParser.WS - 78)) | (1 << (ParaCParser.Whitespace - 78)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_externalItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalFunctionDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunctionDefinition" ):
                listener.enterExternalFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunctionDefinition" ):
                listener.exitExternalFunctionDefinition(self)


    class ExternalDeclarationContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)


    class ExternalExtTaskDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionTaskDefinition(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalExtTaskDefinition" ):
                listener.enterExternalExtTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalExtTaskDefinition" ):
                listener.exitExternalExtTaskDefinition(self)



    def externalItem(self):

        localctx = ParaCParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_externalItem)
        try:
            self.state = 2813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.ExternalFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2810
                self.functionDefinition()
                pass

            elif la_ == 2:
                localctx = ParaCParser.ExternalDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2811
                self.declaration()
                pass

            elif la_ == 3:
                localctx = ParaCParser.ExternalExtTaskDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2812
                self.extensionTaskDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StandardFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFunctionDefinition" ):
                listener.enterStandardFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFunctionDefinition" ):
                listener.exitStandardFunctionDefinition(self)


    class SimpleFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)

        def endOfItem(self):
            return self.getTypedRuleContext(ParaCParser.EndOfItemContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionDefinition" ):
                listener.enterSimpleFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionDefinition" ):
                listener.exitSimpleFunctionDefinition(self)



    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.StandardFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2815
                self.functionDeclarationSpecifiers()
                self.state = 2819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2816
                        self.match(ParaCParser.WS) 
                    self.state = 2821
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

                self.state = 2822
                self.declarator()
                self.state = 2826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2823
                        self.match(ParaCParser.WS) 
                    self.state = 2828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

                self.state = 2830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 2829
                    self.declarationList()


                self.state = 2835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2832
                    self.match(ParaCParser.WS)
                    self.state = 2837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2838
                self.compoundStatement()
                pass

            elif la_ == 2:
                localctx = ParaCParser.SimpleFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2840
                self.functionDeclarationSpecifiers()
                self.state = 2844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,425,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2841
                        self.match(ParaCParser.WS) 
                    self.state = 2846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,425,self._ctx)

                self.state = 2847
                self.declarator()
                self.state = 2851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,426,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2848
                        self.match(ParaCParser.WS) 
                    self.state = 2853
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,426,self._ctx)

                self.state = 2855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 2854
                    self.declarationList()


                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2857
                    self.match(ParaCParser.WS)
                    self.state = 2862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2863
                self.expressionLambda()
                self.state = 2864
                self.endOfItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decoratorSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DecoratorSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DecoratorSpecifierContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationSpecifiers" ):
                listener.enterFunctionDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationSpecifiers" ):
                listener.exitFunctionDeclarationSpecifiers(self)




    def functionDeclarationSpecifiers(self):

        localctx = ParaCParser.FunctionDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_functionDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.DecoratorSign:
                self.state = 2868
                self.decoratorSpecifier()
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2877
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,431,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2874
                    self.match(ParaCParser.WS) 
                self.state = 2879
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,431,self._ctx)

            self.state = 2881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 2880
                self.declarationSpecifiers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecoratorSign(self):
            return self.getToken(ParaCParser.DecoratorSign, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_decoratorSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorSpecifier" ):
                listener.enterDecoratorSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorSpecifier" ):
                listener.exitDecoratorSpecifier(self)




    def decoratorSpecifier(self):

        localctx = ParaCParser.DecoratorSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_decoratorSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            self.match(ParaCParser.DecoratorSign)
            self.state = 2884
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExtensionTask(self):
            return self.getToken(ParaCParser.ExtensionTask, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def extensionTaskParameterList(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterListContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskDefinition" ):
                listener.enterExtensionTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskDefinition" ):
                listener.exitExtensionTaskDefinition(self)




    def extensionTaskDefinition(self):

        localctx = ParaCParser.ExtensionTaskDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_extensionTaskDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2886
            self.match(ParaCParser.ExtensionTask)
            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2887
                self.match(ParaCParser.WS)
                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2893
            self.match(ParaCParser.Identifier)
            self.state = 2897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2894
                self.match(ParaCParser.WS)
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2900
            self.directDeclarator(0)
            self.state = 2904
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,435,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2901
                    self.match(ParaCParser.WS) 
                self.state = 2906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,435,self._ctx)

            self.state = 2908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                self.state = 2907
                self.declarationList()


            self.state = 2913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2910
                self.match(ParaCParser.WS)
                self.state = 2915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2916
            self.extensionTaskParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def extensionTaskParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExtensionTaskParameterContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameterList" ):
                listener.enterExtensionTaskParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameterList" ):
                listener.exitExtensionTaskParameterList(self)




    def extensionTaskParameterList(self):

        localctx = ParaCParser.ExtensionTaskParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_extensionTaskParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2918
            self.match(ParaCParser.LeftBrace)
            self.state = 2922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2919
                self.match(ParaCParser.WS)
                self.state = 2924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Identifier:
                self.state = 2925
                self.extensionTaskParameter()
                self.state = 2929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.WS:
                    self.state = 2926
                    self.match(ParaCParser.WS)
                    self.state = 2931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Comma:
                    self.state = 2932
                    self.match(ParaCParser.Comma)
                    self.state = 2936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 2933
                        self.match(ParaCParser.WS)
                        self.state = 2938
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2939
                    self.extensionTaskParameter()
                    self.state = 2943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.WS:
                        self.state = 2940
                        self.match(ParaCParser.WS)
                        self.state = 2945
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2953
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameter" ):
                listener.enterExtensionTaskParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameter" ):
                listener.exitExtensionTaskParameter(self)




    def extensionTaskParameter(self):

        localctx = ParaCParser.ExtensionTaskParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_extensionTaskParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2955
            self.match(ParaCParser.Identifier)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2956
                self.match(ParaCParser.WS)
                self.state = 2961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2962
            self.match(ParaCParser.Colon)
            self.state = 2966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.WS:
                self.state = 2963
                self.match(ParaCParser.WS)
                self.state = 2968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2969
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.WS)
            else:
                return self.getToken(ParaCParser.WS, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2978 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2971
                self.declaration()
                self.state = 2975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,446,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2972
                        self.match(ParaCParser.WS) 
                    self.state = 2977
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,446,self._ctx)

                self.state = 2980 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Whitespace(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Whitespace)
            else:
                return self.getToken(ParaCParser.Whitespace, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_endOfItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfItem" ):
                listener.enterEndOfItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfItem" ):
                listener.exitEndOfItem(self)




    def endOfItem(self):

        localctx = ParaCParser.EndOfItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_endOfItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Whitespace:
                self.state = 2982
                self.match(ParaCParser.Whitespace)
                self.state = 2987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2988
            self.match(ParaCParser.Semi)
            self.state = 2992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,449,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2989
                    self.match(ParaCParser.Whitespace) 
                self.state = 2994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,449,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.castOrConvertExpression_sempred
        self._predicates[31] = self.typeSpecifier_sempred
        self._predicates[48] = self.directDeclarator_sempred
        self._predicates[58] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def castOrConvertExpression_sempred(self, localctx:CastOrConvertExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




