# Generated from ./paraccompiler/core/antlr4/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0082")
        buf.write("\u04ae\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\3\2\3\2\3\2\6\2\u00cc")
        buf.write("\n\2\r\2\16\2\u00cd\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00d6")
        buf.write("\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\5\2\u00ea\n\2\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\7\4\u00f6\n\4\f\4\16\4\u00f9\13")
        buf.write("\4\3\5\3\5\5\5\u00fd\n\5\3\5\3\5\3\5\3\6\3\6\5\6\u0104")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u010c\n\6\3\6\3\6\5\6")
        buf.write("\u0110\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0118\n\6\3\6\3")
        buf.write("\6\3\6\3\6\7\6\u011e\n\6\f\6\16\6\u0121\13\6\3\7\3\7\3")
        buf.write("\7\7\7\u0126\n\7\f\7\16\7\u0129\13\7\3\b\7\b\u012c\n\b")
        buf.write("\f\b\16\b\u012f\13\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\5\b\u013c\n\b\3\t\3\t\3\n\5\n\u0141\n\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u014a\n\n\3\13\3\13\3\13")
        buf.write("\7\13\u014f\n\13\f\13\16\13\u0152\13\13\3\f\3\f\3\f\7")
        buf.write("\f\u0157\n\f\f\f\16\f\u015a\13\f\3\r\3\r\3\r\7\r\u015f")
        buf.write("\n\r\f\r\16\r\u0162\13\r\3\16\3\16\3\16\7\16\u0167\n\16")
        buf.write("\f\16\16\16\u016a\13\16\3\17\3\17\3\17\7\17\u016f\n\17")
        buf.write("\f\17\16\17\u0172\13\17\3\20\3\20\3\20\7\20\u0177\n\20")
        buf.write("\f\20\16\20\u017a\13\20\3\21\3\21\3\21\7\21\u017f\n\21")
        buf.write("\f\21\16\21\u0182\13\21\3\22\3\22\3\22\7\22\u0187\n\22")
        buf.write("\f\22\16\22\u018a\13\22\3\23\3\23\3\23\7\23\u018f\n\23")
        buf.write("\f\23\16\23\u0192\13\23\3\24\3\24\3\24\7\24\u0197\n\24")
        buf.write("\f\24\16\24\u019a\13\24\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u01a2\n\25\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01aa")
        buf.write("\n\26\3\27\3\27\3\30\3\30\3\30\7\30\u01b1\n\30\f\30\16")
        buf.write("\30\u01b4\13\30\3\31\3\31\3\32\3\32\5\32\u01ba\n\32\3")
        buf.write("\32\3\32\3\32\5\32\u01bf\n\32\3\33\6\33\u01c2\n\33\r\33")
        buf.write("\16\33\u01c3\3\34\6\34\u01c7\n\34\r\34\16\34\u01c8\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\5\35\u01d1\n\35\3\36\3\36\3")
        buf.write("\36\7\36\u01d6\n\36\f\36\16\36\u01d9\13\36\3\37\3\37\3")
        buf.write("\37\5\37\u01de\n\37\3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u01f3\n\"\3")
        buf.write("\"\3\"\7\"\u01f7\n\"\f\"\16\"\u01fa\13\"\3#\3#\5#\u01fe")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0207\n#\3$\3$\3%\6%\u020c")
        buf.write("\n%\r%\16%\u020d\3&\3&\5&\u0212\n&\3&\3&\3&\5&\u0217\n")
        buf.write("&\3\'\3\'\5\'\u021b\n\'\3\'\5\'\u021e\n\'\3(\3(\3(\7(")
        buf.write("\u0223\n(\f(\16(\u0226\13(\3)\3)\5)\u022a\n)\3)\3)\5)")
        buf.write("\u022e\n)\3*\3*\5*\u0232\n*\3*\3*\3*\5*\u0237\n*\3*\3")
        buf.write("*\3*\3*\5*\u023d\n*\3+\3+\3+\7+\u0242\n+\f+\16+\u0245")
        buf.write("\13+\3,\3,\3,\5,\u024a\n,\3-\3-\3.\3.\3.\3.\3.\3/\3/\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u025c\n\60\3\61")
        buf.write("\3\61\3\61\3\61\5\61\u0262\n\61\3\61\3\61\3\62\5\62\u0267")
        buf.write("\n\62\3\62\3\62\7\62\u026b\n\62\f\62\16\62\u026e\13\62")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u027b\n\63\3\63\3\63\3\63\3\63\5\63\u0281\n\63\3")
        buf.write("\63\3\63\3\63\5\63\u0286\n\63\3\63\5\63\u0289\n\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u0290\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u029f\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u02ab\n\63\3\63\7\63\u02ae\n\63\f\63\16")
        buf.write("\63\u02b1\13\63\3\64\3\64\3\64\6\64\u02b6\n\64\r\64\16")
        buf.write("\64\u02b7\3\64\3\64\5\64\u02bc\n\64\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\66\5\66\u02c6\n\66\3\66\3\66\5\66\u02ca")
        buf.write("\n\66\7\66\u02cc\n\66\f\66\16\66\u02cf\13\66\3\67\3\67")
        buf.write("\3\67\5\67\u02d4\n\67\3\67\5\67\u02d7\n\67\38\38\38\3")
        buf.write("8\38\78\u02de\n8\f8\168\u02e1\138\39\39\59\u02e5\n9\6")
        buf.write("9\u02e7\n9\r9\169\u02e8\3:\6:\u02ec\n:\r:\16:\u02ed\3")
        buf.write(";\3;\3;\5;\u02f3\n;\3<\3<\3<\7<\u02f8\n<\f<\16<\u02fb")
        buf.write("\13<\3=\3=\3=\3=\3=\5=\u0302\n=\5=\u0304\n=\3>\3>\3>\7")
        buf.write(">\u0309\n>\f>\16>\u030c\13>\3?\3?\5?\u0310\n?\3@\3@\5")
        buf.write("@\u0314\n@\3@\3@\7@\u0318\n@\f@\16@\u031b\13@\5@\u031d")
        buf.write("\n@\3A\3A\3A\3A\3A\7A\u0324\nA\fA\16A\u0327\13A\3A\3A")
        buf.write("\5A\u032b\nA\3A\5A\u032e\nA\3A\3A\3A\3A\5A\u0334\nA\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0344\nA\3")
        buf.write("A\3A\7A\u0348\nA\fA\16A\u034b\13A\5A\u034d\nA\3A\3A\3")
        buf.write("A\5A\u0352\nA\3A\5A\u0355\nA\3A\3A\3A\3A\3A\5A\u035c\n")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u036f\nA\3A\3A\7A\u0373\nA\fA\16A\u0376\13A\7A\u0378")
        buf.write("\nA\fA\16A\u037b\13A\3B\3B\3C\3C\3C\3C\5C\u0383\nC\3C")
        buf.write("\3C\5C\u0387\nC\3D\5D\u038a\nD\3D\3D\3D\5D\u038f\nD\3")
        buf.write("D\7D\u0392\nD\fD\16D\u0395\13D\3E\3E\3E\3F\6F\u039b\n")
        buf.write("F\rF\16F\u039c\3G\3G\3G\3G\3G\3G\5G\u03a5\nG\3H\3H\3H")
        buf.write("\3H\3H\6H\u03ac\nH\rH\16H\u03ad\3H\3H\3H\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\7I\u03bf\nI\fI\16I\u03c2\13I\5")
        buf.write("I\u03c4\nI\3I\3I\3I\3I\7I\u03ca\nI\fI\16I\u03cd\13I\5")
        buf.write("I\u03cf\nI\7I\u03d1\nI\fI\16I\u03d4\13I\3I\3I\5I\u03d8")
        buf.write("\nI\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u03e5\nJ\3K\3")
        buf.write("K\5K\u03e9\nK\3K\3K\3L\6L\u03ee\nL\rL\16L\u03ef\3M\3M")
        buf.write("\3M\5M\u03f5\nM\3N\5N\u03f8\nN\3N\3N\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\5O\u0403\nO\3O\3O\3O\3O\3O\3O\5O\u040b\nO\3P\3P\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5")
        buf.write("P\u0421\nP\3Q\3Q\5Q\u0425\nQ\5Q\u0427\nQ\3Q\3Q\5Q\u042b")
        buf.write("\nQ\3Q\3Q\5Q\u042f\nQ\3R\3R\5R\u0433\nR\3S\3S\3S\7S\u0438")
        buf.write("\nS\fS\16S\u043b\13S\3T\3T\3T\3T\3T\5T\u0442\nT\3T\3T")
        buf.write("\5T\u0446\nT\3T\3T\3U\5U\u044b\nU\3U\3U\3V\6V\u0450\n")
        buf.write("V\rV\16V\u0451\3W\3W\3W\5W\u0457\nW\3X\3X\5X\u045b\nX")
        buf.write("\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0463\nY\3Z\3Z\5Z\u0467\nZ\3Z\3")
        buf.write("Z\5Z\u046b\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0475\nZ\3[\3")
        buf.write("[\3[\3[\3\\\7\\\u047c\n\\\f\\\16\\\u047f\13\\\3\\\5\\")
        buf.write("\u0482\n\\\3]\3]\5]\u0486\n]\3]\3]\5]\u048a\n]\3]\3]\3")
        buf.write("^\3^\3^\3_\3_\3_\5_\u0494\n_\5_\u0496\n_\3`\3`\5`\u049a")
        buf.write("\n`\3a\3a\3b\3b\3c\5c\u04a1\nc\3c\3c\5c\u04a5\nc\3c\3")
        buf.write("c\3d\6d\u04aa\nd\rd\16d\u04ab\3d\2\5Bd\u0080e\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\2\32\3\2jk\4\2LL")
        buf.write("NN\5\2**LLNN\4\2**\66\66\7\2KKMMOORRWX\3\2OQ\4\2KKMM\3")
        buf.write("\2IJ\3\2EH\3\2hi\3\2]g\b\2\21\21\35\35%%++//>>\13\2\6")
        buf.write("\b\24\24\31\31\36\36#$(),,\61\6289\3\2\6\b\4\2--\60\60")
        buf.write("\6\2\25\25&&\63\63\67\67\5\2\n\13\"\"<<\4\2?@\\\\\3\2")
        buf.write("?@\4\2OOVV\4\2\r\r\17\17\4\2\20\20\63\63\4\2\22\22\26")
        buf.write("\26\3\2yz\2\u0514\2\u00e9\3\2\2\2\4\u00eb\3\2\2\2\6\u00f2")
        buf.write("\3\2\2\2\b\u00fc\3\2\2\2\n\u010f\3\2\2\2\f\u0122\3\2\2")
        buf.write("\2\16\u012d\3\2\2\2\20\u013d\3\2\2\2\22\u0149\3\2\2\2")
        buf.write("\24\u014b\3\2\2\2\26\u0153\3\2\2\2\30\u015b\3\2\2\2\32")
        buf.write("\u0163\3\2\2\2\34\u016b\3\2\2\2\36\u0173\3\2\2\2 \u017b")
        buf.write("\3\2\2\2\"\u0183\3\2\2\2$\u018b\3\2\2\2&\u0193\3\2\2\2")
        buf.write("(\u019b\3\2\2\2*\u01a9\3\2\2\2,\u01ab\3\2\2\2.\u01ad\3")
        buf.write("\2\2\2\60\u01b5\3\2\2\2\62\u01be\3\2\2\2\64\u01c1\3\2")
        buf.write("\2\2\66\u01c6\3\2\2\28\u01d0\3\2\2\2:\u01d2\3\2\2\2<\u01da")
        buf.write("\3\2\2\2>\u01df\3\2\2\2@\u01e1\3\2\2\2B\u01f2\3\2\2\2")
        buf.write("D\u0206\3\2\2\2F\u0208\3\2\2\2H\u020b\3\2\2\2J\u0216\3")
        buf.write("\2\2\2L\u021a\3\2\2\2N\u021f\3\2\2\2P\u022d\3\2\2\2R\u023c")
        buf.write("\3\2\2\2T\u023e\3\2\2\2V\u0246\3\2\2\2X\u024b\3\2\2\2")
        buf.write("Z\u024d\3\2\2\2\\\u0252\3\2\2\2^\u025b\3\2\2\2`\u025d")
        buf.write("\3\2\2\2b\u0266\3\2\2\2d\u0280\3\2\2\2f\u02bb\3\2\2\2")
        buf.write("h\u02bd\3\2\2\2j\u02c5\3\2\2\2l\u02d0\3\2\2\2n\u02df\3")
        buf.write("\2\2\2p\u02e6\3\2\2\2r\u02eb\3\2\2\2t\u02ef\3\2\2\2v\u02f4")
        buf.write("\3\2\2\2x\u0303\3\2\2\2z\u0305\3\2\2\2|\u030d\3\2\2\2")
        buf.write("~\u031c\3\2\2\2\u0080\u034c\3\2\2\2\u0082\u037c\3\2\2")
        buf.write("\2\u0084\u0386\3\2\2\2\u0086\u0389\3\2\2\2\u0088\u0396")
        buf.write("\3\2\2\2\u008a\u039a\3\2\2\2\u008c\u03a4\3\2\2\2\u008e")
        buf.write("\u03a6\3\2\2\2\u0090\u03d7\3\2\2\2\u0092\u03e4\3\2\2\2")
        buf.write("\u0094\u03e6\3\2\2\2\u0096\u03ed\3\2\2\2\u0098\u03f4\3")
        buf.write("\2\2\2\u009a\u03f7\3\2\2\2\u009c\u040a\3\2\2\2\u009e\u0420")
        buf.write("\3\2\2\2\u00a0\u0426\3\2\2\2\u00a2\u0430\3\2\2\2\u00a4")
        buf.write("\u0434\3\2\2\2\u00a6\u0445\3\2\2\2\u00a8\u044a\3\2\2\2")
        buf.write("\u00aa\u044f\3\2\2\2\u00ac\u0456\3\2\2\2\u00ae\u045a\3")
        buf.write("\2\2\2\u00b0\u0462\3\2\2\2\u00b2\u0474\3\2\2\2\u00b4\u0476")
        buf.write("\3\2\2\2\u00b6\u047d\3\2\2\2\u00b8\u0483\3\2\2\2\u00ba")
        buf.write("\u048d\3\2\2\2\u00bc\u0495\3\2\2\2\u00be\u0499\3\2\2\2")
        buf.write("\u00c0\u049b\3\2\2\2\u00c2\u049d\3\2\2\2\u00c4\u04a0\3")
        buf.write("\2\2\2\u00c6\u04a9\3\2\2\2\u00c8\u00ea\7m\2\2\u00c9\u00ea")
        buf.write("\7{\2\2\u00ca\u00cc\7}\2\2\u00cb\u00ca\3\2\2\2\u00cc\u00cd")
        buf.write("\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\u00ea\3\2\2\2\u00cf\u00d0\7?\2\2\u00d0\u00d1\5.\30\2")
        buf.write("\u00d1\u00d2\7@\2\2\u00d2\u00ea\3\2\2\2\u00d3\u00ea\5")
        buf.write("\4\3\2\u00d4\u00d6\7\3\2\2\u00d5\u00d4\3\2\2\2\u00d5\u00d6")
        buf.write("\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d8\7?\2\2\u00d8")
        buf.write("\u00d9\5\u0094K\2\u00d9\u00da\7@\2\2\u00da\u00ea\3\2\2")
        buf.write("\2\u00db\u00dc\7\4\2\2\u00dc\u00dd\7?\2\2\u00dd\u00de")
        buf.write("\5\16\b\2\u00de\u00df\7\\\2\2\u00df\u00e0\5|?\2\u00e0")
        buf.write("\u00e1\7@\2\2\u00e1\u00ea\3\2\2\2\u00e2\u00e3\7\5\2\2")
        buf.write("\u00e3\u00e4\7?\2\2\u00e4\u00e5\5|?\2\u00e5\u00e6\7\\")
        buf.write("\2\2\u00e6\u00e7\5\16\b\2\u00e7\u00e8\7@\2\2\u00e8\u00ea")
        buf.write("\3\2\2\2\u00e9\u00c8\3\2\2\2\u00e9\u00c9\3\2\2\2\u00e9")
        buf.write("\u00cb\3\2\2\2\u00e9\u00cf\3\2\2\2\u00e9\u00d3\3\2\2\2")
        buf.write("\u00e9\u00d5\3\2\2\2\u00e9\u00db\3\2\2\2\u00e9\u00e2\3")
        buf.write("\2\2\2\u00ea\3\3\2\2\2\u00eb\u00ec\7:\2\2\u00ec\u00ed")
        buf.write("\7?\2\2\u00ed\u00ee\5*\26\2\u00ee\u00ef\7\\\2\2\u00ef")
        buf.write("\u00f0\5\6\4\2\u00f0\u00f1\7@\2\2\u00f1\5\3\2\2\2\u00f2")
        buf.write("\u00f7\5\b\5\2\u00f3\u00f4\7\\\2\2\u00f4\u00f6\5\b\5\2")
        buf.write("\u00f5\u00f3\3\2\2\2\u00f6\u00f9\3\2\2\2\u00f7\u00f5\3")
        buf.write("\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\7\3\2\2\2\u00f9\u00f7")
        buf.write("\3\2\2\2\u00fa\u00fd\5|?\2\u00fb\u00fd\7\27\2\2\u00fc")
        buf.write("\u00fa\3\2\2\2\u00fc\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2")
        buf.write("\u00fe\u00ff\7Z\2\2\u00ff\u0100\5*\26\2\u0100\t\3\2\2")
        buf.write("\2\u0101\u0110\5\2\2\2\u0102\u0104\7\3\2\2\u0103\u0102")
        buf.write("\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105")
        buf.write("\u0106\7?\2\2\u0106\u0107\5|?\2\u0107\u0108\7@\2\2\u0108")
        buf.write("\u0109\7C\2\2\u0109\u010b\5\u0086D\2\u010a\u010c\7\\\2")
        buf.write("\2\u010b\u010a\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010d")
        buf.write("\3\2\2\2\u010d\u010e\7D\2\2\u010e\u0110\3\2\2\2\u010f")
        buf.write("\u0101\3\2\2\2\u010f\u0103\3\2\2\2\u0110\u011f\3\2\2\2")
        buf.write("\u0111\u0112\7A\2\2\u0112\u0113\5.\30\2\u0113\u0114\7")
        buf.write("B\2\2\u0114\u011e\3\2\2\2\u0115\u0117\7?\2\2\u0116\u0118")
        buf.write("\5\f\7\2\u0117\u0116\3\2\2\2\u0117\u0118\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011e\7@\2\2\u011a\u011b\t\2\2\2")
        buf.write("\u011b\u011e\7m\2\2\u011c\u011e\t\3\2\2\u011d\u0111\3")
        buf.write("\2\2\2\u011d\u0115\3\2\2\2\u011d\u011a\3\2\2\2\u011d\u011c")
        buf.write("\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u011f")
        buf.write("\u0120\3\2\2\2\u0120\13\3\2\2\2\u0121\u011f\3\2\2\2\u0122")
        buf.write("\u0127\5*\26\2\u0123\u0124\7\\\2\2\u0124\u0126\5*\26\2")
        buf.write("\u0125\u0123\3\2\2\2\u0126\u0129\3\2\2\2\u0127\u0125\3")
        buf.write("\2\2\2\u0127\u0128\3\2\2\2\u0128\r\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u012a\u012c\t\4\2\2\u012b\u012a\3\2\2\2\u012c")
        buf.write("\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2")
        buf.write("\u012e\u013b\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u013c\5")
        buf.write("\n\6\2\u0131\u0132\5\20\t\2\u0132\u0133\5\22\n\2\u0133")
        buf.write("\u013c\3\2\2\2\u0134\u0135\t\5\2\2\u0135\u0136\7?\2\2")
        buf.write("\u0136\u0137\5|?\2\u0137\u0138\7@\2\2\u0138\u013c\3\2")
        buf.write("\2\2\u0139\u013a\7T\2\2\u013a\u013c\7m\2\2\u013b\u0130")
        buf.write("\3\2\2\2\u013b\u0131\3\2\2\2\u013b\u0134\3\2\2\2\u013b")
        buf.write("\u0139\3\2\2\2\u013c\17\3\2\2\2\u013d\u013e\t\6\2\2\u013e")
        buf.write("\21\3\2\2\2\u013f\u0141\7\3\2\2\u0140\u013f\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\7?\2\2")
        buf.write("\u0143\u0144\5|?\2\u0144\u0145\7@\2\2\u0145\u0146\5\22")
        buf.write("\n\2\u0146\u014a\3\2\2\2\u0147\u014a\5\16\b\2\u0148\u014a")
        buf.write("\7|\2\2\u0149\u0140\3\2\2\2\u0149\u0147\3\2\2\2\u0149")
        buf.write("\u0148\3\2\2\2\u014a\23\3\2\2\2\u014b\u0150\5\22\n\2\u014c")
        buf.write("\u014d\t\7\2\2\u014d\u014f\5\22\n\2\u014e\u014c\3\2\2")
        buf.write("\2\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151")
        buf.write("\3\2\2\2\u0151\25\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0158")
        buf.write("\5\24\13\2\u0154\u0155\t\b\2\2\u0155\u0157\5\24\13\2\u0156")
        buf.write("\u0154\3\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\27\3\2\2\2\u015a\u0158\3\2")
        buf.write("\2\2\u015b\u0160\5\26\f\2\u015c\u015d\t\t\2\2\u015d\u015f")
        buf.write("\5\26\f\2\u015e\u015c\3\2\2\2\u015f\u0162\3\2\2\2\u0160")
        buf.write("\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\31\3\2\2\2\u0162")
        buf.write("\u0160\3\2\2\2\u0163\u0168\5\30\r\2\u0164\u0165\t\n\2")
        buf.write("\2\u0165\u0167\5\30\r\2\u0166\u0164\3\2\2\2\u0167\u016a")
        buf.write("\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169")
        buf.write("\33\3\2\2\2\u016a\u0168\3\2\2\2\u016b\u0170\5\32\16\2")
        buf.write("\u016c\u016d\t\13\2\2\u016d\u016f\5\32\16\2\u016e\u016c")
        buf.write("\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\35\3\2\2\2\u0172\u0170\3\2\2\2\u0173")
        buf.write("\u0178\5\34\17\2\u0174\u0175\7R\2\2\u0175\u0177\5\34\17")
        buf.write("\2\u0176\u0174\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176")
        buf.write("\3\2\2\2\u0178\u0179\3\2\2\2\u0179\37\3\2\2\2\u017a\u0178")
        buf.write("\3\2\2\2\u017b\u0180\5\36\20\2\u017c\u017d\7V\2\2\u017d")
        buf.write("\u017f\5\36\20\2\u017e\u017c\3\2\2\2\u017f\u0182\3\2\2")
        buf.write("\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181!\3\2")
        buf.write("\2\2\u0182\u0180\3\2\2\2\u0183\u0188\5 \21\2\u0184\u0185")
        buf.write("\7S\2\2\u0185\u0187\5 \21\2\u0186\u0184\3\2\2\2\u0187")
        buf.write("\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189#\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u0190\5\"\22")
        buf.write("\2\u018c\u018d\7T\2\2\u018d\u018f\5\"\22\2\u018e\u018c")
        buf.write("\3\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190")
        buf.write("\u0191\3\2\2\2\u0191%\3\2\2\2\u0192\u0190\3\2\2\2\u0193")
        buf.write("\u0198\5$\23\2\u0194\u0195\7U\2\2\u0195\u0197\5$\23\2")
        buf.write("\u0196\u0194\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3")
        buf.write("\2\2\2\u0198\u0199\3\2\2\2\u0199\'\3\2\2\2\u019a\u0198")
        buf.write("\3\2\2\2\u019b\u01a1\5&\24\2\u019c\u019d\7Y\2\2\u019d")
        buf.write("\u019e\5.\30\2\u019e\u019f\7Z\2\2\u019f\u01a0\5(\25\2")
        buf.write("\u01a0\u01a2\3\2\2\2\u01a1\u019c\3\2\2\2\u01a1\u01a2\3")
        buf.write("\2\2\2\u01a2)\3\2\2\2\u01a3\u01aa\5(\25\2\u01a4\u01a5")
        buf.write("\5\16\b\2\u01a5\u01a6\5,\27\2\u01a6\u01a7\5*\26\2\u01a7")
        buf.write("\u01aa\3\2\2\2\u01a8\u01aa\7|\2\2\u01a9\u01a3\3\2\2\2")
        buf.write("\u01a9\u01a4\3\2\2\2\u01a9\u01a8\3\2\2\2\u01aa+\3\2\2")
        buf.write("\2\u01ab\u01ac\t\f\2\2\u01ac-\3\2\2\2\u01ad\u01b2\5*\26")
        buf.write("\2\u01ae\u01af\7\\\2\2\u01af\u01b1\5*\26\2\u01b0\u01ae")
        buf.write("\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2")
        buf.write("\u01b3\3\2\2\2\u01b3/\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b6\5(\25\2\u01b6\61\3\2\2\2\u01b7\u01b9\5\64\33\2")
        buf.write("\u01b8\u01ba\5:\36\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3")
        buf.write("\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc\7[\2\2\u01bc\u01bf")
        buf.write("\3\2\2\2\u01bd\u01bf\5\u008eH\2\u01be\u01b7\3\2\2\2\u01be")
        buf.write("\u01bd\3\2\2\2\u01bf\63\3\2\2\2\u01c0\u01c2\58\35\2\u01c1")
        buf.write("\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c1\3\2\2\2")
        buf.write("\u01c3\u01c4\3\2\2\2\u01c4\65\3\2\2\2\u01c5\u01c7\58\35")
        buf.write("\2\u01c6\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c6")
        buf.write("\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\67\3\2\2\2\u01ca\u01d1")
        buf.write("\5@!\2\u01cb\u01d1\5> \2\u01cc\u01d1\5B\"\2\u01cd\u01d1")
        buf.write("\5\\/\2\u01ce\u01d1\5^\60\2\u01cf\u01d1\5`\61\2\u01d0")
        buf.write("\u01ca\3\2\2\2\u01d0\u01cb\3\2\2\2\u01d0\u01cc\3\2\2\2")
        buf.write("\u01d0\u01cd\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01cf\3")
        buf.write("\2\2\2\u01d19\3\2\2\2\u01d2\u01d7\5<\37\2\u01d3\u01d4")
        buf.write("\7\\\2\2\u01d4\u01d6\5<\37\2\u01d5\u01d3\3\2\2\2\u01d6")
        buf.write("\u01d9\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d8;\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01dd\5b\62")
        buf.write("\2\u01db\u01dc\7]\2\2\u01dc\u01de\5\u0084C\2\u01dd\u01db")
        buf.write("\3\2\2\2\u01dd\u01de\3\2\2\2\u01de=\3\2\2\2\u01df\u01e0")
        buf.write("\7\33\2\2\u01e0?\3\2\2\2\u01e1\u01e2\t\r\2\2\u01e2A\3")
        buf.write("\2\2\2\u01e3\u01e4\b\"\1\2\u01e4\u01f3\t\16\2\2\u01e5")
        buf.write("\u01e6\7\3\2\2\u01e6\u01e7\7?\2\2\u01e7\u01e8\t\17\2\2")
        buf.write("\u01e8\u01f3\7@\2\2\u01e9\u01f3\5Z.\2\u01ea\u01f3\5D#")
        buf.write("\2\u01eb\u01f3\5R*\2\u01ec\u01f3\5\u0082B\2\u01ed\u01ee")
        buf.write("\7\t\2\2\u01ee\u01ef\7?\2\2\u01ef\u01f0\5\60\31\2\u01f0")
        buf.write("\u01f1\7@\2\2\u01f1\u01f3\3\2\2\2\u01f2\u01e3\3\2\2\2")
        buf.write("\u01f2\u01e5\3\2\2\2\u01f2\u01e9\3\2\2\2\u01f2\u01ea\3")
        buf.write("\2\2\2\u01f2\u01eb\3\2\2\2\u01f2\u01ec\3\2\2\2\u01f2\u01ed")
        buf.write("\3\2\2\2\u01f3\u01f8\3\2\2\2\u01f4\u01f5\f\3\2\2\u01f5")
        buf.write("\u01f7\5p9\2\u01f6\u01f4\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8")
        buf.write("\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9C\3\2\2\2\u01fa")
        buf.write("\u01f8\3\2\2\2\u01fb\u01fd\5F$\2\u01fc\u01fe\7m\2\2\u01fd")
        buf.write("\u01fc\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u01ff\3\2\2\2")
        buf.write("\u01ff\u0200\7C\2\2\u0200\u0201\5H%\2\u0201\u0202\7D\2")
        buf.write("\2\u0202\u0207\3\2\2\2\u0203\u0204\5F$\2\u0204\u0205\7")
        buf.write("m\2\2\u0205\u0207\3\2\2\2\u0206\u01fb\3\2\2\2\u0206\u0203")
        buf.write("\3\2\2\2\u0207E\3\2\2\2\u0208\u0209\t\20\2\2\u0209G\3")
        buf.write("\2\2\2\u020a\u020c\5J&\2\u020b\u020a\3\2\2\2\u020c\u020d")
        buf.write("\3\2\2\2\u020d\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e")
        buf.write("I\3\2\2\2\u020f\u0211\5L\'\2\u0210\u0212\5N(\2\u0211\u0210")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0214\7[\2\2\u0214\u0217\3\2\2\2\u0215\u0217\5\u008e")
        buf.write("H\2\u0216\u020f\3\2\2\2\u0216\u0215\3\2\2\2\u0217K\3\2")
        buf.write("\2\2\u0218\u021b\5B\"\2\u0219\u021b\5\\/\2\u021a\u0218")
        buf.write("\3\2\2\2\u021a\u0219\3\2\2\2\u021b\u021d\3\2\2\2\u021c")
        buf.write("\u021e\5L\'\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2")
        buf.write("\u021eM\3\2\2\2\u021f\u0224\5P)\2\u0220\u0221\7\\\2\2")
        buf.write("\u0221\u0223\5P)\2\u0222\u0220\3\2\2\2\u0223\u0226\3\2")
        buf.write("\2\2\u0224\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225O\3")
        buf.write("\2\2\2\u0226\u0224\3\2\2\2\u0227\u022e\5b\62\2\u0228\u022a")
        buf.write("\5b\62\2\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022c\7Z\2\2\u022c\u022e\5\60\31")
        buf.write("\2\u022d\u0227\3\2\2\2\u022d\u0229\3\2\2\2\u022eQ\3\2")
        buf.write("\2\2\u022f\u0231\7\34\2\2\u0230\u0232\7m\2\2\u0231\u0230")
        buf.write("\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write("\u0234\7C\2\2\u0234\u0236\5T+\2\u0235\u0237\7\\\2\2\u0236")
        buf.write("\u0235\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238\u0239\7D\2\2\u0239\u023d\3\2\2\2\u023a\u023b\7")
        buf.write("\34\2\2\u023b\u023d\7m\2\2\u023c\u022f\3\2\2\2\u023c\u023a")
        buf.write("\3\2\2\2\u023dS\3\2\2\2\u023e\u0243\5V,\2\u023f\u0240")
        buf.write("\7\\\2\2\u0240\u0242\5V,\2\u0241\u023f\3\2\2\2\u0242\u0245")
        buf.write("\3\2\2\2\u0243\u0241\3\2\2\2\u0243\u0244\3\2\2\2\u0244")
        buf.write("U\3\2\2\2\u0245\u0243\3\2\2\2\u0246\u0249\5X-\2\u0247")
        buf.write("\u0248\7]\2\2\u0248\u024a\5\60\31\2\u0249\u0247\3\2\2")
        buf.write("\2\u0249\u024a\3\2\2\2\u024aW\3\2\2\2\u024b\u024c\7m\2")
        buf.write("\2\u024cY\3\2\2\2\u024d\u024e\7\67\2\2\u024e\u024f\7?")
        buf.write("\2\2\u024f\u0250\5|?\2\u0250\u0251\7@\2\2\u0251[\3\2\2")
        buf.write("\2\u0252\u0253\t\21\2\2\u0253]\3\2\2\2\u0254\u025c\t\22")
        buf.write("\2\2\u0255\u025c\5h\65\2\u0256\u0257\7\f\2\2\u0257\u0258")
        buf.write("\7?\2\2\u0258\u0259\7m\2\2\u0259\u025c\7@\2\2\u025a\u025c")
        buf.write("\5> \2\u025b\u0254\3\2\2\2\u025b\u0255\3\2\2\2\u025b\u0256")
        buf.write("\3\2\2\2\u025b\u025a\3\2\2\2\u025c_\3\2\2\2\u025d\u025e")
        buf.write("\7\65\2\2\u025e\u0261\7?\2\2\u025f\u0262\5|?\2\u0260\u0262")
        buf.write("\5\60\31\2\u0261\u025f\3\2\2\2\u0261\u0260\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\u0264\7@\2\2\u0264a\3\2\2\2\u0265")
        buf.write("\u0267\5p9\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u026c\5d\63\2\u0269\u026b\5f\64\2")
        buf.write("\u026a\u0269\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a\3")
        buf.write("\2\2\2\u026c\u026d\3\2\2\2\u026dc\3\2\2\2\u026e\u026c")
        buf.write("\3\2\2\2\u026f\u0270\b\63\1\2\u0270\u0281\7m\2\2\u0271")
        buf.write("\u0272\7?\2\2\u0272\u0273\5b\62\2\u0273\u0274\7@\2\2\u0274")
        buf.write("\u0281\3\2\2\2\u0275\u0276\7m\2\2\u0276\u0277\7Z\2\2\u0277")
        buf.write("\u0281\7|\2\2\u0278\u027a\7?\2\2\u0279\u027b\5B\"\2\u027a")
        buf.write("\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u027d\5p9\2\u027d\u027e\5d\63\2\u027e\u027f\7@")
        buf.write("\2\2\u027f\u0281\3\2\2\2\u0280\u026f\3\2\2\2\u0280\u0271")
        buf.write("\3\2\2\2\u0280\u0275\3\2\2\2\u0280\u0278\3\2\2\2\u0281")
        buf.write("\u02af\3\2\2\2\u0282\u0283\f\n\2\2\u0283\u0285\7A\2\2")
        buf.write("\u0284\u0286\5r:\2\u0285\u0284\3\2\2\2\u0285\u0286\3\2")
        buf.write("\2\2\u0286\u0288\3\2\2\2\u0287\u0289\5*\26\2\u0288\u0287")
        buf.write("\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\3\2\2\2\u028a")
        buf.write("\u02ae\7B\2\2\u028b\u028c\f\t\2\2\u028c\u028d\7A\2\2\u028d")
        buf.write("\u028f\7+\2\2\u028e\u0290\5r:\2\u028f\u028e\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\5*\26\2")
        buf.write("\u0292\u0293\7B\2\2\u0293\u02ae\3\2\2\2\u0294\u0295\f")
        buf.write("\b\2\2\u0295\u0296\7A\2\2\u0296\u0297\5r:\2\u0297\u0298")
        buf.write("\7+\2\2\u0298\u0299\5*\26\2\u0299\u029a\7B\2\2\u029a\u02ae")
        buf.write("\3\2\2\2\u029b\u029c\f\7\2\2\u029c\u029e\7A\2\2\u029d")
        buf.write("\u029f\5r:\2\u029e\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a0\3\2\2\2\u02a0\u02a1\7O\2\2\u02a1\u02ae\7B\2\2\u02a2")
        buf.write("\u02a3\f\6\2\2\u02a3\u02a4\7?\2\2\u02a4\u02a5\5t;\2\u02a5")
        buf.write("\u02a6\7@\2\2\u02a6\u02ae\3\2\2\2\u02a7\u02a8\f\5\2\2")
        buf.write("\u02a8\u02aa\7?\2\2\u02a9\u02ab\5z>\2\u02aa\u02a9\3\2")
        buf.write("\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae")
        buf.write("\7@\2\2\u02ad\u0282\3\2\2\2\u02ad\u028b\3\2\2\2\u02ad")
        buf.write("\u0294\3\2\2\2\u02ad\u029b\3\2\2\2\u02ad\u02a2\3\2\2\2")
        buf.write("\u02ad\u02a7\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af\u02ad\3")
        buf.write("\2\2\2\u02af\u02b0\3\2\2\2\u02b0e\3\2\2\2\u02b1\u02af")
        buf.write("\3\2\2\2\u02b2\u02b3\7\r\2\2\u02b3\u02b5\7?\2\2\u02b4")
        buf.write("\u02b6\7}\2\2\u02b5\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2")
        buf.write("\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3")
        buf.write("\2\2\2\u02b9\u02bc\7@\2\2\u02ba\u02bc\5h\65\2\u02bb\u02b2")
        buf.write("\3\2\2\2\u02bb\u02ba\3\2\2\2\u02bcg\3\2\2\2\u02bd\u02be")
        buf.write("\7\16\2\2\u02be\u02bf\7?\2\2\u02bf\u02c0\7?\2\2\u02c0")
        buf.write("\u02c1\5j\66\2\u02c1\u02c2\7@\2\2\u02c2\u02c3\7@\2\2\u02c3")
        buf.write("i\3\2\2\2\u02c4\u02c6\5l\67\2\u02c5\u02c4\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6\u02cd\3\2\2\2\u02c7\u02c9\7\\\2\2")
        buf.write("\u02c8\u02ca\5l\67\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3")
        buf.write("\2\2\2\u02ca\u02cc\3\2\2\2\u02cb\u02c7\3\2\2\2\u02cc\u02cf")
        buf.write("\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("k\3\2\2\2\u02cf\u02cd\3\2\2\2\u02d0\u02d6\n\23\2\2\u02d1")
        buf.write("\u02d3\7?\2\2\u02d2\u02d4\5\f\7\2\u02d3\u02d2\3\2\2\2")
        buf.write("\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d7\7")
        buf.write("@\2\2\u02d6\u02d1\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7m\3")
        buf.write("\2\2\2\u02d8\u02de\n\24\2\2\u02d9\u02da\7?\2\2\u02da\u02db")
        buf.write("\5n8\2\u02db\u02dc\7@\2\2\u02dc\u02de\3\2\2\2\u02dd\u02d8")
        buf.write("\3\2\2\2\u02dd\u02d9\3\2\2\2\u02de\u02e1\3\2\2\2\u02df")
        buf.write("\u02dd\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0o\3\2\2\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e2\u02e4\t\25\2\2\u02e3\u02e5\5r:\2")
        buf.write("\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e7\3")
        buf.write("\2\2\2\u02e6\u02e2\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e6")
        buf.write("\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9q\3\2\2\2\u02ea\u02ec")
        buf.write("\5\\/\2\u02eb\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed")
        buf.write("\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ees\3\2\2\2\u02ef")
        buf.write("\u02f2\5v<\2\u02f0\u02f1\7\\\2\2\u02f1\u02f3\7l\2\2\u02f2")
        buf.write("\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3u\3\2\2\2\u02f4")
        buf.write("\u02f9\5x=\2\u02f5\u02f6\7\\\2\2\u02f6\u02f8\5x=\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02faw\3\2\2\2\u02fb\u02f9\3\2\2")
        buf.write("\2\u02fc\u02fd\5\64\33\2\u02fd\u02fe\5b\62\2\u02fe\u0304")
        buf.write("\3\2\2\2\u02ff\u0301\5\66\34\2\u0300\u0302\5~@\2\u0301")
        buf.write("\u0300\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0304\3\2\2\2")
        buf.write("\u0303\u02fc\3\2\2\2\u0303\u02ff\3\2\2\2\u0304y\3\2\2")
        buf.write("\2\u0305\u030a\7m\2\2\u0306\u0307\7\\\2\2\u0307\u0309")
        buf.write("\7m\2\2\u0308\u0306\3\2\2\2\u0309\u030c\3\2\2\2\u030a")
        buf.write("\u0308\3\2\2\2\u030a\u030b\3\2\2\2\u030b{\3\2\2\2\u030c")
        buf.write("\u030a\3\2\2\2\u030d\u030f\5L\'\2\u030e\u0310\5~@\2\u030f")
        buf.write("\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310}\3\2\2\2\u0311")
        buf.write("\u031d\5p9\2\u0312\u0314\5p9\2\u0313\u0312\3\2\2\2\u0313")
        buf.write("\u0314\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0319\5\u0080")
        buf.write("A\2\u0316\u0318\5f\64\2\u0317\u0316\3\2\2\2\u0318\u031b")
        buf.write("\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a")
        buf.write("\u031d\3\2\2\2\u031b\u0319\3\2\2\2\u031c\u0311\3\2\2\2")
        buf.write("\u031c\u0313\3\2\2\2\u031d\177\3\2\2\2\u031e\u031f\bA")
        buf.write("\1\2\u031f\u0320\7?\2\2\u0320\u0321\5~@\2\u0321\u0325")
        buf.write("\7@\2\2\u0322\u0324\5f\64\2\u0323\u0322\3\2\2\2\u0324")
        buf.write("\u0327\3\2\2\2\u0325\u0323\3\2\2\2\u0325\u0326\3\2\2\2")
        buf.write("\u0326\u034d\3\2\2\2\u0327\u0325\3\2\2\2\u0328\u032a\7")
        buf.write("A\2\2\u0329\u032b\5r:\2\u032a\u0329\3\2\2\2\u032a\u032b")
        buf.write("\3\2\2\2\u032b\u032d\3\2\2\2\u032c\u032e\5*\26\2\u032d")
        buf.write("\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2")
        buf.write("\u032f\u034d\7B\2\2\u0330\u0331\7A\2\2\u0331\u0333\7+")
        buf.write("\2\2\u0332\u0334\5r:\2\u0333\u0332\3\2\2\2\u0333\u0334")
        buf.write("\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0336\5*\26\2\u0336")
        buf.write("\u0337\7B\2\2\u0337\u034d\3\2\2\2\u0338\u0339\7A\2\2\u0339")
        buf.write("\u033a\5r:\2\u033a\u033b\7+\2\2\u033b\u033c\5*\26\2\u033c")
        buf.write("\u033d\7B\2\2\u033d\u034d\3\2\2\2\u033e\u033f\7A\2\2\u033f")
        buf.write("\u0340\7O\2\2\u0340\u034d\7B\2\2\u0341\u0343\7?\2\2\u0342")
        buf.write("\u0344\5t;\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344")
        buf.write("\u0345\3\2\2\2\u0345\u0349\7@\2\2\u0346\u0348\5f\64\2")
        buf.write("\u0347\u0346\3\2\2\2\u0348\u034b\3\2\2\2\u0349\u0347\3")
        buf.write("\2\2\2\u0349\u034a\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u0349")
        buf.write("\3\2\2\2\u034c\u031e\3\2\2\2\u034c\u0328\3\2\2\2\u034c")
        buf.write("\u0330\3\2\2\2\u034c\u0338\3\2\2\2\u034c\u033e\3\2\2\2")
        buf.write("\u034c\u0341\3\2\2\2\u034d\u0379\3\2\2\2\u034e\u034f\f")
        buf.write("\7\2\2\u034f\u0351\7A\2\2\u0350\u0352\5r:\2\u0351\u0350")
        buf.write("\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\3\2\2\2\u0353")
        buf.write("\u0355\5*\26\2\u0354\u0353\3\2\2\2\u0354\u0355\3\2\2\2")
        buf.write("\u0355\u0356\3\2\2\2\u0356\u0378\7B\2\2\u0357\u0358\f")
        buf.write("\6\2\2\u0358\u0359\7A\2\2\u0359\u035b\7+\2\2\u035a\u035c")
        buf.write("\5r:\2\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d")
        buf.write("\3\2\2\2\u035d\u035e\5*\26\2\u035e\u035f\7B\2\2\u035f")
        buf.write("\u0378\3\2\2\2\u0360\u0361\f\5\2\2\u0361\u0362\7A\2\2")
        buf.write("\u0362\u0363\5r:\2\u0363\u0364\7+\2\2\u0364\u0365\5*\26")
        buf.write("\2\u0365\u0366\7B\2\2\u0366\u0378\3\2\2\2\u0367\u0368")
        buf.write("\f\4\2\2\u0368\u0369\7A\2\2\u0369\u036a\7O\2\2\u036a\u0378")
        buf.write("\7B\2\2\u036b\u036c\f\3\2\2\u036c\u036e\7?\2\2\u036d\u036f")
        buf.write("\5t;\2\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370")
        buf.write("\3\2\2\2\u0370\u0374\7@\2\2\u0371\u0373\5f\64\2\u0372")
        buf.write("\u0371\3\2\2\2\u0373\u0376\3\2\2\2\u0374\u0372\3\2\2\2")
        buf.write("\u0374\u0375\3\2\2\2\u0375\u0378\3\2\2\2\u0376\u0374\3")
        buf.write("\2\2\2\u0377\u034e\3\2\2\2\u0377\u0357\3\2\2\2\u0377\u0360")
        buf.write("\3\2\2\2\u0377\u0367\3\2\2\2\u0377\u036b\3\2\2\2\u0378")
        buf.write("\u037b\3\2\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3\2\2\2")
        buf.write("\u037a\u0081\3\2\2\2\u037b\u0379\3\2\2\2\u037c\u037d\7")
        buf.write("m\2\2\u037d\u0083\3\2\2\2\u037e\u0387\5*\26\2\u037f\u0380")
        buf.write("\7C\2\2\u0380\u0382\5\u0086D\2\u0381\u0383\7\\\2\2\u0382")
        buf.write("\u0381\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\3\2\2\2")
        buf.write("\u0384\u0385\7D\2\2\u0385\u0387\3\2\2\2\u0386\u037e\3")
        buf.write("\2\2\2\u0386\u037f\3\2\2\2\u0387\u0085\3\2\2\2\u0388\u038a")
        buf.write("\5\u0088E\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038a")
        buf.write("\u038b\3\2\2\2\u038b\u0393\5\u0084C\2\u038c\u038e\7\\")
        buf.write("\2\2\u038d\u038f\5\u0088E\2\u038e\u038d\3\2\2\2\u038e")
        buf.write("\u038f\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0392\5\u0084")
        buf.write("C\2\u0391\u038c\3\2\2\2\u0392\u0395\3\2\2\2\u0393\u0391")
        buf.write("\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0087\3\2\2\2\u0395")
        buf.write("\u0393\3\2\2\2\u0396\u0397\5\u008aF\2\u0397\u0398\7]\2")
        buf.write("\2\u0398\u0089\3\2\2\2\u0399\u039b\5\u008cG\2\u039a\u0399")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039a\3\2\2\2\u039c")
        buf.write("\u039d\3\2\2\2\u039d\u008b\3\2\2\2\u039e\u039f\7A\2\2")
        buf.write("\u039f\u03a0\5\60\31\2\u03a0\u03a1\7B\2\2\u03a1\u03a5")
        buf.write("\3\2\2\2\u03a2\u03a3\7k\2\2\u03a3\u03a5\7m\2\2\u03a4\u039e")
        buf.write("\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a5\u008d\3\2\2\2\u03a6")
        buf.write("\u03a7\7=\2\2\u03a7\u03a8\7?\2\2\u03a8\u03a9\5\60\31\2")
        buf.write("\u03a9\u03ab\7\\\2\2\u03aa\u03ac\7}\2\2\u03ab\u03aa\3")
        buf.write("\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae")
        buf.write("\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\7@\2\2\u03b0")
        buf.write("\u03b1\7[\2\2\u03b1\u008f\3\2\2\2\u03b2\u03d8\5\u0092")
        buf.write("J\2\u03b3\u03d8\5\u0094K\2\u03b4\u03d8\5\u009aN\2\u03b5")
        buf.write("\u03d8\5\u009cO\2\u03b6\u03d8\5\u009eP\2\u03b7\u03d8\5")
        buf.write("\u00a6T\2\u03b8\u03b9\t\26\2\2\u03b9\u03ba\t\27\2\2\u03ba")
        buf.write("\u03c3\7?\2\2\u03bb\u03c0\5&\24\2\u03bc\u03bd\7\\\2\2")
        buf.write("\u03bd\u03bf\5&\24\2\u03be\u03bc\3\2\2\2\u03bf\u03c2\3")
        buf.write("\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c4")
        buf.write("\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03bb\3\2\2\2\u03c3")
        buf.write("\u03c4\3\2\2\2\u03c4\u03d2\3\2\2\2\u03c5\u03ce\7Z\2\2")
        buf.write("\u03c6\u03cb\5&\24\2\u03c7\u03c8\7\\\2\2\u03c8\u03ca\5")
        buf.write("&\24\2\u03c9\u03c7\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd")
        buf.write("\u03cb\3\2\2\2\u03ce\u03c6\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u03d1\3\2\2\2\u03d0\u03c5\3\2\2\2\u03d1\u03d4\3")
        buf.write("\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5")
        buf.write("\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03d6\7@\2\2\u03d6")
        buf.write("\u03d8\7[\2\2\u03d7\u03b2\3\2\2\2\u03d7\u03b3\3\2\2\2")
        buf.write("\u03d7\u03b4\3\2\2\2\u03d7\u03b5\3\2\2\2\u03d7\u03b6\3")
        buf.write("\2\2\2\u03d7\u03b7\3\2\2\2\u03d7\u03b8\3\2\2\2\u03d8\u0091")
        buf.write("\3\2\2\2\u03d9\u03da\7m\2\2\u03da\u03db\7Z\2\2\u03db\u03e5")
        buf.write("\5\u0090I\2\u03dc\u03dd\7\23\2\2\u03dd\u03de\5\60\31\2")
        buf.write("\u03de\u03df\7Z\2\2\u03df\u03e0\5\u0090I\2\u03e0\u03e5")
        buf.write("\3\2\2\2\u03e1\u03e2\7\27\2\2\u03e2\u03e3\7Z\2\2\u03e3")
        buf.write("\u03e5\5\u0090I\2\u03e4\u03d9\3\2\2\2\u03e4\u03dc\3\2")
        buf.write("\2\2\u03e4\u03e1\3\2\2\2\u03e5\u0093\3\2\2\2\u03e6\u03e8")
        buf.write("\7C\2\2\u03e7\u03e9\5\u0096L\2\u03e8\u03e7\3\2\2\2\u03e8")
        buf.write("\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\7D\2\2")
        buf.write("\u03eb\u0095\3\2\2\2\u03ec\u03ee\5\u0098M\2\u03ed\u03ec")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef")
        buf.write("\u03f0\3\2\2\2\u03f0\u0097\3\2\2\2\u03f1\u03f5\5\u0090")
        buf.write("I\2\u03f2\u03f5\5\62\32\2\u03f3\u03f5\5\u00b0Y\2\u03f4")
        buf.write("\u03f1\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f3\3\2\2\2")
        buf.write("\u03f5\u0099\3\2\2\2\u03f6\u03f8\5.\30\2\u03f7\u03f6\3")
        buf.write("\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa")
        buf.write("\7[\2\2\u03fa\u009b\3\2\2\2\u03fb\u03fc\7!\2\2\u03fc\u03fd")
        buf.write("\7?\2\2\u03fd\u03fe\5.\30\2\u03fe\u03ff\7@\2\2\u03ff\u0402")
        buf.write("\5\u0090I\2\u0400\u0401\7\32\2\2\u0401\u0403\5\u0090I")
        buf.write("\2\u0402\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u040b")
        buf.write("\3\2\2\2\u0404\u0405\7.\2\2\u0405\u0406\7?\2\2\u0406\u0407")
        buf.write("\5.\30\2\u0407\u0408\7@\2\2\u0408\u0409\5\u0090I\2\u0409")
        buf.write("\u040b\3\2\2\2\u040a\u03fb\3\2\2\2\u040a\u0404\3\2\2\2")
        buf.write("\u040b\u009d\3\2\2\2\u040c\u040d\7\64\2\2\u040d\u040e")
        buf.write("\7?\2\2\u040e\u040f\5.\30\2\u040f\u0410\7@\2\2\u0410\u0411")
        buf.write("\5\u0090I\2\u0411\u0421\3\2\2\2\u0412\u0413\7\30\2\2\u0413")
        buf.write("\u0414\5\u0090I\2\u0414\u0415\7\64\2\2\u0415\u0416\7?")
        buf.write("\2\2\u0416\u0417\5.\30\2\u0417\u0418\7@\2\2\u0418\u0419")
        buf.write("\7[\2\2\u0419\u0421\3\2\2\2\u041a\u041b\7\37\2\2\u041b")
        buf.write("\u041c\7?\2\2\u041c\u041d\5\u00a0Q\2\u041d\u041e\7@\2")
        buf.write("\2\u041e\u041f\5\u0090I\2\u041f\u0421\3\2\2\2\u0420\u040c")
        buf.write("\3\2\2\2\u0420\u0412\3\2\2\2\u0420\u041a\3\2\2\2\u0421")
        buf.write("\u009f\3\2\2\2\u0422\u0427\5\u00a2R\2\u0423\u0425\5.\30")
        buf.write("\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0427")
        buf.write("\3\2\2\2\u0426\u0422\3\2\2\2\u0426\u0424\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u042a\7[\2\2\u0429\u042b\5\u00a4")
        buf.write("S\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c")
        buf.write("\3\2\2\2\u042c\u042e\7[\2\2\u042d\u042f\5\u00a4S\2\u042e")
        buf.write("\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u00a1\3\2\2\2")
        buf.write("\u0430\u0432\5\64\33\2\u0431\u0433\5:\36\2\u0432\u0431")
        buf.write("\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u00a3\3\2\2\2\u0434")
        buf.write("\u0439\5*\26\2\u0435\u0436\7\\\2\2\u0436\u0438\5*\26\2")
        buf.write("\u0437\u0435\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3")
        buf.write("\2\2\2\u0439\u043a\3\2\2\2\u043a\u00a5\3\2\2\2\u043b\u0439")
        buf.write("\3\2\2\2\u043c\u043d\7 \2\2\u043d\u0446\7m\2\2\u043e\u0446")
        buf.write("\t\30\2\2\u043f\u0441\7\'\2\2\u0440\u0442\5.\30\2\u0441")
        buf.write("\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0446\3\2\2\2")
        buf.write("\u0443\u0444\7 \2\2\u0444\u0446\5\16\b\2\u0445\u043c\3")
        buf.write("\2\2\2\u0445\u043e\3\2\2\2\u0445\u043f\3\2\2\2\u0445\u0443")
        buf.write("\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0448\7[\2\2\u0448")
        buf.write("\u00a7\3\2\2\2\u0449\u044b\5\u00aaV\2\u044a\u0449\3\2")
        buf.write("\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d")
        buf.write("\7\2\2\3\u044d\u00a9\3\2\2\2\u044e\u0450\5\u00acW\2\u044f")
        buf.write("\u044e\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u044f\3\2\2\2")
        buf.write("\u0451\u0452\3\2\2\2\u0452\u00ab\3\2\2\2\u0453\u0457\5")
        buf.write("\u00aeX\2\u0454\u0457\5\u00b0Y\2\u0455\u0457\7[\2\2\u0456")
        buf.write("\u0453\3\2\2\2\u0456\u0454\3\2\2\2\u0456\u0455\3\2\2\2")
        buf.write("\u0457\u00ad\3\2\2\2\u0458\u045b\5\u00c4c\2\u0459\u045b")
        buf.write("\5\62\32\2\u045a\u0458\3\2\2\2\u045a\u0459\3\2\2\2\u045b")
        buf.write("\u00af\3\2\2\2\u045c\u0463\5\u00be`\2\u045d\u0463\5\u00c2")
        buf.write("b\2\u045e\u0463\5\u00b2Z\2\u045f\u0463\7w\2\2\u0460\u0463")
        buf.write("\7u\2\2\u0461\u0463\7v\2\2\u0462\u045c\3\2\2\2\u0462\u045d")
        buf.write("\3\2\2\2\u0462\u045e\3\2\2\2\u0462\u045f\3\2\2\2\u0462")
        buf.write("\u0460\3\2\2\2\u0462\u0461\3\2\2\2\u0463\u00b1\3\2\2\2")
        buf.write("\u0464\u0466\7q\2\2\u0465\u0467\7?\2\2\u0466\u0465\3\2")
        buf.write("\2\2\u0466\u0467\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046a")
        buf.write("\5.\30\2\u0469\u046b\7@\2\2\u046a\u0469\3\2\2\2\u046a")
        buf.write("\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\5\u00b4")
        buf.write("[\2\u046d\u0475\3\2\2\2\u046e\u046f\7p\2\2\u046f\u0470")
        buf.write("\7m\2\2\u0470\u0475\5\u00b4[\2\u0471\u0472\7o\2\2\u0472")
        buf.write("\u0473\7m\2\2\u0473\u0475\5\u00b4[\2\u0474\u0464\3\2\2")
        buf.write("\2\u0474\u046e\3\2\2\2\u0474\u0471\3\2\2\2\u0475\u00b3")
        buf.write("\3\2\2\2\u0476\u0477\5\u00bc_\2\u0477\u0478\5\u00b6\\")
        buf.write("\2\u0478\u0479\7t\2\2\u0479\u00b5\3\2\2\2\u047a\u047c")
        buf.write("\5\u00b8]\2\u047b\u047a\3\2\2\2\u047c\u047f\3\2\2\2\u047d")
        buf.write("\u047b\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0481\3\2\2\2")
        buf.write("\u047f\u047d\3\2\2\2\u0480\u0482\5\u00ba^\2\u0481\u0480")
        buf.write("\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u00b7\3\2\2\2\u0483")
        buf.write("\u0485\7r\2\2\u0484\u0486\7?\2\2\u0485\u0484\3\2\2\2\u0485")
        buf.write("\u0486\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\5.\30\2")
        buf.write("\u0488\u048a\7@\2\2\u0489\u0488\3\2\2\2\u0489\u048a\3")
        buf.write("\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c\5\u00bc_\2\u048c")
        buf.write("\u00b9\3\2\2\2\u048d\u048e\7s\2\2\u048e\u048f\5\u00bc")
        buf.write("_\2\u048f\u00bb\3\2\2\2\u0490\u0494\5\u0096L\2\u0491\u0494")
        buf.write("\5\u00b2Z\2\u0492\u0494\5\u00b0Y\2\u0493\u0490\3\2\2\2")
        buf.write("\u0493\u0491\3\2\2\2\u0493\u0492\3\2\2\2\u0494\u0496\3")
        buf.write("\2\2\2\u0495\u0493\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u00bd")
        buf.write("\3\2\2\2\u0497\u049a\5\u00c0a\2\u0498\u049a\5\u00c2b\2")
        buf.write("\u0499\u0497\3\2\2\2\u0499\u0498\3\2\2\2\u049a\u00bf\3")
        buf.write("\2\2\2\u049b\u049c\t\31\2\2\u049c\u00c1\3\2\2\2\u049d")
        buf.write("\u049e\7x\2\2\u049e\u00c3\3\2\2\2\u049f\u04a1\5\64\33")
        buf.write("\2\u04a0\u049f\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2")
        buf.write("\3\2\2\2\u04a2\u04a4\5b\62\2\u04a3\u04a5\5\u00c6d\2\u04a4")
        buf.write("\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\3\2\2\2")
        buf.write("\u04a6\u04a7\5\u0094K\2\u04a7\u00c5\3\2\2\2\u04a8\u04aa")
        buf.write("\5\62\32\2\u04a9\u04a8\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab")
        buf.write("\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u00c7\3\2\2\2")
        buf.write("\u0097\u00cd\u00d5\u00e9\u00f7\u00fc\u0103\u010b\u010f")
        buf.write("\u0117\u011d\u011f\u0127\u012d\u013b\u0140\u0149\u0150")
        buf.write("\u0158\u0160\u0168\u0170\u0178\u0180\u0188\u0190\u0198")
        buf.write("\u01a1\u01a9\u01b2\u01b9\u01be\u01c3\u01c8\u01d0\u01d7")
        buf.write("\u01dd\u01f2\u01f8\u01fd\u0206\u020d\u0211\u0216\u021a")
        buf.write("\u021d\u0224\u0229\u022d\u0231\u0236\u023c\u0243\u0249")
        buf.write("\u025b\u0261\u0266\u026c\u027a\u0280\u0285\u0288\u028f")
        buf.write("\u029e\u02aa\u02ad\u02af\u02b7\u02bb\u02c5\u02c9\u02cd")
        buf.write("\u02d3\u02d6\u02dd\u02df\u02e4\u02e8\u02ed\u02f2\u02f9")
        buf.write("\u0301\u0303\u030a\u030f\u0313\u0319\u031c\u0325\u032a")
        buf.write("\u032d\u0333\u0343\u0349\u034c\u0351\u0354\u035b\u036e")
        buf.write("\u0374\u0377\u0379\u0382\u0386\u0389\u038e\u0393\u039c")
        buf.write("\u03a4\u03ad\u03c0\u03c3\u03cb\u03ce\u03d2\u03d7\u03e4")
        buf.write("\u03e8\u03ef\u03f4\u03f7\u0402\u040a\u0420\u0424\u0426")
        buf.write("\u042a\u042e\u0432\u0439\u0441\u0445\u044a\u0451\u0456")
        buf.write("\u045a\u0462\u0466\u046a\u0474\u047d\u0481\u0485\u0489")
        buf.write("\u0493\u0495\u0499\u04a0\u04a4\u04ab")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'entry'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'status'", "'struct'", "'switch'", "'typedef'", 
                     "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", 
                     "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
                     "'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", 
                     "'_Static_assert'", "'_Thread_local'", "'('", "')'", 
                     "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
                     "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", 
                     "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", 
                     "'!'", "'~'", "'?'", "':'", "';'", "','", "'='", "'*='", 
                     "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
                     "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Entry", "Enum", "Extern", "Float", 
                      "For", "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Status", "Struct", "Switch", "Typedef", 
                      "Union", "Unsigned", "Void", "Volatile", "While", 
                      "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Generic", "Imaginary", "Noreturn", "StaticAssert", 
                      "ThreadLocal", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Less", 
                      "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "FileComment", 
                      "IfNotDefinedDirective", "IfDefinedDirective", "IfDirective", 
                      "ElifDirective", "ElseDirective", "EndifDirective", 
                      "PragmaDirective", "UndefDirective", "ComplexDefineDirective", 
                      "ComputedIncludeLiteral", "LibIncludeLiteral", "StringIncludeLiteral", 
                      "Constant", "DigitSequence", "StringLiteral", "AsmBlock", 
                      "LineAfterPreprocessing", "LineDirective", "Whitespace", 
                      "Newline" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_argumentExpressionList = 5
    RULE_unaryExpression = 6
    RULE_unaryOperator = 7
    RULE_castExpression = 8
    RULE_multiplicativeExpression = 9
    RULE_additiveExpression = 10
    RULE_shiftExpression = 11
    RULE_relationalExpression = 12
    RULE_equalityExpression = 13
    RULE_andExpression = 14
    RULE_exclusiveOrExpression = 15
    RULE_inclusiveOrExpression = 16
    RULE_logicalAndExpression = 17
    RULE_logicalOrExpression = 18
    RULE_conditionalExpression = 19
    RULE_assignmentExpression = 20
    RULE_assignmentOperator = 21
    RULE_expression = 22
    RULE_constantExpression = 23
    RULE_declaration = 24
    RULE_declarationSpecifiers = 25
    RULE_declarationSpecifiers2 = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_entryPointSpecifier = 30
    RULE_storageClassSpecifier = 31
    RULE_typeSpecifier = 32
    RULE_structOrUnionSpecifier = 33
    RULE_structOrUnion = 34
    RULE_structDeclarationList = 35
    RULE_structDeclaration = 36
    RULE_specifierQualifierList = 37
    RULE_structDeclaratorList = 38
    RULE_structDeclarator = 39
    RULE_enumSpecifier = 40
    RULE_enumeratorList = 41
    RULE_enumerator = 42
    RULE_enumerationConstant = 43
    RULE_atomicTypeSpecifier = 44
    RULE_typeQualifier = 45
    RULE_functionSpecifier = 46
    RULE_alignmentSpecifier = 47
    RULE_declarator = 48
    RULE_directDeclarator = 49
    RULE_gccDeclaratorExtension = 50
    RULE_gccAttributeSpecifier = 51
    RULE_gccAttributeList = 52
    RULE_gccAttribute = 53
    RULE_nestedParenthesesBlock = 54
    RULE_pointer = 55
    RULE_typeQualifierList = 56
    RULE_parameterTypeList = 57
    RULE_parameterList = 58
    RULE_parameterDeclaration = 59
    RULE_identifierList = 60
    RULE_typeName = 61
    RULE_abstractDeclarator = 62
    RULE_directAbstractDeclarator = 63
    RULE_typedefName = 64
    RULE_initializer = 65
    RULE_initializerList = 66
    RULE_designation = 67
    RULE_designatorList = 68
    RULE_designator = 69
    RULE_staticAssertDeclaration = 70
    RULE_statement = 71
    RULE_labeledStatement = 72
    RULE_compoundStatement = 73
    RULE_blockItemList = 74
    RULE_blockItem = 75
    RULE_expressionStatement = 76
    RULE_selectionStatement = 77
    RULE_iterationStatement = 78
    RULE_forCondition = 79
    RULE_forDeclaration = 80
    RULE_forExpression = 81
    RULE_jumpStatement = 82
    RULE_compilationUnit = 83
    RULE_translationUnit = 84
    RULE_externalItem = 85
    RULE_externalDeclaration = 86
    RULE_preProcessorDirective = 87
    RULE_logicalPreProcessorDirective = 88
    RULE_logicalDirectiveBlock = 89
    RULE_logicalDirectiveAlternatives = 90
    RULE_logicalElifDirective = 91
    RULE_logicalElseDirective = 92
    RULE_preProcessorCompoundStatement = 93
    RULE_includeDirective = 94
    RULE_fileIncludeDirective = 95
    RULE_computedIncludeDirective = 96
    RULE_functionDefinition = 97
    RULE_declarationList = 98

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "entryPointSpecifier", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalItem", "externalDeclaration", 
                   "preProcessorDirective", "logicalPreProcessorDirective", 
                   "logicalDirectiveBlock", "logicalDirectiveAlternatives", 
                   "logicalElifDirective", "logicalElseDirective", "preProcessorCompoundStatement", 
                   "includeDirective", "fileIncludeDirective", "computedIncludeDirective", 
                   "functionDefinition", "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    Auto=15
    Break=16
    Case=17
    Char=18
    Const=19
    Continue=20
    Default=21
    Do=22
    Double=23
    Else=24
    Entry=25
    Enum=26
    Extern=27
    Float=28
    For=29
    Goto=30
    If=31
    Inline=32
    Int=33
    Long=34
    Register=35
    Restrict=36
    Return=37
    Short=38
    Signed=39
    Sizeof=40
    Static=41
    Status=42
    Struct=43
    Switch=44
    Typedef=45
    Union=46
    Unsigned=47
    Void=48
    Volatile=49
    While=50
    Alignas=51
    Alignof=52
    Atomic=53
    Bool=54
    Complex=55
    Generic=56
    Imaginary=57
    Noreturn=58
    StaticAssert=59
    ThreadLocal=60
    LeftParen=61
    RightParen=62
    LeftBracket=63
    RightBracket=64
    LeftBrace=65
    RightBrace=66
    Less=67
    LessEqual=68
    Greater=69
    GreaterEqual=70
    LeftShift=71
    RightShift=72
    Plus=73
    PlusPlus=74
    Minus=75
    MinusMinus=76
    Star=77
    Div=78
    Mod=79
    And=80
    Or=81
    AndAnd=82
    OrOr=83
    Caret=84
    Not=85
    Tilde=86
    Question=87
    Colon=88
    Semi=89
    Comma=90
    Assign=91
    StarAssign=92
    DivAssign=93
    ModAssign=94
    PlusAssign=95
    MinusAssign=96
    LeftShiftAssign=97
    RightShiftAssign=98
    AndAssign=99
    XorAssign=100
    OrAssign=101
    Equal=102
    NotEqual=103
    Arrow=104
    Dot=105
    Ellipsis=106
    Identifier=107
    FileComment=108
    IfNotDefinedDirective=109
    IfDefinedDirective=110
    IfDirective=111
    ElifDirective=112
    ElseDirective=113
    EndifDirective=114
    PragmaDirective=115
    UndefDirective=116
    ComplexDefineDirective=117
    ComputedIncludeLiteral=118
    LibIncludeLiteral=119
    StringIncludeLiteral=120
    Constant=121
    DigitSequence=122
    StringLiteral=123
    AsmBlock=124
    LineAfterPreprocessing=125
    LineDirective=126
    Whitespace=127
    Newline=128

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(ParaCParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 198
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 199
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 201 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 200
                        self.match(ParaCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 203 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 205
                self.match(ParaCParser.LeftParen)
                self.state = 206
                self.expression()
                self.state = 207
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 209
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 210
                    self.match(ParaCParser.T__0)


                self.state = 213
                self.match(ParaCParser.LeftParen)
                self.state = 214
                self.compoundStatement()
                self.state = 215
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 217
                self.match(ParaCParser.T__1)
                self.state = 218
                self.match(ParaCParser.LeftParen)
                self.state = 219
                self.unaryExpression()
                self.state = 220
                self.match(ParaCParser.Comma)
                self.state = 221
                self.typeName()
                self.state = 222
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 224
                self.match(ParaCParser.T__2)
                self.state = 225
                self.match(ParaCParser.LeftParen)
                self.state = 226
                self.typeName()
                self.state = 227
                self.match(ParaCParser.Comma)
                self.state = 228
                self.unaryExpression()
                self.state = 229
                self.match(ParaCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(ParaCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(ParaCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = ParaCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(ParaCParser.Generic)
            self.state = 234
            self.match(ParaCParser.LeftParen)
            self.state = 235
            self.assignmentExpression()
            self.state = 236
            self.match(ParaCParser.Comma)
            self.state = 237
            self.genericAssocList()
            self.state = 238
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = ParaCParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.genericAssociation()
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 241
                self.match(ParaCParser.Comma)
                self.state = 242
                self.genericAssociation()
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = ParaCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.state = 248
                self.typeName()
                pass
            elif token in [ParaCParser.Default]:
                self.state = 249
                self.match(ParaCParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 252
            self.match(ParaCParser.Colon)
            self.state = 253
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 255
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 256
                    self.match(ParaCParser.T__0)


                self.state = 259
                self.match(ParaCParser.LeftParen)
                self.state = 260
                self.typeName()
                self.state = 261
                self.match(ParaCParser.RightParen)
                self.state = 262
                self.match(ParaCParser.LeftBrace)
                self.state = 263
                self.initializerList()
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 264
                    self.match(ParaCParser.Comma)


                self.state = 267
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 285
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 283
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.LeftBracket]:
                        self.state = 271
                        self.match(ParaCParser.LeftBracket)
                        self.state = 272
                        self.expression()
                        self.state = 273
                        self.match(ParaCParser.RightBracket)
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 275
                        self.match(ParaCParser.LeftParen)
                        self.state = 277
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                            self.state = 276
                            self.argumentExpressionList()


                        self.state = 279
                        self.match(ParaCParser.RightParen)
                        pass
                    elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                        self.state = 280
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 281
                        self.match(ParaCParser.Identifier)
                        pass
                    elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                        self.state = 282
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.assignmentExpression()
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 289
                self.match(ParaCParser.Comma)
                self.state = 290
                self.assignmentExpression()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 296
                    _la = self._input.LA(1)
                    if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (ParaCParser.Sizeof - 40)) | (1 << (ParaCParser.PlusPlus - 40)) | (1 << (ParaCParser.MinusMinus - 40)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral]:
                self.state = 302
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 303
                self.unaryOperator()
                self.state = 304
                self.castExpression()
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 306
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 307
                self.match(ParaCParser.LeftParen)
                self.state = 308
                self.typeName()
                self.state = 309
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 311
                self.match(ParaCParser.AndAnd)
                self.state = 312
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = ParaCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 317
                    self.match(ParaCParser.T__0)


                self.state = 320
                self.match(ParaCParser.LeftParen)
                self.state = 321
                self.typeName()
                self.state = 322
                self.match(ParaCParser.RightParen)
                self.state = 323
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 326
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.castExpression()
            self.state = 334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 330
                    _la = self._input.LA(1)
                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Div - 77)) | (1 << (ParaCParser.Mod - 77)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 331
                    self.castExpression() 
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.multiplicativeExpression()
            self.state = 342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 338
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 339
                    self.multiplicativeExpression() 
                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.additiveExpression()
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.LeftShift or _la==ParaCParser.RightShift:
                self.state = 346
                _la = self._input.LA(1)
                if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 347
                self.additiveExpression()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.shiftExpression()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (ParaCParser.Less - 67)) | (1 << (ParaCParser.LessEqual - 67)) | (1 << (ParaCParser.Greater - 67)) | (1 << (ParaCParser.GreaterEqual - 67)))) != 0):
                self.state = 354
                _la = self._input.LA(1)
                if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (ParaCParser.Less - 67)) | (1 << (ParaCParser.LessEqual - 67)) | (1 << (ParaCParser.Greater - 67)) | (1 << (ParaCParser.GreaterEqual - 67)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 355
                self.shiftExpression()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.relationalExpression()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Equal or _la==ParaCParser.NotEqual:
                self.state = 362
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 363
                self.relationalExpression()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.equalityExpression()
            self.state = 374
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 370
                    self.match(ParaCParser.And)
                    self.state = 371
                    self.equalityExpression() 
                self.state = 376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.andExpression()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Caret:
                self.state = 378
                self.match(ParaCParser.Caret)
                self.state = 379
                self.andExpression()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.exclusiveOrExpression()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Or:
                self.state = 386
                self.match(ParaCParser.Or)
                self.state = 387
                self.exclusiveOrExpression()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.inclusiveOrExpression()
            self.state = 398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 394
                    self.match(ParaCParser.AndAnd)
                    self.state = 395
                    self.inclusiveOrExpression() 
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.logicalAndExpression()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.OrOr:
                self.state = 402
                self.match(ParaCParser.OrOr)
                self.state = 403
                self.logicalAndExpression()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.logicalOrExpression()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Question:
                self.state = 410
                self.match(ParaCParser.Question)
                self.state = 411
                self.expression()
                self.state = 412
                self.match(ParaCParser.Colon)
                self.state = 413
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentExpression)
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.unaryExpression()
                self.state = 419
                self.assignmentOperator()
                self.state = 420
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 422
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (ParaCParser.Assign - 91)) | (1 << (ParaCParser.StarAssign - 91)) | (1 << (ParaCParser.DivAssign - 91)) | (1 << (ParaCParser.ModAssign - 91)) | (1 << (ParaCParser.PlusAssign - 91)) | (1 << (ParaCParser.MinusAssign - 91)) | (1 << (ParaCParser.LeftShiftAssign - 91)) | (1 << (ParaCParser.RightShiftAssign - 91)) | (1 << (ParaCParser.AndAssign - 91)) | (1 << (ParaCParser.XorAssign - 91)) | (1 << (ParaCParser.OrAssign - 91)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.assignmentExpression()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 428
                self.match(ParaCParser.Comma)
                self.state = 429
                self.assignmentExpression()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.declarationSpecifiers()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                    self.state = 438
                    self.initDeclaratorList()


                self.state = 441
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 446
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 449 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = ParaCParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 451
                self.declarationSpecifier()
                self.state = 454 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.entryPointSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 458
                self.typeSpecifier(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 459
                self.typeQualifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 460
                self.functionSpecifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 461
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.initDeclarator()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 465
                self.match(ParaCParser.Comma)
                self.state = 466
                self.initDeclarator()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.declarator()
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 473
                self.match(ParaCParser.Assign)
                self.state = 474
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryPointSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_entryPointSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryPointSpecifier" ):
                listener.enterEntryPointSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryPointSpecifier" ):
                listener.exitEntryPointSpecifier(self)




    def entryPointSpecifier(self):

        localctx = ParaCParser.EntryPointSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_entryPointSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(ParaCParser.Entry)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Register) | (1 << ParaCParser.Static) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def Complex(self):
            return self.getToken(ParaCParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool, ParaCParser.Complex]:
                self.state = 482
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__0]:
                self.state = 483
                self.match(ParaCParser.T__0)
                self.state = 484
                self.match(ParaCParser.LeftParen)
                self.state = 485
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 486
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 487
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 488
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 489
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 490
                self.typedefName()
                pass
            elif token in [ParaCParser.T__6]:
                self.state = 491
                self.match(ParaCParser.T__6)
                self.state = 492
                self.match(ParaCParser.LeftParen)
                self.state = 493
                self.constantExpression()
                self.state = 494
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 498
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 499
                    self.pointer() 
                self.state = 504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.structOrUnion()
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 506
                    self.match(ParaCParser.Identifier)


                self.state = 509
                self.match(ParaCParser.LeftBrace)
                self.state = 510
                self.structDeclarationList()
                self.state = 511
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.structOrUnion()
                self.state = 514
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 520
                self.structDeclaration()
                self.state = 523 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.StaticAssert))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.specifierQualifierList()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Colon - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                    self.state = 526
                    self.structDeclaratorList()


                self.state = 529
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 534
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 535
                self.typeQualifier()
                pass


            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 538
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.structDeclarator()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 542
                self.match(ParaCParser.Comma)
                self.state = 543
                self.structDeclarator()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                    self.state = 550
                    self.declarator()


                self.state = 553
                self.match(ParaCParser.Colon)
                self.state = 554
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(ParaCParser.Enum)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 558
                    self.match(ParaCParser.Identifier)


                self.state = 561
                self.match(ParaCParser.LeftBrace)
                self.state = 562
                self.enumeratorList()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 563
                    self.match(ParaCParser.Comma)


                self.state = 566
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.match(ParaCParser.Enum)
                self.state = 569
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.enumerator()
            self.state = 577
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 573
                    self.match(ParaCParser.Comma)
                    self.state = 574
                    self.enumerator() 
                self.state = 579
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.enumerationConstant()
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 581
                self.match(ParaCParser.Assign)
                self.state = 582
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(ParaCParser.Atomic)
            self.state = 588
            self.match(ParaCParser.LeftParen)
            self.state = 589
            self.typeName()
            self.state = 590
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ParaCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 601
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__7, ParaCParser.T__8, ParaCParser.Inline, ParaCParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.gccAttributeSpecifier()
                pass
            elif token in [ParaCParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 596
                self.match(ParaCParser.T__9)
                self.state = 597
                self.match(ParaCParser.LeftParen)
                self.state = 598
                self.match(ParaCParser.Identifier)
                self.state = 599
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Entry]:
                self.enterOuterAlt(localctx, 4)
                self.state = 600
                self.entryPointSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(ParaCParser.Alignas)
            self.state = 604
            self.match(ParaCParser.LeftParen)
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 605
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 606
                self.constantExpression()
                pass


            self.state = 609
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 611
                self.pointer()


            self.state = 614
            self.directDeclarator(0)
            self.state = 618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 615
                    self.gccDeclaratorExtension() 
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 622
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 623
                self.match(ParaCParser.LeftParen)
                self.state = 624
                self.declarator()
                self.state = 625
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 627
                self.match(ParaCParser.Identifier)
                self.state = 628
                self.match(ParaCParser.Colon)
                self.state = 629
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 630
                self.match(ParaCParser.LeftParen)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 631
                    self.typeSpecifier(0)


                self.state = 634
                self.pointer()
                self.state = 635
                self.directDeclarator(0)
                self.state = 636
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 685
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 683
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 640
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 641
                        self.match(ParaCParser.LeftBracket)
                        self.state = 643
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 642
                            self.typeQualifierList()


                        self.state = 646
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                            self.state = 645
                            self.assignmentExpression()


                        self.state = 648
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 649
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 650
                        self.match(ParaCParser.LeftBracket)
                        self.state = 651
                        self.match(ParaCParser.Static)
                        self.state = 653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 652
                            self.typeQualifierList()


                        self.state = 655
                        self.assignmentExpression()
                        self.state = 656
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 658
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 659
                        self.match(ParaCParser.LeftBracket)
                        self.state = 660
                        self.typeQualifierList()
                        self.state = 661
                        self.match(ParaCParser.Static)
                        self.state = 662
                        self.assignmentExpression()
                        self.state = 663
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 665
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 666
                        self.match(ParaCParser.LeftBracket)
                        self.state = 668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 667
                            self.typeQualifierList()


                        self.state = 670
                        self.match(ParaCParser.Star)
                        self.state = 671
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 672
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 673
                        self.match(ParaCParser.LeftParen)
                        self.state = 674
                        self.parameterTypeList()
                        self.state = 675
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 677
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 678
                        self.match(ParaCParser.LeftParen)
                        self.state = 680
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 679
                            self.identifierList()


                        self.state = 682
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = ParaCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.match(ParaCParser.T__10)
                self.state = 689
                self.match(ParaCParser.LeftParen)
                self.state = 691 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 690
                    self.match(ParaCParser.StringLiteral)
                    self.state = 693 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ParaCParser.StringLiteral):
                        break

                self.state = 695
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = ParaCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(ParaCParser.T__11)
            self.state = 700
            self.match(ParaCParser.LeftParen)
            self.state = 701
            self.match(ParaCParser.LeftParen)
            self.state = 702
            self.gccAttributeList()
            self.state = 703
            self.match(ParaCParser.RightParen)
            self.state = 704
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = ParaCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (ParaCParser.T__0 - 1)) | (1 << (ParaCParser.T__1 - 1)) | (1 << (ParaCParser.T__2 - 1)) | (1 << (ParaCParser.T__3 - 1)) | (1 << (ParaCParser.T__4 - 1)) | (1 << (ParaCParser.T__5 - 1)) | (1 << (ParaCParser.T__6 - 1)) | (1 << (ParaCParser.T__7 - 1)) | (1 << (ParaCParser.T__8 - 1)) | (1 << (ParaCParser.T__9 - 1)) | (1 << (ParaCParser.T__10 - 1)) | (1 << (ParaCParser.T__11 - 1)) | (1 << (ParaCParser.T__12 - 1)) | (1 << (ParaCParser.T__13 - 1)) | (1 << (ParaCParser.Auto - 1)) | (1 << (ParaCParser.Break - 1)) | (1 << (ParaCParser.Case - 1)) | (1 << (ParaCParser.Char - 1)) | (1 << (ParaCParser.Const - 1)) | (1 << (ParaCParser.Continue - 1)) | (1 << (ParaCParser.Default - 1)) | (1 << (ParaCParser.Do - 1)) | (1 << (ParaCParser.Double - 1)) | (1 << (ParaCParser.Else - 1)) | (1 << (ParaCParser.Entry - 1)) | (1 << (ParaCParser.Enum - 1)) | (1 << (ParaCParser.Extern - 1)) | (1 << (ParaCParser.Float - 1)) | (1 << (ParaCParser.For - 1)) | (1 << (ParaCParser.Goto - 1)) | (1 << (ParaCParser.If - 1)) | (1 << (ParaCParser.Inline - 1)) | (1 << (ParaCParser.Int - 1)) | (1 << (ParaCParser.Long - 1)) | (1 << (ParaCParser.Register - 1)) | (1 << (ParaCParser.Restrict - 1)) | (1 << (ParaCParser.Return - 1)) | (1 << (ParaCParser.Short - 1)) | (1 << (ParaCParser.Signed - 1)) | (1 << (ParaCParser.Sizeof - 1)) | (1 << (ParaCParser.Static - 1)) | (1 << (ParaCParser.Status - 1)) | (1 << (ParaCParser.Struct - 1)) | (1 << (ParaCParser.Switch - 1)) | (1 << (ParaCParser.Typedef - 1)) | (1 << (ParaCParser.Union - 1)) | (1 << (ParaCParser.Unsigned - 1)) | (1 << (ParaCParser.Void - 1)) | (1 << (ParaCParser.Volatile - 1)) | (1 << (ParaCParser.While - 1)) | (1 << (ParaCParser.Alignas - 1)) | (1 << (ParaCParser.Alignof - 1)) | (1 << (ParaCParser.Atomic - 1)) | (1 << (ParaCParser.Bool - 1)) | (1 << (ParaCParser.Complex - 1)) | (1 << (ParaCParser.Generic - 1)) | (1 << (ParaCParser.Imaginary - 1)) | (1 << (ParaCParser.Noreturn - 1)) | (1 << (ParaCParser.StaticAssert - 1)) | (1 << (ParaCParser.ThreadLocal - 1)) | (1 << (ParaCParser.LeftBracket - 1)) | (1 << (ParaCParser.RightBracket - 1)))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.RightBrace - 65)) | (1 << (ParaCParser.Less - 65)) | (1 << (ParaCParser.LessEqual - 65)) | (1 << (ParaCParser.Greater - 65)) | (1 << (ParaCParser.GreaterEqual - 65)) | (1 << (ParaCParser.LeftShift - 65)) | (1 << (ParaCParser.RightShift - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.Div - 65)) | (1 << (ParaCParser.Mod - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.Or - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.OrOr - 65)) | (1 << (ParaCParser.Caret - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Question - 65)) | (1 << (ParaCParser.Colon - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Assign - 65)) | (1 << (ParaCParser.StarAssign - 65)) | (1 << (ParaCParser.DivAssign - 65)) | (1 << (ParaCParser.ModAssign - 65)) | (1 << (ParaCParser.PlusAssign - 65)) | (1 << (ParaCParser.MinusAssign - 65)) | (1 << (ParaCParser.LeftShiftAssign - 65)) | (1 << (ParaCParser.RightShiftAssign - 65)) | (1 << (ParaCParser.AndAssign - 65)) | (1 << (ParaCParser.XorAssign - 65)) | (1 << (ParaCParser.OrAssign - 65)) | (1 << (ParaCParser.Equal - 65)) | (1 << (ParaCParser.NotEqual - 65)) | (1 << (ParaCParser.Arrow - 65)) | (1 << (ParaCParser.Dot - 65)) | (1 << (ParaCParser.Ellipsis - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.FileComment - 65)) | (1 << (ParaCParser.IfNotDefinedDirective - 65)) | (1 << (ParaCParser.IfDefinedDirective - 65)) | (1 << (ParaCParser.IfDirective - 65)) | (1 << (ParaCParser.ElifDirective - 65)) | (1 << (ParaCParser.ElseDirective - 65)) | (1 << (ParaCParser.EndifDirective - 65)) | (1 << (ParaCParser.PragmaDirective - 65)) | (1 << (ParaCParser.UndefDirective - 65)) | (1 << (ParaCParser.ComplexDefineDirective - 65)) | (1 << (ParaCParser.ComputedIncludeLiteral - 65)) | (1 << (ParaCParser.LibIncludeLiteral - 65)) | (1 << (ParaCParser.StringIncludeLiteral - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)) | (1 << (ParaCParser.AsmBlock - 65)) | (1 << (ParaCParser.LineAfterPreprocessing - 65)) | (1 << (ParaCParser.LineDirective - 65)) | (1 << (ParaCParser.Whitespace - 65)) | (1 << (ParaCParser.Newline - 65)))) != 0):
                self.state = 706
                self.gccAttribute()


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 709
                self.match(ParaCParser.Comma)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (ParaCParser.T__0 - 1)) | (1 << (ParaCParser.T__1 - 1)) | (1 << (ParaCParser.T__2 - 1)) | (1 << (ParaCParser.T__3 - 1)) | (1 << (ParaCParser.T__4 - 1)) | (1 << (ParaCParser.T__5 - 1)) | (1 << (ParaCParser.T__6 - 1)) | (1 << (ParaCParser.T__7 - 1)) | (1 << (ParaCParser.T__8 - 1)) | (1 << (ParaCParser.T__9 - 1)) | (1 << (ParaCParser.T__10 - 1)) | (1 << (ParaCParser.T__11 - 1)) | (1 << (ParaCParser.T__12 - 1)) | (1 << (ParaCParser.T__13 - 1)) | (1 << (ParaCParser.Auto - 1)) | (1 << (ParaCParser.Break - 1)) | (1 << (ParaCParser.Case - 1)) | (1 << (ParaCParser.Char - 1)) | (1 << (ParaCParser.Const - 1)) | (1 << (ParaCParser.Continue - 1)) | (1 << (ParaCParser.Default - 1)) | (1 << (ParaCParser.Do - 1)) | (1 << (ParaCParser.Double - 1)) | (1 << (ParaCParser.Else - 1)) | (1 << (ParaCParser.Entry - 1)) | (1 << (ParaCParser.Enum - 1)) | (1 << (ParaCParser.Extern - 1)) | (1 << (ParaCParser.Float - 1)) | (1 << (ParaCParser.For - 1)) | (1 << (ParaCParser.Goto - 1)) | (1 << (ParaCParser.If - 1)) | (1 << (ParaCParser.Inline - 1)) | (1 << (ParaCParser.Int - 1)) | (1 << (ParaCParser.Long - 1)) | (1 << (ParaCParser.Register - 1)) | (1 << (ParaCParser.Restrict - 1)) | (1 << (ParaCParser.Return - 1)) | (1 << (ParaCParser.Short - 1)) | (1 << (ParaCParser.Signed - 1)) | (1 << (ParaCParser.Sizeof - 1)) | (1 << (ParaCParser.Static - 1)) | (1 << (ParaCParser.Status - 1)) | (1 << (ParaCParser.Struct - 1)) | (1 << (ParaCParser.Switch - 1)) | (1 << (ParaCParser.Typedef - 1)) | (1 << (ParaCParser.Union - 1)) | (1 << (ParaCParser.Unsigned - 1)) | (1 << (ParaCParser.Void - 1)) | (1 << (ParaCParser.Volatile - 1)) | (1 << (ParaCParser.While - 1)) | (1 << (ParaCParser.Alignas - 1)) | (1 << (ParaCParser.Alignof - 1)) | (1 << (ParaCParser.Atomic - 1)) | (1 << (ParaCParser.Bool - 1)) | (1 << (ParaCParser.Complex - 1)) | (1 << (ParaCParser.Generic - 1)) | (1 << (ParaCParser.Imaginary - 1)) | (1 << (ParaCParser.Noreturn - 1)) | (1 << (ParaCParser.StaticAssert - 1)) | (1 << (ParaCParser.ThreadLocal - 1)) | (1 << (ParaCParser.LeftBracket - 1)) | (1 << (ParaCParser.RightBracket - 1)))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.RightBrace - 65)) | (1 << (ParaCParser.Less - 65)) | (1 << (ParaCParser.LessEqual - 65)) | (1 << (ParaCParser.Greater - 65)) | (1 << (ParaCParser.GreaterEqual - 65)) | (1 << (ParaCParser.LeftShift - 65)) | (1 << (ParaCParser.RightShift - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.Div - 65)) | (1 << (ParaCParser.Mod - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.Or - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.OrOr - 65)) | (1 << (ParaCParser.Caret - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Question - 65)) | (1 << (ParaCParser.Colon - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Assign - 65)) | (1 << (ParaCParser.StarAssign - 65)) | (1 << (ParaCParser.DivAssign - 65)) | (1 << (ParaCParser.ModAssign - 65)) | (1 << (ParaCParser.PlusAssign - 65)) | (1 << (ParaCParser.MinusAssign - 65)) | (1 << (ParaCParser.LeftShiftAssign - 65)) | (1 << (ParaCParser.RightShiftAssign - 65)) | (1 << (ParaCParser.AndAssign - 65)) | (1 << (ParaCParser.XorAssign - 65)) | (1 << (ParaCParser.OrAssign - 65)) | (1 << (ParaCParser.Equal - 65)) | (1 << (ParaCParser.NotEqual - 65)) | (1 << (ParaCParser.Arrow - 65)) | (1 << (ParaCParser.Dot - 65)) | (1 << (ParaCParser.Ellipsis - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.FileComment - 65)) | (1 << (ParaCParser.IfNotDefinedDirective - 65)) | (1 << (ParaCParser.IfDefinedDirective - 65)) | (1 << (ParaCParser.IfDirective - 65)) | (1 << (ParaCParser.ElifDirective - 65)) | (1 << (ParaCParser.ElseDirective - 65)) | (1 << (ParaCParser.EndifDirective - 65)) | (1 << (ParaCParser.PragmaDirective - 65)) | (1 << (ParaCParser.UndefDirective - 65)) | (1 << (ParaCParser.ComplexDefineDirective - 65)) | (1 << (ParaCParser.ComputedIncludeLiteral - 65)) | (1 << (ParaCParser.LibIncludeLiteral - 65)) | (1 << (ParaCParser.StringIncludeLiteral - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)) | (1 << (ParaCParser.AsmBlock - 65)) | (1 << (ParaCParser.LineAfterPreprocessing - 65)) | (1 << (ParaCParser.LineDirective - 65)) | (1 << (ParaCParser.Whitespace - 65)) | (1 << (ParaCParser.Newline - 65)))) != 0):
                    self.state = 710
                    self.gccAttribute()


                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = ParaCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.RightParen - 61)) | (1 << (ParaCParser.Comma - 61)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftParen:
                self.state = 719
                self.match(ParaCParser.LeftParen)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 720
                    self.argumentExpressionList()


                self.state = 723
                self.match(ParaCParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (ParaCParser.T__0 - 1)) | (1 << (ParaCParser.T__1 - 1)) | (1 << (ParaCParser.T__2 - 1)) | (1 << (ParaCParser.T__3 - 1)) | (1 << (ParaCParser.T__4 - 1)) | (1 << (ParaCParser.T__5 - 1)) | (1 << (ParaCParser.T__6 - 1)) | (1 << (ParaCParser.T__7 - 1)) | (1 << (ParaCParser.T__8 - 1)) | (1 << (ParaCParser.T__9 - 1)) | (1 << (ParaCParser.T__10 - 1)) | (1 << (ParaCParser.T__11 - 1)) | (1 << (ParaCParser.T__12 - 1)) | (1 << (ParaCParser.T__13 - 1)) | (1 << (ParaCParser.Auto - 1)) | (1 << (ParaCParser.Break - 1)) | (1 << (ParaCParser.Case - 1)) | (1 << (ParaCParser.Char - 1)) | (1 << (ParaCParser.Const - 1)) | (1 << (ParaCParser.Continue - 1)) | (1 << (ParaCParser.Default - 1)) | (1 << (ParaCParser.Do - 1)) | (1 << (ParaCParser.Double - 1)) | (1 << (ParaCParser.Else - 1)) | (1 << (ParaCParser.Entry - 1)) | (1 << (ParaCParser.Enum - 1)) | (1 << (ParaCParser.Extern - 1)) | (1 << (ParaCParser.Float - 1)) | (1 << (ParaCParser.For - 1)) | (1 << (ParaCParser.Goto - 1)) | (1 << (ParaCParser.If - 1)) | (1 << (ParaCParser.Inline - 1)) | (1 << (ParaCParser.Int - 1)) | (1 << (ParaCParser.Long - 1)) | (1 << (ParaCParser.Register - 1)) | (1 << (ParaCParser.Restrict - 1)) | (1 << (ParaCParser.Return - 1)) | (1 << (ParaCParser.Short - 1)) | (1 << (ParaCParser.Signed - 1)) | (1 << (ParaCParser.Sizeof - 1)) | (1 << (ParaCParser.Static - 1)) | (1 << (ParaCParser.Status - 1)) | (1 << (ParaCParser.Struct - 1)) | (1 << (ParaCParser.Switch - 1)) | (1 << (ParaCParser.Typedef - 1)) | (1 << (ParaCParser.Union - 1)) | (1 << (ParaCParser.Unsigned - 1)) | (1 << (ParaCParser.Void - 1)) | (1 << (ParaCParser.Volatile - 1)) | (1 << (ParaCParser.While - 1)) | (1 << (ParaCParser.Alignas - 1)) | (1 << (ParaCParser.Alignof - 1)) | (1 << (ParaCParser.Atomic - 1)) | (1 << (ParaCParser.Bool - 1)) | (1 << (ParaCParser.Complex - 1)) | (1 << (ParaCParser.Generic - 1)) | (1 << (ParaCParser.Imaginary - 1)) | (1 << (ParaCParser.Noreturn - 1)) | (1 << (ParaCParser.StaticAssert - 1)) | (1 << (ParaCParser.ThreadLocal - 1)) | (1 << (ParaCParser.LeftParen - 1)) | (1 << (ParaCParser.LeftBracket - 1)) | (1 << (ParaCParser.RightBracket - 1)))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.RightBrace - 65)) | (1 << (ParaCParser.Less - 65)) | (1 << (ParaCParser.LessEqual - 65)) | (1 << (ParaCParser.Greater - 65)) | (1 << (ParaCParser.GreaterEqual - 65)) | (1 << (ParaCParser.LeftShift - 65)) | (1 << (ParaCParser.RightShift - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.Div - 65)) | (1 << (ParaCParser.Mod - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.Or - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.OrOr - 65)) | (1 << (ParaCParser.Caret - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Question - 65)) | (1 << (ParaCParser.Colon - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Comma - 65)) | (1 << (ParaCParser.Assign - 65)) | (1 << (ParaCParser.StarAssign - 65)) | (1 << (ParaCParser.DivAssign - 65)) | (1 << (ParaCParser.ModAssign - 65)) | (1 << (ParaCParser.PlusAssign - 65)) | (1 << (ParaCParser.MinusAssign - 65)) | (1 << (ParaCParser.LeftShiftAssign - 65)) | (1 << (ParaCParser.RightShiftAssign - 65)) | (1 << (ParaCParser.AndAssign - 65)) | (1 << (ParaCParser.XorAssign - 65)) | (1 << (ParaCParser.OrAssign - 65)) | (1 << (ParaCParser.Equal - 65)) | (1 << (ParaCParser.NotEqual - 65)) | (1 << (ParaCParser.Arrow - 65)) | (1 << (ParaCParser.Dot - 65)) | (1 << (ParaCParser.Ellipsis - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.FileComment - 65)) | (1 << (ParaCParser.IfNotDefinedDirective - 65)) | (1 << (ParaCParser.IfDefinedDirective - 65)) | (1 << (ParaCParser.IfDirective - 65)) | (1 << (ParaCParser.ElifDirective - 65)) | (1 << (ParaCParser.ElseDirective - 65)) | (1 << (ParaCParser.EndifDirective - 65)) | (1 << (ParaCParser.PragmaDirective - 65)) | (1 << (ParaCParser.UndefDirective - 65)) | (1 << (ParaCParser.ComplexDefineDirective - 65)) | (1 << (ParaCParser.ComputedIncludeLiteral - 65)) | (1 << (ParaCParser.LibIncludeLiteral - 65)) | (1 << (ParaCParser.StringIncludeLiteral - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)) | (1 << (ParaCParser.AsmBlock - 65)) | (1 << (ParaCParser.LineAfterPreprocessing - 65)) | (1 << (ParaCParser.LineDirective - 65)) | (1 << (ParaCParser.Whitespace - 65)) | (1 << (ParaCParser.Newline - 65)))) != 0):
                self.state = 731
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__10, ParaCParser.T__11, ParaCParser.T__12, ParaCParser.T__13, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Generic, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.FileComment, ParaCParser.IfNotDefinedDirective, ParaCParser.IfDefinedDirective, ParaCParser.IfDirective, ParaCParser.ElifDirective, ParaCParser.ElseDirective, ParaCParser.EndifDirective, ParaCParser.PragmaDirective, ParaCParser.UndefDirective, ParaCParser.ComplexDefineDirective, ParaCParser.ComputedIncludeLiteral, ParaCParser.LibIncludeLiteral, ParaCParser.StringIncludeLiteral, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.AsmBlock, ParaCParser.LineAfterPreprocessing, ParaCParser.LineDirective, ParaCParser.Whitespace, ParaCParser.Newline]:
                    self.state = 726
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [ParaCParser.LeftParen]:
                    self.state = 727
                    self.match(ParaCParser.LeftParen)
                    self.state = 728
                    self.nestedParenthesesBlock()
                    self.state = 729
                    self.match(ParaCParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 736
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 738
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        self.state = 737
                        self.typeQualifierList()



                else:
                    raise NoViableAltException(self)
                self.state = 742 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 744
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 747 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.parameterList()
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 750
                self.match(ParaCParser.Comma)
                self.state = 751
                self.match(ParaCParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.parameterDeclaration()
            self.state = 759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 755
                    self.match(ParaCParser.Comma)
                    self.state = 756
                    self.parameterDeclaration() 
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.declarationSpecifiers()
                self.state = 763
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.declarationSpecifiers2()
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.LeftBracket - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)))) != 0):
                    self.state = 766
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(ParaCParser.Identifier)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 772
                self.match(ParaCParser.Comma)
                self.state = 773
                self.match(ParaCParser.Identifier)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.specifierQualifierList()
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.LeftBracket - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)))) != 0):
                self.state = 780
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 784
                    self.pointer()


                self.state = 787
                self.directAbstractDeclarator(0)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.T__10 or _la==ParaCParser.T__11:
                    self.state = 788
                    self.gccDeclaratorExtension()
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 797
                self.match(ParaCParser.LeftParen)
                self.state = 798
                self.abstractDeclarator()
                self.state = 799
                self.match(ParaCParser.RightParen)
                self.state = 803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 800
                        self.gccDeclaratorExtension() 
                    self.state = 805
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 2:
                self.state = 806
                self.match(ParaCParser.LeftBracket)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 807
                    self.typeQualifierList()


                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 810
                    self.assignmentExpression()


                self.state = 813
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 814
                self.match(ParaCParser.LeftBracket)
                self.state = 815
                self.match(ParaCParser.Static)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 816
                    self.typeQualifierList()


                self.state = 819
                self.assignmentExpression()
                self.state = 820
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 822
                self.match(ParaCParser.LeftBracket)
                self.state = 823
                self.typeQualifierList()
                self.state = 824
                self.match(ParaCParser.Static)
                self.state = 825
                self.assignmentExpression()
                self.state = 826
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 828
                self.match(ParaCParser.LeftBracket)
                self.state = 829
                self.match(ParaCParser.Star)
                self.state = 830
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 831
                self.match(ParaCParser.LeftParen)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 832
                    self.parameterTypeList()


                self.state = 835
                self.match(ParaCParser.RightParen)
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 836
                        self.gccDeclaratorExtension() 
                    self.state = 841
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 885
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 844
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 845
                        self.match(ParaCParser.LeftBracket)
                        self.state = 847
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 846
                            self.typeQualifierList()


                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                            self.state = 849
                            self.assignmentExpression()


                        self.state = 852
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 853
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 854
                        self.match(ParaCParser.LeftBracket)
                        self.state = 855
                        self.match(ParaCParser.Static)
                        self.state = 857
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 856
                            self.typeQualifierList()


                        self.state = 859
                        self.assignmentExpression()
                        self.state = 860
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 862
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 863
                        self.match(ParaCParser.LeftBracket)
                        self.state = 864
                        self.typeQualifierList()
                        self.state = 865
                        self.match(ParaCParser.Static)
                        self.state = 866
                        self.assignmentExpression()
                        self.state = 867
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 869
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 870
                        self.match(ParaCParser.LeftBracket)
                        self.state = 871
                        self.match(ParaCParser.Star)
                        self.state = 872
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 873
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 874
                        self.match(ParaCParser.LeftParen)
                        self.state = 876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                            self.state = 875
                            self.parameterTypeList()


                        self.state = 878
                        self.match(ParaCParser.RightParen)
                        self.state = 882
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 879
                                self.gccDeclaratorExtension() 
                            self.state = 884
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                        pass

             
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Sizeof, ParaCParser.Alignof, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 892
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(ParaCParser.LeftBrace)
                self.state = 894
                self.initializerList()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 895
                    self.match(ParaCParser.Comma)


                self.state = 898
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 902
                self.designation()


            self.state = 905
            self.initializer()
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(ParaCParser.Comma)
                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 907
                        self.designation()


                    self.state = 910
                    self.initializer() 
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.designatorList()
            self.state = 917
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 919
                self.designator()
                self.state = 922 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_designator)
        try:
            self.state = 930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(ParaCParser.LeftBracket)
                self.state = 925
                self.constantExpression()
                self.state = 926
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(ParaCParser.Dot)
                self.state = 929
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(ParaCParser.StaticAssert)
            self.state = 933
            self.match(ParaCParser.LeftParen)
            self.state = 934
            self.constantExpression()
            self.state = 935
            self.match(ParaCParser.Comma)
            self.state = 937 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 936
                self.match(ParaCParser.StringLiteral)
                self.state = 939 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 941
            self.match(ParaCParser.RightParen)
            self.state = 942
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 946
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 947
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 948
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 949
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 950
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__10 or _la==ParaCParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 951
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__13 or _la==ParaCParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 952
                self.match(ParaCParser.LeftParen)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 953
                    self.logicalOrExpression()
                    self.state = 958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 954
                        self.match(ParaCParser.Comma)
                        self.state = 955
                        self.logicalOrExpression()
                        self.state = 960
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 963
                    self.match(ParaCParser.Colon)
                    self.state = 972
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                        self.state = 964
                        self.logicalOrExpression()
                        self.state = 969
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 965
                            self.match(ParaCParser.Comma)
                            self.state = 966
                            self.logicalOrExpression()
                            self.state = 971
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 979
                self.match(ParaCParser.RightParen)
                self.state = 980
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_labeledStatement)
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.match(ParaCParser.Identifier)
                self.state = 984
                self.match(ParaCParser.Colon)
                self.state = 985
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.match(ParaCParser.Case)
                self.state = 987
                self.constantExpression()
                self.state = 988
                self.match(ParaCParser.Colon)
                self.state = 989
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 991
                self.match(ParaCParser.Default)
                self.state = 992
                self.match(ParaCParser.Colon)
                self.state = 993
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(ParaCParser.LeftBrace)
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.IfNotDefinedDirective - 65)) | (1 << (ParaCParser.IfDefinedDirective - 65)) | (1 << (ParaCParser.IfDirective - 65)) | (1 << (ParaCParser.PragmaDirective - 65)) | (1 << (ParaCParser.UndefDirective - 65)) | (1 << (ParaCParser.ComplexDefineDirective - 65)) | (1 << (ParaCParser.ComputedIncludeLiteral - 65)) | (1 << (ParaCParser.LibIncludeLiteral - 65)) | (1 << (ParaCParser.StringIncludeLiteral - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                self.state = 997
                self.blockItemList()


            self.state = 1000
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1002
                self.blockItem()
                self.state = 1005 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.IfNotDefinedDirective - 65)) | (1 << (ParaCParser.IfDefinedDirective - 65)) | (1 << (ParaCParser.IfDirective - 65)) | (1 << (ParaCParser.PragmaDirective - 65)) | (1 << (ParaCParser.UndefDirective - 65)) | (1 << (ParaCParser.ComplexDefineDirective - 65)) | (1 << (ParaCParser.ComputedIncludeLiteral - 65)) | (1 << (ParaCParser.LibIncludeLiteral - 65)) | (1 << (ParaCParser.StringIncludeLiteral - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def preProcessorDirective(self):
            return self.getTypedRuleContext(ParaCParser.PreProcessorDirectiveContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_blockItem)
        try:
            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1009
                self.preProcessorDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                self.state = 1012
                self.expression()


            self.state = 1015
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_selectionStatement)
        try:
            self.state = 1032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.match(ParaCParser.If)
                self.state = 1018
                self.match(ParaCParser.LeftParen)
                self.state = 1019
                self.expression()
                self.state = 1020
                self.match(ParaCParser.RightParen)
                self.state = 1021
                self.statement()
                self.state = 1024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1022
                    self.match(ParaCParser.Else)
                    self.state = 1023
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.match(ParaCParser.Switch)
                self.state = 1027
                self.match(ParaCParser.LeftParen)
                self.state = 1028
                self.expression()
                self.state = 1029
                self.match(ParaCParser.RightParen)
                self.state = 1030
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_iterationStatement)
        try:
            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.match(ParaCParser.While)
                self.state = 1035
                self.match(ParaCParser.LeftParen)
                self.state = 1036
                self.expression()
                self.state = 1037
                self.match(ParaCParser.RightParen)
                self.state = 1038
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.match(ParaCParser.Do)
                self.state = 1041
                self.statement()
                self.state = 1042
                self.match(ParaCParser.While)
                self.state = 1043
                self.match(ParaCParser.LeftParen)
                self.state = 1044
                self.expression()
                self.state = 1045
                self.match(ParaCParser.RightParen)
                self.state = 1046
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1048
                self.match(ParaCParser.For)
                self.state = 1049
                self.match(ParaCParser.LeftParen)
                self.state = 1050
                self.forCondition()
                self.state = 1051
                self.match(ParaCParser.RightParen)
                self.state = 1052
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Semi)
            else:
                return self.getToken(ParaCParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 1057
                    self.expression()


                pass


            self.state = 1062
            self.match(ParaCParser.Semi)
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                self.state = 1063
                self.forExpression()


            self.state = 1066
            self.match(ParaCParser.Semi)
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                self.state = 1067
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.declarationSpecifiers()
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                self.state = 1071
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.assignmentExpression()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1075
                self.match(ParaCParser.Comma)
                self.state = 1076
                self.assignmentExpression()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1082
                self.match(ParaCParser.Goto)
                self.state = 1083
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1084
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1085
                self.match(ParaCParser.Return)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 1086
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1089
                self.match(ParaCParser.Goto)
                self.state = 1090
                self.unaryExpression()
                pass


            self.state = 1093
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Caret - 77)) | (1 << (ParaCParser.Semi - 77)) | (1 << (ParaCParser.Identifier - 77)) | (1 << (ParaCParser.IfNotDefinedDirective - 77)) | (1 << (ParaCParser.IfDefinedDirective - 77)) | (1 << (ParaCParser.IfDirective - 77)) | (1 << (ParaCParser.PragmaDirective - 77)) | (1 << (ParaCParser.UndefDirective - 77)) | (1 << (ParaCParser.ComplexDefineDirective - 77)) | (1 << (ParaCParser.ComputedIncludeLiteral - 77)) | (1 << (ParaCParser.LibIncludeLiteral - 77)) | (1 << (ParaCParser.StringIncludeLiteral - 77)))) != 0):
                self.state = 1095
                self.translationUnit()


            self.state = 1098
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1100
                self.externalItem()
                self.state = 1103 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Caret - 77)) | (1 << (ParaCParser.Semi - 77)) | (1 << (ParaCParser.Identifier - 77)) | (1 << (ParaCParser.IfNotDefinedDirective - 77)) | (1 << (ParaCParser.IfDefinedDirective - 77)) | (1 << (ParaCParser.IfDirective - 77)) | (1 << (ParaCParser.PragmaDirective - 77)) | (1 << (ParaCParser.UndefDirective - 77)) | (1 << (ParaCParser.ComplexDefineDirective - 77)) | (1 << (ParaCParser.ComputedIncludeLiteral - 77)) | (1 << (ParaCParser.LibIncludeLiteral - 77)) | (1 << (ParaCParser.StringIncludeLiteral - 77)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ExternalDeclarationContext,0)


        def preProcessorDirective(self):
            return self.getTypedRuleContext(ParaCParser.PreProcessorDirectiveContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_externalItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalItem" ):
                listener.enterExternalItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalItem" ):
                listener.exitExternalItem(self)




    def externalItem(self):

        localctx = ParaCParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_externalItem)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftParen, ParaCParser.Star, ParaCParser.Caret, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.externalDeclaration()
                pass
            elif token in [ParaCParser.IfNotDefinedDirective, ParaCParser.IfDefinedDirective, ParaCParser.IfDirective, ParaCParser.PragmaDirective, ParaCParser.UndefDirective, ParaCParser.ComplexDefineDirective, ParaCParser.ComputedIncludeLiteral, ParaCParser.LibIncludeLiteral, ParaCParser.StringIncludeLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.preProcessorDirective()
                pass
            elif token in [ParaCParser.Semi]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1107
                self.match(ParaCParser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_externalDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExtDeclarationContext(ExternalDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtDeclaration" ):
                listener.enterExtDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtDeclaration" ):
                listener.exitExtDeclaration(self)


    class ExtFunctionDefinitionContext(ExternalDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtFunctionDefinition" ):
                listener.enterExtFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtFunctionDefinition" ):
                listener.exitExtFunctionDefinition(self)



    def externalDeclaration(self):

        localctx = ParaCParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_externalDeclaration)
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.ExtFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.functionDefinition()
                pass

            elif la_ == 2:
                localctx = ParaCParser.ExtDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreProcessorDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def includeDirective(self):
            return self.getTypedRuleContext(ParaCParser.IncludeDirectiveContext,0)


        def computedIncludeDirective(self):
            return self.getTypedRuleContext(ParaCParser.ComputedIncludeDirectiveContext,0)


        def logicalPreProcessorDirective(self):
            return self.getTypedRuleContext(ParaCParser.LogicalPreProcessorDirectiveContext,0)


        def ComplexDefineDirective(self):
            return self.getToken(ParaCParser.ComplexDefineDirective, 0)

        def PragmaDirective(self):
            return self.getToken(ParaCParser.PragmaDirective, 0)

        def UndefDirective(self):
            return self.getToken(ParaCParser.UndefDirective, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_preProcessorDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreProcessorDirective" ):
                listener.enterPreProcessorDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreProcessorDirective" ):
                listener.exitPreProcessorDirective(self)




    def preProcessorDirective(self):

        localctx = ParaCParser.PreProcessorDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_preProcessorDirective)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.includeDirective()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.computedIncludeDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.logicalPreProcessorDirective()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(ParaCParser.ComplexDefineDirective)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(ParaCParser.PragmaDirective)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1119
                self.match(ParaCParser.UndefDirective)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalPreProcessorDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_logicalPreProcessorDirective

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LogicalIfDirectiveContext(LogicalPreProcessorDirectiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.LogicalPreProcessorDirectiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IfDirective(self):
            return self.getToken(ParaCParser.IfDirective, 0)
        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)

        def logicalDirectiveBlock(self):
            return self.getTypedRuleContext(ParaCParser.LogicalDirectiveBlockContext,0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)
        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalIfDirective" ):
                listener.enterLogicalIfDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalIfDirective" ):
                listener.exitLogicalIfDirective(self)


    class LogicalIfNotDefinedDirectiveContext(LogicalPreProcessorDirectiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.LogicalPreProcessorDirectiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IfNotDefinedDirective(self):
            return self.getToken(ParaCParser.IfNotDefinedDirective, 0)
        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)
        def logicalDirectiveBlock(self):
            return self.getTypedRuleContext(ParaCParser.LogicalDirectiveBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalIfNotDefinedDirective" ):
                listener.enterLogicalIfNotDefinedDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalIfNotDefinedDirective" ):
                listener.exitLogicalIfNotDefinedDirective(self)


    class LogicalIfDefinedDirectiveContext(LogicalPreProcessorDirectiveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.LogicalPreProcessorDirectiveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IfDefinedDirective(self):
            return self.getToken(ParaCParser.IfDefinedDirective, 0)
        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)
        def logicalDirectiveBlock(self):
            return self.getTypedRuleContext(ParaCParser.LogicalDirectiveBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalIfDefinedDirective" ):
                listener.enterLogicalIfDefinedDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalIfDefinedDirective" ):
                listener.exitLogicalIfDefinedDirective(self)



    def logicalPreProcessorDirective(self):

        localctx = ParaCParser.LogicalPreProcessorDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_logicalPreProcessorDirective)
        self._la = 0 # Token type
        try:
            self.state = 1138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.IfDirective]:
                localctx = ParaCParser.LogicalIfDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self.match(ParaCParser.IfDirective)
                self.state = 1124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1123
                    self.match(ParaCParser.LeftParen)


                self.state = 1126
                self.expression()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.RightParen:
                    self.state = 1127
                    self.match(ParaCParser.RightParen)


                self.state = 1130
                self.logicalDirectiveBlock()
                pass
            elif token in [ParaCParser.IfDefinedDirective]:
                localctx = ParaCParser.LogicalIfDefinedDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.match(ParaCParser.IfDefinedDirective)
                self.state = 1133
                self.match(ParaCParser.Identifier)
                self.state = 1134
                self.logicalDirectiveBlock()
                pass
            elif token in [ParaCParser.IfNotDefinedDirective]:
                localctx = ParaCParser.LogicalIfNotDefinedDirectiveContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1135
                self.match(ParaCParser.IfNotDefinedDirective)
                self.state = 1136
                self.match(ParaCParser.Identifier)
                self.state = 1137
                self.logicalDirectiveBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalDirectiveBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preProcessorCompoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.PreProcessorCompoundStatementContext,0)


        def logicalDirectiveAlternatives(self):
            return self.getTypedRuleContext(ParaCParser.LogicalDirectiveAlternativesContext,0)


        def EndifDirective(self):
            return self.getToken(ParaCParser.EndifDirective, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalDirectiveBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalDirectiveBlock" ):
                listener.enterLogicalDirectiveBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalDirectiveBlock" ):
                listener.exitLogicalDirectiveBlock(self)




    def logicalDirectiveBlock(self):

        localctx = ParaCParser.LogicalDirectiveBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_logicalDirectiveBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.preProcessorCompoundStatement()
            self.state = 1141
            self.logicalDirectiveAlternatives()
            self.state = 1142
            self.match(ParaCParser.EndifDirective)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalDirectiveAlternativesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalElifDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalElifDirectiveContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalElifDirectiveContext,i)


        def logicalElseDirective(self):
            return self.getTypedRuleContext(ParaCParser.LogicalElseDirectiveContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_logicalDirectiveAlternatives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalDirectiveAlternatives" ):
                listener.enterLogicalDirectiveAlternatives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalDirectiveAlternatives" ):
                listener.exitLogicalDirectiveAlternatives(self)




    def logicalDirectiveAlternatives(self):

        localctx = ParaCParser.LogicalDirectiveAlternativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_logicalDirectiveAlternatives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.ElifDirective:
                self.state = 1144
                self.logicalElifDirective()
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.ElseDirective:
                self.state = 1150
                self.logicalElseDirective()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalElifDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElifDirective(self):
            return self.getToken(ParaCParser.ElifDirective, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def preProcessorCompoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.PreProcessorCompoundStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalElifDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalElifDirective" ):
                listener.enterLogicalElifDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalElifDirective" ):
                listener.exitLogicalElifDirective(self)




    def logicalElifDirective(self):

        localctx = ParaCParser.LogicalElifDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_logicalElifDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(ParaCParser.ElifDirective)
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1154
                self.match(ParaCParser.LeftParen)


            self.state = 1157
            self.expression()
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.RightParen:
                self.state = 1158
                self.match(ParaCParser.RightParen)


            self.state = 1161
            self.preProcessorCompoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalElseDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseDirective(self):
            return self.getToken(ParaCParser.ElseDirective, 0)

        def preProcessorCompoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.PreProcessorCompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_logicalElseDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalElseDirective" ):
                listener.enterLogicalElseDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalElseDirective" ):
                listener.exitLogicalElseDirective(self)




    def logicalElseDirective(self):

        localctx = ParaCParser.LogicalElseDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_logicalElseDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(ParaCParser.ElseDirective)
            self.state = 1164
            self.preProcessorCompoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreProcessorCompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def logicalPreProcessorDirective(self):
            return self.getTypedRuleContext(ParaCParser.LogicalPreProcessorDirectiveContext,0)


        def preProcessorDirective(self):
            return self.getTypedRuleContext(ParaCParser.PreProcessorDirectiveContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_preProcessorCompoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreProcessorCompoundStatement" ):
                listener.enterPreProcessorCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreProcessorCompoundStatement" ):
                listener.exitPreProcessorCompoundStatement(self)




    def preProcessorCompoundStatement(self):

        localctx = ParaCParser.PreProcessorCompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_preProcessorCompoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.IfNotDefinedDirective - 65)) | (1 << (ParaCParser.IfDefinedDirective - 65)) | (1 << (ParaCParser.IfDirective - 65)) | (1 << (ParaCParser.PragmaDirective - 65)) | (1 << (ParaCParser.UndefDirective - 65)) | (1 << (ParaCParser.ComplexDefineDirective - 65)) | (1 << (ParaCParser.ComputedIncludeLiteral - 65)) | (1 << (ParaCParser.LibIncludeLiteral - 65)) | (1 << (ParaCParser.StringIncludeLiteral - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                self.state = 1169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1166
                    self.blockItemList()
                    pass

                elif la_ == 2:
                    self.state = 1167
                    self.logicalPreProcessorDirective()
                    pass

                elif la_ == 3:
                    self.state = 1168
                    self.preProcessorDirective()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileIncludeDirective(self):
            return self.getTypedRuleContext(ParaCParser.FileIncludeDirectiveContext,0)


        def computedIncludeDirective(self):
            return self.getTypedRuleContext(ParaCParser.ComputedIncludeDirectiveContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_includeDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeDirective" ):
                listener.enterIncludeDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeDirective" ):
                listener.exitIncludeDirective(self)




    def includeDirective(self):

        localctx = ParaCParser.IncludeDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_includeDirective)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LibIncludeLiteral, ParaCParser.StringIncludeLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.fileIncludeDirective()
                pass
            elif token in [ParaCParser.ComputedIncludeLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.computedIncludeDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIncludeDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LibIncludeLiteral(self):
            return self.getToken(ParaCParser.LibIncludeLiteral, 0)

        def StringIncludeLiteral(self):
            return self.getToken(ParaCParser.StringIncludeLiteral, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_fileIncludeDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIncludeDirective" ):
                listener.enterFileIncludeDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIncludeDirective" ):
                listener.exitFileIncludeDirective(self)




    def fileIncludeDirective(self):

        localctx = ParaCParser.FileIncludeDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_fileIncludeDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            _la = self._input.LA(1)
            if not(_la==ParaCParser.LibIncludeLiteral or _la==ParaCParser.StringIncludeLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComputedIncludeDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ComputedIncludeLiteral(self):
            return self.getToken(ParaCParser.ComputedIncludeLiteral, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_computedIncludeDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputedIncludeDirective" ):
                listener.enterComputedIncludeDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputedIncludeDirective" ):
                listener.exitComputedIncludeDirective(self)




    def computedIncludeDirective(self):

        localctx = ParaCParser.ComputedIncludeDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_computedIncludeDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(ParaCParser.ComputedIncludeLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.declarationSpecifiers()


            self.state = 1184
            self.declarator()
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                self.state = 1185
                self.declarationList()


            self.state = 1188
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1190
                self.declaration()
                self.state = 1193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeSpecifier_sempred
        self._predicates[49] = self.directDeclarator_sempred
        self._predicates[63] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




