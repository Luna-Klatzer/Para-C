# Generated from ./paraccompiler/core/antlr4/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3z")
        buf.write("\u0450\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\3\2\3\2\3\2\6\2\u00b6\n\2\r\2\16\2")
        buf.write("\u00b7\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00c0\n\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\5\2\u00d4\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\7\4\u00e0\n\4\f\4\16\4\u00e3\13\4\3\5\3\5\5\5")
        buf.write("\u00e7\n\5\3\5\3\5\3\5\3\6\3\6\5\6\u00ee\n\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u00f6\n\6\3\6\3\6\5\6\u00fa\n\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\5\6\u0102\n\6\3\6\3\6\3\6\3\6\7\6")
        buf.write("\u0108\n\6\f\6\16\6\u010b\13\6\3\7\3\7\3\7\7\7\u0110\n")
        buf.write("\7\f\7\16\7\u0113\13\7\3\b\7\b\u0116\n\b\f\b\16\b\u0119")
        buf.write("\13\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b")
        buf.write("\u0126\n\b\3\t\3\t\3\n\5\n\u012b\n\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u0134\n\n\3\13\3\13\3\13\7\13\u0139\n\13")
        buf.write("\f\13\16\13\u013c\13\13\3\f\3\f\3\f\7\f\u0141\n\f\f\f")
        buf.write("\16\f\u0144\13\f\3\r\3\r\3\r\7\r\u0149\n\r\f\r\16\r\u014c")
        buf.write("\13\r\3\16\3\16\3\16\7\16\u0151\n\16\f\16\16\16\u0154")
        buf.write("\13\16\3\17\3\17\3\17\7\17\u0159\n\17\f\17\16\17\u015c")
        buf.write("\13\17\3\20\3\20\3\20\7\20\u0161\n\20\f\20\16\20\u0164")
        buf.write("\13\20\3\21\3\21\3\21\7\21\u0169\n\21\f\21\16\21\u016c")
        buf.write("\13\21\3\22\3\22\3\22\7\22\u0171\n\22\f\22\16\22\u0174")
        buf.write("\13\22\3\23\3\23\3\23\7\23\u0179\n\23\f\23\16\23\u017c")
        buf.write("\13\23\3\24\3\24\3\24\7\24\u0181\n\24\f\24\16\24\u0184")
        buf.write("\13\24\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u018c\n\25\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\5\26\u0194\n\26\3\27\3\27")
        buf.write("\3\30\3\30\3\30\7\30\u019b\n\30\f\30\16\30\u019e\13\30")
        buf.write("\3\31\3\31\3\32\3\32\5\32\u01a4\n\32\3\32\3\32\3\32\5")
        buf.write("\32\u01a9\n\32\3\33\6\33\u01ac\n\33\r\33\16\33\u01ad\3")
        buf.write("\34\6\34\u01b1\n\34\r\34\16\34\u01b2\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\5\35\u01bb\n\35\3\36\3\36\3\36\7\36\u01c0")
        buf.write("\n\36\f\36\16\36\u01c3\13\36\3\37\3\37\3\37\5\37\u01c8")
        buf.write("\n\37\3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u01dd\n\"\3\"\3\"\7\"\u01e1")
        buf.write("\n\"\f\"\16\"\u01e4\13\"\3#\3#\5#\u01e8\n#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\5#\u01f1\n#\3$\3$\3%\6%\u01f6\n%\r%\16%\u01f7")
        buf.write("\3&\3&\5&\u01fc\n&\3&\3&\3&\5&\u0201\n&\3\'\3\'\5\'\u0205")
        buf.write("\n\'\3\'\5\'\u0208\n\'\3(\3(\3(\7(\u020d\n(\f(\16(\u0210")
        buf.write("\13(\3)\3)\5)\u0214\n)\3)\3)\5)\u0218\n)\3*\3*\5*\u021c")
        buf.write("\n*\3*\3*\3*\5*\u0221\n*\3*\3*\3*\3*\5*\u0227\n*\3+\3")
        buf.write("+\3+\7+\u022c\n+\f+\16+\u022f\13+\3,\3,\3,\5,\u0234\n")
        buf.write(",\3-\3-\3.\3.\3.\3.\3.\3/\3/\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u0246\n\60\3\61\3\61\3\61\3\61\5\61\u024c")
        buf.write("\n\61\3\61\3\61\3\62\5\62\u0251\n\62\3\62\3\62\7\62\u0255")
        buf.write("\n\62\f\62\16\62\u0258\13\62\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0265\n\63\3\63\3")
        buf.write("\63\3\63\3\63\5\63\u026b\n\63\3\63\3\63\3\63\5\63\u0270")
        buf.write("\n\63\3\63\5\63\u0273\n\63\3\63\3\63\3\63\3\63\3\63\5")
        buf.write("\63\u027a\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u0289\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0295\n\63")
        buf.write("\3\63\7\63\u0298\n\63\f\63\16\63\u029b\13\63\3\64\3\64")
        buf.write("\3\64\6\64\u02a0\n\64\r\64\16\64\u02a1\3\64\3\64\5\64")
        buf.write("\u02a6\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\66\5")
        buf.write("\66\u02b0\n\66\3\66\3\66\5\66\u02b4\n\66\7\66\u02b6\n")
        buf.write("\66\f\66\16\66\u02b9\13\66\3\67\3\67\3\67\5\67\u02be\n")
        buf.write("\67\3\67\5\67\u02c1\n\67\38\38\38\38\38\78\u02c8\n8\f")
        buf.write("8\168\u02cb\138\39\39\59\u02cf\n9\69\u02d1\n9\r9\169\u02d2")
        buf.write("\3:\6:\u02d6\n:\r:\16:\u02d7\3;\3;\3;\5;\u02dd\n;\3<\3")
        buf.write("<\3<\7<\u02e2\n<\f<\16<\u02e5\13<\3=\3=\3=\3=\3=\5=\u02ec")
        buf.write("\n=\5=\u02ee\n=\3>\3>\3>\7>\u02f3\n>\f>\16>\u02f6\13>")
        buf.write("\3?\3?\5?\u02fa\n?\3@\3@\5@\u02fe\n@\3@\3@\7@\u0302\n")
        buf.write("@\f@\16@\u0305\13@\5@\u0307\n@\3A\3A\3A\3A\3A\7A\u030e")
        buf.write("\nA\fA\16A\u0311\13A\3A\3A\5A\u0315\nA\3A\5A\u0318\nA")
        buf.write("\3A\3A\3A\3A\5A\u031e\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u032e\nA\3A\3A\7A\u0332\nA\fA\16A\u0335")
        buf.write("\13A\5A\u0337\nA\3A\3A\3A\5A\u033c\nA\3A\5A\u033f\nA\3")
        buf.write("A\3A\3A\3A\3A\5A\u0346\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\5A\u0359\nA\3A\3A\7A\u035d\nA\f")
        buf.write("A\16A\u0360\13A\7A\u0362\nA\fA\16A\u0365\13A\3B\3B\3C")
        buf.write("\3C\3C\3C\5C\u036d\nC\3C\3C\5C\u0371\nC\3D\5D\u0374\n")
        buf.write("D\3D\3D\3D\5D\u0379\nD\3D\7D\u037c\nD\fD\16D\u037f\13")
        buf.write("D\3E\3E\3E\3F\6F\u0385\nF\rF\16F\u0386\3G\3G\3G\3G\3G")
        buf.write("\3G\5G\u038f\nG\3H\3H\3H\3H\3H\6H\u0396\nH\rH\16H\u0397")
        buf.write("\3H\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\7I\u03a9")
        buf.write("\nI\fI\16I\u03ac\13I\5I\u03ae\nI\3I\3I\3I\3I\7I\u03b4")
        buf.write("\nI\fI\16I\u03b7\13I\5I\u03b9\nI\7I\u03bb\nI\fI\16I\u03be")
        buf.write("\13I\3I\3I\5I\u03c2\nI\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\5J\u03cf\nJ\3K\3K\5K\u03d3\nK\3K\3K\3L\6L\u03d8\nL\r")
        buf.write("L\16L\u03d9\3M\3M\5M\u03de\nM\3N\5N\u03e1\nN\3N\3N\3O")
        buf.write("\3O\3O\3O\3O\3O\3O\5O\u03ec\nO\3O\3O\3O\3O\3O\3O\5O\u03f4")
        buf.write("\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\5P\u040a\nP\3Q\3Q\5Q\u040e\nQ\5Q\u0410\nQ\3")
        buf.write("Q\3Q\5Q\u0414\nQ\3Q\3Q\5Q\u0418\nQ\3R\3R\5R\u041c\nR\3")
        buf.write("S\3S\3S\7S\u0421\nS\fS\16S\u0424\13S\3T\3T\3T\3T\3T\5")
        buf.write("T\u042b\nT\3T\3T\5T\u042f\nT\3T\3T\3U\5U\u0434\nU\3U\3")
        buf.write("U\3V\6V\u0439\nV\rV\16V\u043a\3W\3W\3W\5W\u0440\nW\3X")
        buf.write("\5X\u0443\nX\3X\3X\5X\u0447\nX\3X\3X\3Y\6Y\u044c\nY\r")
        buf.write("Y\16Y\u044d\3Y\2\5Bd\u0080Z\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\2\31\3\2jk\4\2LLNN\5\2**LLNN\4\2**\66\66\7\2KK")
        buf.write("MMOORRWX\3\2OQ\4\2KKMM\3\2IJ\3\2EH\3\2hi\3\2]g\b\2\21")
        buf.write("\21\35\35%%++//>>\13\2\6\b\24\24\31\31\36\36#$(),,\61")
        buf.write("\6289\3\2\6\b\4\2--\60\60\6\2\25\25&&\63\63\67\67\5\2")
        buf.write("\n\13\"\"<<\4\2?@\\\\\3\2?@\4\2OOVV\4\2\r\r\17\17\4\2")
        buf.write("\20\20\63\63\4\2\22\22\26\26\2\u04ae\2\u00d3\3\2\2\2\4")
        buf.write("\u00d5\3\2\2\2\6\u00dc\3\2\2\2\b\u00e6\3\2\2\2\n\u00f9")
        buf.write("\3\2\2\2\f\u010c\3\2\2\2\16\u0117\3\2\2\2\20\u0127\3\2")
        buf.write("\2\2\22\u0133\3\2\2\2\24\u0135\3\2\2\2\26\u013d\3\2\2")
        buf.write("\2\30\u0145\3\2\2\2\32\u014d\3\2\2\2\34\u0155\3\2\2\2")
        buf.write("\36\u015d\3\2\2\2 \u0165\3\2\2\2\"\u016d\3\2\2\2$\u0175")
        buf.write("\3\2\2\2&\u017d\3\2\2\2(\u0185\3\2\2\2*\u0193\3\2\2\2")
        buf.write(",\u0195\3\2\2\2.\u0197\3\2\2\2\60\u019f\3\2\2\2\62\u01a8")
        buf.write("\3\2\2\2\64\u01ab\3\2\2\2\66\u01b0\3\2\2\28\u01ba\3\2")
        buf.write("\2\2:\u01bc\3\2\2\2<\u01c4\3\2\2\2>\u01c9\3\2\2\2@\u01cb")
        buf.write("\3\2\2\2B\u01dc\3\2\2\2D\u01f0\3\2\2\2F\u01f2\3\2\2\2")
        buf.write("H\u01f5\3\2\2\2J\u0200\3\2\2\2L\u0204\3\2\2\2N\u0209\3")
        buf.write("\2\2\2P\u0217\3\2\2\2R\u0226\3\2\2\2T\u0228\3\2\2\2V\u0230")
        buf.write("\3\2\2\2X\u0235\3\2\2\2Z\u0237\3\2\2\2\\\u023c\3\2\2\2")
        buf.write("^\u0245\3\2\2\2`\u0247\3\2\2\2b\u0250\3\2\2\2d\u026a\3")
        buf.write("\2\2\2f\u02a5\3\2\2\2h\u02a7\3\2\2\2j\u02af\3\2\2\2l\u02ba")
        buf.write("\3\2\2\2n\u02c9\3\2\2\2p\u02d0\3\2\2\2r\u02d5\3\2\2\2")
        buf.write("t\u02d9\3\2\2\2v\u02de\3\2\2\2x\u02ed\3\2\2\2z\u02ef\3")
        buf.write("\2\2\2|\u02f7\3\2\2\2~\u0306\3\2\2\2\u0080\u0336\3\2\2")
        buf.write("\2\u0082\u0366\3\2\2\2\u0084\u0370\3\2\2\2\u0086\u0373")
        buf.write("\3\2\2\2\u0088\u0380\3\2\2\2\u008a\u0384\3\2\2\2\u008c")
        buf.write("\u038e\3\2\2\2\u008e\u0390\3\2\2\2\u0090\u03c1\3\2\2\2")
        buf.write("\u0092\u03ce\3\2\2\2\u0094\u03d0\3\2\2\2\u0096\u03d7\3")
        buf.write("\2\2\2\u0098\u03dd\3\2\2\2\u009a\u03e0\3\2\2\2\u009c\u03f3")
        buf.write("\3\2\2\2\u009e\u0409\3\2\2\2\u00a0\u040f\3\2\2\2\u00a2")
        buf.write("\u0419\3\2\2\2\u00a4\u041d\3\2\2\2\u00a6\u042e\3\2\2\2")
        buf.write("\u00a8\u0433\3\2\2\2\u00aa\u0438\3\2\2\2\u00ac\u043f\3")
        buf.write("\2\2\2\u00ae\u0442\3\2\2\2\u00b0\u044b\3\2\2\2\u00b2\u00d4")
        buf.write("\7m\2\2\u00b3\u00d4\7n\2\2\u00b4\u00b6\7p\2\2\u00b5\u00b4")
        buf.write("\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7")
        buf.write("\u00b8\3\2\2\2\u00b8\u00d4\3\2\2\2\u00b9\u00ba\7?\2\2")
        buf.write("\u00ba\u00bb\5.\30\2\u00bb\u00bc\7@\2\2\u00bc\u00d4\3")
        buf.write("\2\2\2\u00bd\u00d4\5\4\3\2\u00be\u00c0\7\3\2\2\u00bf\u00be")
        buf.write("\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00c2\7?\2\2\u00c2\u00c3\5\u0094K\2\u00c3\u00c4\7@\2")
        buf.write("\2\u00c4\u00d4\3\2\2\2\u00c5\u00c6\7\4\2\2\u00c6\u00c7")
        buf.write("\7?\2\2\u00c7\u00c8\5\16\b\2\u00c8\u00c9\7\\\2\2\u00c9")
        buf.write("\u00ca\5|?\2\u00ca\u00cb\7@\2\2\u00cb\u00d4\3\2\2\2\u00cc")
        buf.write("\u00cd\7\5\2\2\u00cd\u00ce\7?\2\2\u00ce\u00cf\5|?\2\u00cf")
        buf.write("\u00d0\7\\\2\2\u00d0\u00d1\5\16\b\2\u00d1\u00d2\7@\2\2")
        buf.write("\u00d2\u00d4\3\2\2\2\u00d3\u00b2\3\2\2\2\u00d3\u00b3\3")
        buf.write("\2\2\2\u00d3\u00b5\3\2\2\2\u00d3\u00b9\3\2\2\2\u00d3\u00bd")
        buf.write("\3\2\2\2\u00d3\u00bf\3\2\2\2\u00d3\u00c5\3\2\2\2\u00d3")
        buf.write("\u00cc\3\2\2\2\u00d4\3\3\2\2\2\u00d5\u00d6\7:\2\2\u00d6")
        buf.write("\u00d7\7?\2\2\u00d7\u00d8\5*\26\2\u00d8\u00d9\7\\\2\2")
        buf.write("\u00d9\u00da\5\6\4\2\u00da\u00db\7@\2\2\u00db\5\3\2\2")
        buf.write("\2\u00dc\u00e1\5\b\5\2\u00dd\u00de\7\\\2\2\u00de\u00e0")
        buf.write("\5\b\5\2\u00df\u00dd\3\2\2\2\u00e0\u00e3\3\2\2\2\u00e1")
        buf.write("\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\7\3\2\2\2\u00e3")
        buf.write("\u00e1\3\2\2\2\u00e4\u00e7\5|?\2\u00e5\u00e7\7\27\2\2")
        buf.write("\u00e6\u00e4\3\2\2\2\u00e6\u00e5\3\2\2\2\u00e7\u00e8\3")
        buf.write("\2\2\2\u00e8\u00e9\7Z\2\2\u00e9\u00ea\5*\26\2\u00ea\t")
        buf.write("\3\2\2\2\u00eb\u00fa\5\2\2\2\u00ec\u00ee\7\3\2\2\u00ed")
        buf.write("\u00ec\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ef\3\2\2\2")
        buf.write("\u00ef\u00f0\7?\2\2\u00f0\u00f1\5|?\2\u00f1\u00f2\7@\2")
        buf.write("\2\u00f2\u00f3\7C\2\2\u00f3\u00f5\5\u0086D\2\u00f4\u00f6")
        buf.write("\7\\\2\2\u00f5\u00f4\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\u00f8\7D\2\2\u00f8\u00fa\3\2\2\2")
        buf.write("\u00f9\u00eb\3\2\2\2\u00f9\u00ed\3\2\2\2\u00fa\u0109\3")
        buf.write("\2\2\2\u00fb\u00fc\7A\2\2\u00fc\u00fd\5.\30\2\u00fd\u00fe")
        buf.write("\7B\2\2\u00fe\u0108\3\2\2\2\u00ff\u0101\7?\2\2\u0100\u0102")
        buf.write("\5\f\7\2\u0101\u0100\3\2\2\2\u0101\u0102\3\2\2\2\u0102")
        buf.write("\u0103\3\2\2\2\u0103\u0108\7@\2\2\u0104\u0105\t\2\2\2")
        buf.write("\u0105\u0108\7m\2\2\u0106\u0108\t\3\2\2\u0107\u00fb\3")
        buf.write("\2\2\2\u0107\u00ff\3\2\2\2\u0107\u0104\3\2\2\2\u0107\u0106")
        buf.write("\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107\3\2\2\2\u0109")
        buf.write("\u010a\3\2\2\2\u010a\13\3\2\2\2\u010b\u0109\3\2\2\2\u010c")
        buf.write("\u0111\5*\26\2\u010d\u010e\7\\\2\2\u010e\u0110\5*\26\2")
        buf.write("\u010f\u010d\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3")
        buf.write("\2\2\2\u0111\u0112\3\2\2\2\u0112\r\3\2\2\2\u0113\u0111")
        buf.write("\3\2\2\2\u0114\u0116\t\4\2\2\u0115\u0114\3\2\2\2\u0116")
        buf.write("\u0119\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\u0125\3\2\2\2\u0119\u0117\3\2\2\2\u011a\u0126\5")
        buf.write("\n\6\2\u011b\u011c\5\20\t\2\u011c\u011d\5\22\n\2\u011d")
        buf.write("\u0126\3\2\2\2\u011e\u011f\t\5\2\2\u011f\u0120\7?\2\2")
        buf.write("\u0120\u0121\5|?\2\u0121\u0122\7@\2\2\u0122\u0126\3\2")
        buf.write("\2\2\u0123\u0124\7T\2\2\u0124\u0126\7m\2\2\u0125\u011a")
        buf.write("\3\2\2\2\u0125\u011b\3\2\2\2\u0125\u011e\3\2\2\2\u0125")
        buf.write("\u0123\3\2\2\2\u0126\17\3\2\2\2\u0127\u0128\t\6\2\2\u0128")
        buf.write("\21\3\2\2\2\u0129\u012b\7\3\2\2\u012a\u0129\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\7?\2\2")
        buf.write("\u012d\u012e\5|?\2\u012e\u012f\7@\2\2\u012f\u0130\5\22")
        buf.write("\n\2\u0130\u0134\3\2\2\2\u0131\u0134\5\16\b\2\u0132\u0134")
        buf.write("\7o\2\2\u0133\u012a\3\2\2\2\u0133\u0131\3\2\2\2\u0133")
        buf.write("\u0132\3\2\2\2\u0134\23\3\2\2\2\u0135\u013a\5\22\n\2\u0136")
        buf.write("\u0137\t\7\2\2\u0137\u0139\5\22\n\2\u0138\u0136\3\2\2")
        buf.write("\2\u0139\u013c\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b")
        buf.write("\3\2\2\2\u013b\25\3\2\2\2\u013c\u013a\3\2\2\2\u013d\u0142")
        buf.write("\5\24\13\2\u013e\u013f\t\b\2\2\u013f\u0141\5\24\13\2\u0140")
        buf.write("\u013e\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\27\3\2\2\2\u0144\u0142\3\2")
        buf.write("\2\2\u0145\u014a\5\26\f\2\u0146\u0147\t\t\2\2\u0147\u0149")
        buf.write("\5\26\f\2\u0148\u0146\3\2\2\2\u0149\u014c\3\2\2\2\u014a")
        buf.write("\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b\31\3\2\2\2\u014c")
        buf.write("\u014a\3\2\2\2\u014d\u0152\5\30\r\2\u014e\u014f\t\n\2")
        buf.write("\2\u014f\u0151\5\30\r\2\u0150\u014e\3\2\2\2\u0151\u0154")
        buf.write("\3\2\2\2\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153")
        buf.write("\33\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u015a\5\32\16\2")
        buf.write("\u0156\u0157\t\13\2\2\u0157\u0159\5\32\16\2\u0158\u0156")
        buf.write("\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a")
        buf.write("\u015b\3\2\2\2\u015b\35\3\2\2\2\u015c\u015a\3\2\2\2\u015d")
        buf.write("\u0162\5\34\17\2\u015e\u015f\7R\2\2\u015f\u0161\5\34\17")
        buf.write("\2\u0160\u015e\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\37\3\2\2\2\u0164\u0162")
        buf.write("\3\2\2\2\u0165\u016a\5\36\20\2\u0166\u0167\7V\2\2\u0167")
        buf.write("\u0169\5\36\20\2\u0168\u0166\3\2\2\2\u0169\u016c\3\2\2")
        buf.write("\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b!\3\2")
        buf.write("\2\2\u016c\u016a\3\2\2\2\u016d\u0172\5 \21\2\u016e\u016f")
        buf.write("\7S\2\2\u016f\u0171\5 \21\2\u0170\u016e\3\2\2\2\u0171")
        buf.write("\u0174\3\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2")
        buf.write("\u0173#\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u017a\5\"\22")
        buf.write("\2\u0176\u0177\7T\2\2\u0177\u0179\5\"\22\2\u0178\u0176")
        buf.write("\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2\u017a")
        buf.write("\u017b\3\2\2\2\u017b%\3\2\2\2\u017c\u017a\3\2\2\2\u017d")
        buf.write("\u0182\5$\23\2\u017e\u017f\7U\2\2\u017f\u0181\5$\23\2")
        buf.write("\u0180\u017e\3\2\2\2\u0181\u0184\3\2\2\2\u0182\u0180\3")
        buf.write("\2\2\2\u0182\u0183\3\2\2\2\u0183\'\3\2\2\2\u0184\u0182")
        buf.write("\3\2\2\2\u0185\u018b\5&\24\2\u0186\u0187\7Y\2\2\u0187")
        buf.write("\u0188\5.\30\2\u0188\u0189\7Z\2\2\u0189\u018a\5(\25\2")
        buf.write("\u018a\u018c\3\2\2\2\u018b\u0186\3\2\2\2\u018b\u018c\3")
        buf.write("\2\2\2\u018c)\3\2\2\2\u018d\u0194\5(\25\2\u018e\u018f")
        buf.write("\5\16\b\2\u018f\u0190\5,\27\2\u0190\u0191\5*\26\2\u0191")
        buf.write("\u0194\3\2\2\2\u0192\u0194\7o\2\2\u0193\u018d\3\2\2\2")
        buf.write("\u0193\u018e\3\2\2\2\u0193\u0192\3\2\2\2\u0194+\3\2\2")
        buf.write("\2\u0195\u0196\t\f\2\2\u0196-\3\2\2\2\u0197\u019c\5*\26")
        buf.write("\2\u0198\u0199\7\\\2\2\u0199\u019b\5*\26\2\u019a\u0198")
        buf.write("\3\2\2\2\u019b\u019e\3\2\2\2\u019c\u019a\3\2\2\2\u019c")
        buf.write("\u019d\3\2\2\2\u019d/\3\2\2\2\u019e\u019c\3\2\2\2\u019f")
        buf.write("\u01a0\5(\25\2\u01a0\61\3\2\2\2\u01a1\u01a3\5\64\33\2")
        buf.write("\u01a2\u01a4\5:\36\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4\3")
        buf.write("\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\7[\2\2\u01a6\u01a9")
        buf.write("\3\2\2\2\u01a7\u01a9\5\u008eH\2\u01a8\u01a1\3\2\2\2\u01a8")
        buf.write("\u01a7\3\2\2\2\u01a9\63\3\2\2\2\u01aa\u01ac\58\35\2\u01ab")
        buf.write("\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ab\3\2\2\2")
        buf.write("\u01ad\u01ae\3\2\2\2\u01ae\65\3\2\2\2\u01af\u01b1\58\35")
        buf.write("\2\u01b0\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b0")
        buf.write("\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\67\3\2\2\2\u01b4\u01bb")
        buf.write("\5@!\2\u01b5\u01bb\5> \2\u01b6\u01bb\5B\"\2\u01b7\u01bb")
        buf.write("\5\\/\2\u01b8\u01bb\5^\60\2\u01b9\u01bb\5`\61\2\u01ba")
        buf.write("\u01b4\3\2\2\2\u01ba\u01b5\3\2\2\2\u01ba\u01b6\3\2\2\2")
        buf.write("\u01ba\u01b7\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01b9\3")
        buf.write("\2\2\2\u01bb9\3\2\2\2\u01bc\u01c1\5<\37\2\u01bd\u01be")
        buf.write("\7\\\2\2\u01be\u01c0\5<\37\2\u01bf\u01bd\3\2\2\2\u01c0")
        buf.write("\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2")
        buf.write("\u01c2;\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c7\5b\62")
        buf.write("\2\u01c5\u01c6\7]\2\2\u01c6\u01c8\5\u0084C\2\u01c7\u01c5")
        buf.write("\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8=\3\2\2\2\u01c9\u01ca")
        buf.write("\7\33\2\2\u01ca?\3\2\2\2\u01cb\u01cc\t\r\2\2\u01ccA\3")
        buf.write("\2\2\2\u01cd\u01ce\b\"\1\2\u01ce\u01dd\t\16\2\2\u01cf")
        buf.write("\u01d0\7\3\2\2\u01d0\u01d1\7?\2\2\u01d1\u01d2\t\17\2\2")
        buf.write("\u01d2\u01dd\7@\2\2\u01d3\u01dd\5Z.\2\u01d4\u01dd\5D#")
        buf.write("\2\u01d5\u01dd\5R*\2\u01d6\u01dd\5\u0082B\2\u01d7\u01d8")
        buf.write("\7\t\2\2\u01d8\u01d9\7?\2\2\u01d9\u01da\5\60\31\2\u01da")
        buf.write("\u01db\7@\2\2\u01db\u01dd\3\2\2\2\u01dc\u01cd\3\2\2\2")
        buf.write("\u01dc\u01cf\3\2\2\2\u01dc\u01d3\3\2\2\2\u01dc\u01d4\3")
        buf.write("\2\2\2\u01dc\u01d5\3\2\2\2\u01dc\u01d6\3\2\2\2\u01dc\u01d7")
        buf.write("\3\2\2\2\u01dd\u01e2\3\2\2\2\u01de\u01df\f\3\2\2\u01df")
        buf.write("\u01e1\5p9\2\u01e0\u01de\3\2\2\2\u01e1\u01e4\3\2\2\2\u01e2")
        buf.write("\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3C\3\2\2\2\u01e4")
        buf.write("\u01e2\3\2\2\2\u01e5\u01e7\5F$\2\u01e6\u01e8\7m\2\2\u01e7")
        buf.write("\u01e6\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e9\3\2\2\2")
        buf.write("\u01e9\u01ea\7C\2\2\u01ea\u01eb\5H%\2\u01eb\u01ec\7D\2")
        buf.write("\2\u01ec\u01f1\3\2\2\2\u01ed\u01ee\5F$\2\u01ee\u01ef\7")
        buf.write("m\2\2\u01ef\u01f1\3\2\2\2\u01f0\u01e5\3\2\2\2\u01f0\u01ed")
        buf.write("\3\2\2\2\u01f1E\3\2\2\2\u01f2\u01f3\t\20\2\2\u01f3G\3")
        buf.write("\2\2\2\u01f4\u01f6\5J&\2\u01f5\u01f4\3\2\2\2\u01f6\u01f7")
        buf.write("\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("I\3\2\2\2\u01f9\u01fb\5L\'\2\u01fa\u01fc\5N(\2\u01fb\u01fa")
        buf.write("\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd")
        buf.write("\u01fe\7[\2\2\u01fe\u0201\3\2\2\2\u01ff\u0201\5\u008e")
        buf.write("H\2\u0200\u01f9\3\2\2\2\u0200\u01ff\3\2\2\2\u0201K\3\2")
        buf.write("\2\2\u0202\u0205\5B\"\2\u0203\u0205\5\\/\2\u0204\u0202")
        buf.write("\3\2\2\2\u0204\u0203\3\2\2\2\u0205\u0207\3\2\2\2\u0206")
        buf.write("\u0208\5L\'\2\u0207\u0206\3\2\2\2\u0207\u0208\3\2\2\2")
        buf.write("\u0208M\3\2\2\2\u0209\u020e\5P)\2\u020a\u020b\7\\\2\2")
        buf.write("\u020b\u020d\5P)\2\u020c\u020a\3\2\2\2\u020d\u0210\3\2")
        buf.write("\2\2\u020e\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020fO\3")
        buf.write("\2\2\2\u0210\u020e\3\2\2\2\u0211\u0218\5b\62\2\u0212\u0214")
        buf.write("\5b\62\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215\u0216\7Z\2\2\u0216\u0218\5\60\31")
        buf.write("\2\u0217\u0211\3\2\2\2\u0217\u0213\3\2\2\2\u0218Q\3\2")
        buf.write("\2\2\u0219\u021b\7\34\2\2\u021a\u021c\7m\2\2\u021b\u021a")
        buf.write("\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d\3\2\2\2\u021d")
        buf.write("\u021e\7C\2\2\u021e\u0220\5T+\2\u021f\u0221\7\\\2\2\u0220")
        buf.write("\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2")
        buf.write("\u0222\u0223\7D\2\2\u0223\u0227\3\2\2\2\u0224\u0225\7")
        buf.write("\34\2\2\u0225\u0227\7m\2\2\u0226\u0219\3\2\2\2\u0226\u0224")
        buf.write("\3\2\2\2\u0227S\3\2\2\2\u0228\u022d\5V,\2\u0229\u022a")
        buf.write("\7\\\2\2\u022a\u022c\5V,\2\u022b\u0229\3\2\2\2\u022c\u022f")
        buf.write("\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e")
        buf.write("U\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0233\5X-\2\u0231")
        buf.write("\u0232\7]\2\2\u0232\u0234\5\60\31\2\u0233\u0231\3\2\2")
        buf.write("\2\u0233\u0234\3\2\2\2\u0234W\3\2\2\2\u0235\u0236\7m\2")
        buf.write("\2\u0236Y\3\2\2\2\u0237\u0238\7\67\2\2\u0238\u0239\7?")
        buf.write("\2\2\u0239\u023a\5|?\2\u023a\u023b\7@\2\2\u023b[\3\2\2")
        buf.write("\2\u023c\u023d\t\21\2\2\u023d]\3\2\2\2\u023e\u0246\t\22")
        buf.write("\2\2\u023f\u0246\5h\65\2\u0240\u0241\7\f\2\2\u0241\u0242")
        buf.write("\7?\2\2\u0242\u0243\7m\2\2\u0243\u0246\7@\2\2\u0244\u0246")
        buf.write("\5> \2\u0245\u023e\3\2\2\2\u0245\u023f\3\2\2\2\u0245\u0240")
        buf.write("\3\2\2\2\u0245\u0244\3\2\2\2\u0246_\3\2\2\2\u0247\u0248")
        buf.write("\7\65\2\2\u0248\u024b\7?\2\2\u0249\u024c\5|?\2\u024a\u024c")
        buf.write("\5\60\31\2\u024b\u0249\3\2\2\2\u024b\u024a\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\7@\2\2\u024ea\3\2\2\2\u024f")
        buf.write("\u0251\5p9\2\u0250\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("\u0252\3\2\2\2\u0252\u0256\5d\63\2\u0253\u0255\5f\64\2")
        buf.write("\u0254\u0253\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3")
        buf.write("\2\2\2\u0256\u0257\3\2\2\2\u0257c\3\2\2\2\u0258\u0256")
        buf.write("\3\2\2\2\u0259\u025a\b\63\1\2\u025a\u026b\7m\2\2\u025b")
        buf.write("\u025c\7?\2\2\u025c\u025d\5b\62\2\u025d\u025e\7@\2\2\u025e")
        buf.write("\u026b\3\2\2\2\u025f\u0260\7m\2\2\u0260\u0261\7Z\2\2\u0261")
        buf.write("\u026b\7o\2\2\u0262\u0264\7?\2\2\u0263\u0265\5B\"\2\u0264")
        buf.write("\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266\u0267\5p9\2\u0267\u0268\5d\63\2\u0268\u0269\7@")
        buf.write("\2\2\u0269\u026b\3\2\2\2\u026a\u0259\3\2\2\2\u026a\u025b")
        buf.write("\3\2\2\2\u026a\u025f\3\2\2\2\u026a\u0262\3\2\2\2\u026b")
        buf.write("\u0299\3\2\2\2\u026c\u026d\f\n\2\2\u026d\u026f\7A\2\2")
        buf.write("\u026e\u0270\5r:\2\u026f\u026e\3\2\2\2\u026f\u0270\3\2")
        buf.write("\2\2\u0270\u0272\3\2\2\2\u0271\u0273\5*\26\2\u0272\u0271")
        buf.write("\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("\u0298\7B\2\2\u0275\u0276\f\t\2\2\u0276\u0277\7A\2\2\u0277")
        buf.write("\u0279\7+\2\2\u0278\u027a\5r:\2\u0279\u0278\3\2\2\2\u0279")
        buf.write("\u027a\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027c\5*\26\2")
        buf.write("\u027c\u027d\7B\2\2\u027d\u0298\3\2\2\2\u027e\u027f\f")
        buf.write("\b\2\2\u027f\u0280\7A\2\2\u0280\u0281\5r:\2\u0281\u0282")
        buf.write("\7+\2\2\u0282\u0283\5*\26\2\u0283\u0284\7B\2\2\u0284\u0298")
        buf.write("\3\2\2\2\u0285\u0286\f\7\2\2\u0286\u0288\7A\2\2\u0287")
        buf.write("\u0289\5r:\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028b\7O\2\2\u028b\u0298\7B\2\2\u028c")
        buf.write("\u028d\f\6\2\2\u028d\u028e\7?\2\2\u028e\u028f\5t;\2\u028f")
        buf.write("\u0290\7@\2\2\u0290\u0298\3\2\2\2\u0291\u0292\f\5\2\2")
        buf.write("\u0292\u0294\7?\2\2\u0293\u0295\5z>\2\u0294\u0293\3\2")
        buf.write("\2\2\u0294\u0295\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298")
        buf.write("\7@\2\2\u0297\u026c\3\2\2\2\u0297\u0275\3\2\2\2\u0297")
        buf.write("\u027e\3\2\2\2\u0297\u0285\3\2\2\2\u0297\u028c\3\2\2\2")
        buf.write("\u0297\u0291\3\2\2\2\u0298\u029b\3\2\2\2\u0299\u0297\3")
        buf.write("\2\2\2\u0299\u029a\3\2\2\2\u029ae\3\2\2\2\u029b\u0299")
        buf.write("\3\2\2\2\u029c\u029d\7\r\2\2\u029d\u029f\7?\2\2\u029e")
        buf.write("\u02a0\7p\2\2\u029f\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2")
        buf.write("\u02a1\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3")
        buf.write("\2\2\2\u02a3\u02a6\7@\2\2\u02a4\u02a6\5h\65\2\u02a5\u029c")
        buf.write("\3\2\2\2\u02a5\u02a4\3\2\2\2\u02a6g\3\2\2\2\u02a7\u02a8")
        buf.write("\7\16\2\2\u02a8\u02a9\7?\2\2\u02a9\u02aa\7?\2\2\u02aa")
        buf.write("\u02ab\5j\66\2\u02ab\u02ac\7@\2\2\u02ac\u02ad\7@\2\2\u02ad")
        buf.write("i\3\2\2\2\u02ae\u02b0\5l\67\2\u02af\u02ae\3\2\2\2\u02af")
        buf.write("\u02b0\3\2\2\2\u02b0\u02b7\3\2\2\2\u02b1\u02b3\7\\\2\2")
        buf.write("\u02b2\u02b4\5l\67\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3")
        buf.write("\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02b1\3\2\2\2\u02b6\u02b9")
        buf.write("\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8")
        buf.write("k\3\2\2\2\u02b9\u02b7\3\2\2\2\u02ba\u02c0\n\23\2\2\u02bb")
        buf.write("\u02bd\7?\2\2\u02bc\u02be\5\f\7\2\u02bd\u02bc\3\2\2\2")
        buf.write("\u02bd\u02be\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\7")
        buf.write("@\2\2\u02c0\u02bb\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1m\3")
        buf.write("\2\2\2\u02c2\u02c8\n\24\2\2\u02c3\u02c4\7?\2\2\u02c4\u02c5")
        buf.write("\5n8\2\u02c5\u02c6\7@\2\2\u02c6\u02c8\3\2\2\2\u02c7\u02c2")
        buf.write("\3\2\2\2\u02c7\u02c3\3\2\2\2\u02c8\u02cb\3\2\2\2\u02c9")
        buf.write("\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2\u02cao\3\2\2\2\u02cb")
        buf.write("\u02c9\3\2\2\2\u02cc\u02ce\t\25\2\2\u02cd\u02cf\5r:\2")
        buf.write("\u02ce\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d1\3")
        buf.write("\2\2\2\u02d0\u02cc\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3q\3\2\2\2\u02d4\u02d6")
        buf.write("\5\\/\2\u02d5\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8s\3\2\2\2\u02d9")
        buf.write("\u02dc\5v<\2\u02da\u02db\7\\\2\2\u02db\u02dd\7l\2\2\u02dc")
        buf.write("\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02ddu\3\2\2\2\u02de")
        buf.write("\u02e3\5x=\2\u02df\u02e0\7\\\2\2\u02e0\u02e2\5x=\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4w\3\2\2\2\u02e5\u02e3\3\2\2")
        buf.write("\2\u02e6\u02e7\5\64\33\2\u02e7\u02e8\5b\62\2\u02e8\u02ee")
        buf.write("\3\2\2\2\u02e9\u02eb\5\66\34\2\u02ea\u02ec\5~@\2\u02eb")
        buf.write("\u02ea\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2")
        buf.write("\u02ed\u02e6\3\2\2\2\u02ed\u02e9\3\2\2\2\u02eey\3\2\2")
        buf.write("\2\u02ef\u02f4\7m\2\2\u02f0\u02f1\7\\\2\2\u02f1\u02f3")
        buf.write("\7m\2\2\u02f2\u02f0\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4")
        buf.write("\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5{\3\2\2\2\u02f6")
        buf.write("\u02f4\3\2\2\2\u02f7\u02f9\5L\'\2\u02f8\u02fa\5~@\2\u02f9")
        buf.write("\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa}\3\2\2\2\u02fb")
        buf.write("\u0307\5p9\2\u02fc\u02fe\5p9\2\u02fd\u02fc\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0303\5\u0080")
        buf.write("A\2\u0300\u0302\5f\64\2\u0301\u0300\3\2\2\2\u0302\u0305")
        buf.write("\3\2\2\2\u0303\u0301\3\2\2\2\u0303\u0304\3\2\2\2\u0304")
        buf.write("\u0307\3\2\2\2\u0305\u0303\3\2\2\2\u0306\u02fb\3\2\2\2")
        buf.write("\u0306\u02fd\3\2\2\2\u0307\177\3\2\2\2\u0308\u0309\bA")
        buf.write("\1\2\u0309\u030a\7?\2\2\u030a\u030b\5~@\2\u030b\u030f")
        buf.write("\7@\2\2\u030c\u030e\5f\64\2\u030d\u030c\3\2\2\2\u030e")
        buf.write("\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2")
        buf.write("\u0310\u0337\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u0314\7")
        buf.write("A\2\2\u0313\u0315\5r:\2\u0314\u0313\3\2\2\2\u0314\u0315")
        buf.write("\3\2\2\2\u0315\u0317\3\2\2\2\u0316\u0318\5*\26\2\u0317")
        buf.write("\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u0337\7B\2\2\u031a\u031b\7A\2\2\u031b\u031d\7+")
        buf.write("\2\2\u031c\u031e\5r:\2\u031d\u031c\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\5*\26\2\u0320")
        buf.write("\u0321\7B\2\2\u0321\u0337\3\2\2\2\u0322\u0323\7A\2\2\u0323")
        buf.write("\u0324\5r:\2\u0324\u0325\7+\2\2\u0325\u0326\5*\26\2\u0326")
        buf.write("\u0327\7B\2\2\u0327\u0337\3\2\2\2\u0328\u0329\7A\2\2\u0329")
        buf.write("\u032a\7O\2\2\u032a\u0337\7B\2\2\u032b\u032d\7?\2\2\u032c")
        buf.write("\u032e\5t;\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e")
        buf.write("\u032f\3\2\2\2\u032f\u0333\7@\2\2\u0330\u0332\5f\64\2")
        buf.write("\u0331\u0330\3\2\2\2\u0332\u0335\3\2\2\2\u0333\u0331\3")
        buf.write("\2\2\2\u0333\u0334\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333")
        buf.write("\3\2\2\2\u0336\u0308\3\2\2\2\u0336\u0312\3\2\2\2\u0336")
        buf.write("\u031a\3\2\2\2\u0336\u0322\3\2\2\2\u0336\u0328\3\2\2\2")
        buf.write("\u0336\u032b\3\2\2\2\u0337\u0363\3\2\2\2\u0338\u0339\f")
        buf.write("\7\2\2\u0339\u033b\7A\2\2\u033a\u033c\5r:\2\u033b\u033a")
        buf.write("\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033e\3\2\2\2\u033d")
        buf.write("\u033f\5*\26\2\u033e\u033d\3\2\2\2\u033e\u033f\3\2\2\2")
        buf.write("\u033f\u0340\3\2\2\2\u0340\u0362\7B\2\2\u0341\u0342\f")
        buf.write("\6\2\2\u0342\u0343\7A\2\2\u0343\u0345\7+\2\2\u0344\u0346")
        buf.write("\5r:\2\u0345\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347")
        buf.write("\3\2\2\2\u0347\u0348\5*\26\2\u0348\u0349\7B\2\2\u0349")
        buf.write("\u0362\3\2\2\2\u034a\u034b\f\5\2\2\u034b\u034c\7A\2\2")
        buf.write("\u034c\u034d\5r:\2\u034d\u034e\7+\2\2\u034e\u034f\5*\26")
        buf.write("\2\u034f\u0350\7B\2\2\u0350\u0362\3\2\2\2\u0351\u0352")
        buf.write("\f\4\2\2\u0352\u0353\7A\2\2\u0353\u0354\7O\2\2\u0354\u0362")
        buf.write("\7B\2\2\u0355\u0356\f\3\2\2\u0356\u0358\7?\2\2\u0357\u0359")
        buf.write("\5t;\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a")
        buf.write("\3\2\2\2\u035a\u035e\7@\2\2\u035b\u035d\5f\64\2\u035c")
        buf.write("\u035b\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2")
        buf.write("\u035e\u035f\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3")
        buf.write("\2\2\2\u0361\u0338\3\2\2\2\u0361\u0341\3\2\2\2\u0361\u034a")
        buf.write("\3\2\2\2\u0361\u0351\3\2\2\2\u0361\u0355\3\2\2\2\u0362")
        buf.write("\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2")
        buf.write("\u0364\u0081\3\2\2\2\u0365\u0363\3\2\2\2\u0366\u0367\7")
        buf.write("m\2\2\u0367\u0083\3\2\2\2\u0368\u0371\5*\26\2\u0369\u036a")
        buf.write("\7C\2\2\u036a\u036c\5\u0086D\2\u036b\u036d\7\\\2\2\u036c")
        buf.write("\u036b\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036e\3\2\2\2")
        buf.write("\u036e\u036f\7D\2\2\u036f\u0371\3\2\2\2\u0370\u0368\3")
        buf.write("\2\2\2\u0370\u0369\3\2\2\2\u0371\u0085\3\2\2\2\u0372\u0374")
        buf.write("\5\u0088E\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0375\3\2\2\2\u0375\u037d\5\u0084C\2\u0376\u0378\7\\")
        buf.write("\2\2\u0377\u0379\5\u0088E\2\u0378\u0377\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037c\5\u0084")
        buf.write("C\2\u037b\u0376\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b")
        buf.write("\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0087\3\2\2\2\u037f")
        buf.write("\u037d\3\2\2\2\u0380\u0381\5\u008aF\2\u0381\u0382\7]\2")
        buf.write("\2\u0382\u0089\3\2\2\2\u0383\u0385\5\u008cG\2\u0384\u0383")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0384\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u008b\3\2\2\2\u0388\u0389\7A\2\2")
        buf.write("\u0389\u038a\5\60\31\2\u038a\u038b\7B\2\2\u038b\u038f")
        buf.write("\3\2\2\2\u038c\u038d\7k\2\2\u038d\u038f\7m\2\2\u038e\u0388")
        buf.write("\3\2\2\2\u038e\u038c\3\2\2\2\u038f\u008d\3\2\2\2\u0390")
        buf.write("\u0391\7=\2\2\u0391\u0392\7?\2\2\u0392\u0393\5\60\31\2")
        buf.write("\u0393\u0395\7\\\2\2\u0394\u0396\7p\2\2\u0395\u0394\3")
        buf.write("\2\2\2\u0396\u0397\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0398")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039a\7@\2\2\u039a")
        buf.write("\u039b\7[\2\2\u039b\u008f\3\2\2\2\u039c\u03c2\5\u0092")
        buf.write("J\2\u039d\u03c2\5\u0094K\2\u039e\u03c2\5\u009aN\2\u039f")
        buf.write("\u03c2\5\u009cO\2\u03a0\u03c2\5\u009eP\2\u03a1\u03c2\5")
        buf.write("\u00a6T\2\u03a2\u03a3\t\26\2\2\u03a3\u03a4\t\27\2\2\u03a4")
        buf.write("\u03ad\7?\2\2\u03a5\u03aa\5&\24\2\u03a6\u03a7\7\\\2\2")
        buf.write("\u03a7\u03a9\5&\24\2\u03a8\u03a6\3\2\2\2\u03a9\u03ac\3")
        buf.write("\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ae")
        buf.write("\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03a5\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03bc\3\2\2\2\u03af\u03b8\7Z\2\2")
        buf.write("\u03b0\u03b5\5&\24\2\u03b1\u03b2\7\\\2\2\u03b2\u03b4\5")
        buf.write("&\24\2\u03b3\u03b1\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5\u03b3")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7")
        buf.write("\u03b5\3\2\2\2\u03b8\u03b0\3\2\2\2\u03b8\u03b9\3\2\2\2")
        buf.write("\u03b9\u03bb\3\2\2\2\u03ba\u03af\3\2\2\2\u03bb\u03be\3")
        buf.write("\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bf")
        buf.write("\3\2\2\2\u03be\u03bc\3\2\2\2\u03bf\u03c0\7@\2\2\u03c0")
        buf.write("\u03c2\7[\2\2\u03c1\u039c\3\2\2\2\u03c1\u039d\3\2\2\2")
        buf.write("\u03c1\u039e\3\2\2\2\u03c1\u039f\3\2\2\2\u03c1\u03a0\3")
        buf.write("\2\2\2\u03c1\u03a1\3\2\2\2\u03c1\u03a2\3\2\2\2\u03c2\u0091")
        buf.write("\3\2\2\2\u03c3\u03c4\7m\2\2\u03c4\u03c5\7Z\2\2\u03c5\u03cf")
        buf.write("\5\u0090I\2\u03c6\u03c7\7\23\2\2\u03c7\u03c8\5\60\31\2")
        buf.write("\u03c8\u03c9\7Z\2\2\u03c9\u03ca\5\u0090I\2\u03ca\u03cf")
        buf.write("\3\2\2\2\u03cb\u03cc\7\27\2\2\u03cc\u03cd\7Z\2\2\u03cd")
        buf.write("\u03cf\5\u0090I\2\u03ce\u03c3\3\2\2\2\u03ce\u03c6\3\2")
        buf.write("\2\2\u03ce\u03cb\3\2\2\2\u03cf\u0093\3\2\2\2\u03d0\u03d2")
        buf.write("\7C\2\2\u03d1\u03d3\5\u0096L\2\u03d2\u03d1\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\7D\2\2")
        buf.write("\u03d5\u0095\3\2\2\2\u03d6\u03d8\5\u0098M\2\u03d7\u03d6")
        buf.write("\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9")
        buf.write("\u03da\3\2\2\2\u03da\u0097\3\2\2\2\u03db\u03de\5\u0090")
        buf.write("I\2\u03dc\u03de\5\62\32\2\u03dd\u03db\3\2\2\2\u03dd\u03dc")
        buf.write("\3\2\2\2\u03de\u0099\3\2\2\2\u03df\u03e1\5.\30\2\u03e0")
        buf.write("\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3\2\2\2")
        buf.write("\u03e2\u03e3\7[\2\2\u03e3\u009b\3\2\2\2\u03e4\u03e5\7")
        buf.write("!\2\2\u03e5\u03e6\7?\2\2\u03e6\u03e7\5.\30\2\u03e7\u03e8")
        buf.write("\7@\2\2\u03e8\u03eb\5\u0090I\2\u03e9\u03ea\7\32\2\2\u03ea")
        buf.write("\u03ec\5\u0090I\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2")
        buf.write("\2\2\u03ec\u03f4\3\2\2\2\u03ed\u03ee\7.\2\2\u03ee\u03ef")
        buf.write("\7?\2\2\u03ef\u03f0\5.\30\2\u03f0\u03f1\7@\2\2\u03f1\u03f2")
        buf.write("\5\u0090I\2\u03f2\u03f4\3\2\2\2\u03f3\u03e4\3\2\2\2\u03f3")
        buf.write("\u03ed\3\2\2\2\u03f4\u009d\3\2\2\2\u03f5\u03f6\7\64\2")
        buf.write("\2\u03f6\u03f7\7?\2\2\u03f7\u03f8\5.\30\2\u03f8\u03f9")
        buf.write("\7@\2\2\u03f9\u03fa\5\u0090I\2\u03fa\u040a\3\2\2\2\u03fb")
        buf.write("\u03fc\7\30\2\2\u03fc\u03fd\5\u0090I\2\u03fd\u03fe\7\64")
        buf.write("\2\2\u03fe\u03ff\7?\2\2\u03ff\u0400\5.\30\2\u0400\u0401")
        buf.write("\7@\2\2\u0401\u0402\7[\2\2\u0402\u040a\3\2\2\2\u0403\u0404")
        buf.write("\7\37\2\2\u0404\u0405\7?\2\2\u0405\u0406\5\u00a0Q\2\u0406")
        buf.write("\u0407\7@\2\2\u0407\u0408\5\u0090I\2\u0408\u040a\3\2\2")
        buf.write("\2\u0409\u03f5\3\2\2\2\u0409\u03fb\3\2\2\2\u0409\u0403")
        buf.write("\3\2\2\2\u040a\u009f\3\2\2\2\u040b\u0410\5\u00a2R\2\u040c")
        buf.write("\u040e\5.\30\2\u040d\u040c\3\2\2\2\u040d\u040e\3\2\2\2")
        buf.write("\u040e\u0410\3\2\2\2\u040f\u040b\3\2\2\2\u040f\u040d\3")
        buf.write("\2\2\2\u0410\u0411\3\2\2\2\u0411\u0413\7[\2\2\u0412\u0414")
        buf.write("\5\u00a4S\2\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("\u0415\3\2\2\2\u0415\u0417\7[\2\2\u0416\u0418\5\u00a4")
        buf.write("S\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u00a1")
        buf.write("\3\2\2\2\u0419\u041b\5\64\33\2\u041a\u041c\5:\36\2\u041b")
        buf.write("\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u00a3\3\2\2\2")
        buf.write("\u041d\u0422\5*\26\2\u041e\u041f\7\\\2\2\u041f\u0421\5")
        buf.write("*\26\2\u0420\u041e\3\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420")
        buf.write("\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u00a5\3\2\2\2\u0424")
        buf.write("\u0422\3\2\2\2\u0425\u0426\7 \2\2\u0426\u042f\7m\2\2\u0427")
        buf.write("\u042f\t\30\2\2\u0428\u042a\7\'\2\2\u0429\u042b\5.\30")
        buf.write("\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042f")
        buf.write("\3\2\2\2\u042c\u042d\7 \2\2\u042d\u042f\5\16\b\2\u042e")
        buf.write("\u0425\3\2\2\2\u042e\u0427\3\2\2\2\u042e\u0428\3\2\2\2")
        buf.write("\u042e\u042c\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\7")
        buf.write("[\2\2\u0431\u00a7\3\2\2\2\u0432\u0434\5\u00aaV\2\u0433")
        buf.write("\u0432\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\3\2\2\2")
        buf.write("\u0435\u0436\7\2\2\3\u0436\u00a9\3\2\2\2\u0437\u0439\5")
        buf.write("\u00acW\2\u0438\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a")
        buf.write("\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u00ab\3\2\2\2")
        buf.write("\u043c\u0440\5\u00aeX\2\u043d\u0440\5\62\32\2\u043e\u0440")
        buf.write("\7[\2\2\u043f\u043c\3\2\2\2\u043f\u043d\3\2\2\2\u043f")
        buf.write("\u043e\3\2\2\2\u0440\u00ad\3\2\2\2\u0441\u0443\5\64\33")
        buf.write("\2\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444")
        buf.write("\3\2\2\2\u0444\u0446\5b\62\2\u0445\u0447\5\u00b0Y\2\u0446")
        buf.write("\u0445\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0448\3\2\2\2")
        buf.write("\u0448\u0449\5\u0094K\2\u0449\u00af\3\2\2\2\u044a\u044c")
        buf.write("\5\62\32\2\u044b\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u044b\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u00b1\3\2\2\2")
        buf.write("\u008b\u00b7\u00bf\u00d3\u00e1\u00e6\u00ed\u00f5\u00f9")
        buf.write("\u0101\u0107\u0109\u0111\u0117\u0125\u012a\u0133\u013a")
        buf.write("\u0142\u014a\u0152\u015a\u0162\u016a\u0172\u017a\u0182")
        buf.write("\u018b\u0193\u019c\u01a3\u01a8\u01ad\u01b2\u01ba\u01c1")
        buf.write("\u01c7\u01dc\u01e2\u01e7\u01f0\u01f7\u01fb\u0200\u0204")
        buf.write("\u0207\u020e\u0213\u0217\u021b\u0220\u0226\u022d\u0233")
        buf.write("\u0245\u024b\u0250\u0256\u0264\u026a\u026f\u0272\u0279")
        buf.write("\u0288\u0294\u0297\u0299\u02a1\u02a5\u02af\u02b3\u02b7")
        buf.write("\u02bd\u02c0\u02c7\u02c9\u02ce\u02d2\u02d7\u02dc\u02e3")
        buf.write("\u02eb\u02ed\u02f4\u02f9\u02fd\u0303\u0306\u030f\u0314")
        buf.write("\u0317\u031d\u032d\u0333\u0336\u033b\u033e\u0345\u0358")
        buf.write("\u035e\u0361\u0363\u036c\u0370\u0373\u0378\u037d\u0386")
        buf.write("\u038e\u0397\u03aa\u03ad\u03b5\u03b8\u03bc\u03c1\u03ce")
        buf.write("\u03d2\u03d9\u03dd\u03e0\u03eb\u03f3\u0409\u040d\u040f")
        buf.write("\u0413\u0417\u041b\u0422\u042a\u042e\u0433\u043a\u043f")
        buf.write("\u0442\u0446\u044d")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'entry'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'status'", "'struct'", "'switch'", "'typedef'", 
                     "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", 
                     "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
                     "'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", 
                     "'_Static_assert'", "'_Thread_local'", "'('", "')'", 
                     "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
                     "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", 
                     "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", 
                     "'!'", "'~'", "'?'", "':'", "';'", "','", "'='", "'*='", 
                     "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
                     "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Entry", "Enum", "Extern", "Float", 
                      "For", "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Status", "Struct", "Switch", "Typedef", 
                      "Union", "Unsigned", "Void", "Volatile", "While", 
                      "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Generic", "Imaginary", "Noreturn", "StaticAssert", 
                      "ThreadLocal", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Less", 
                      "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
                      "LineDirective", "PragmaDirective", "Whitespace", 
                      "Newline", "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_argumentExpressionList = 5
    RULE_unaryExpression = 6
    RULE_unaryOperator = 7
    RULE_castExpression = 8
    RULE_multiplicativeExpression = 9
    RULE_additiveExpression = 10
    RULE_shiftExpression = 11
    RULE_relationalExpression = 12
    RULE_equalityExpression = 13
    RULE_andExpression = 14
    RULE_exclusiveOrExpression = 15
    RULE_inclusiveOrExpression = 16
    RULE_logicalAndExpression = 17
    RULE_logicalOrExpression = 18
    RULE_conditionalExpression = 19
    RULE_assignmentExpression = 20
    RULE_assignmentOperator = 21
    RULE_expression = 22
    RULE_constantExpression = 23
    RULE_declaration = 24
    RULE_declarationSpecifiers = 25
    RULE_declarationSpecifiers2 = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_entryPointSpecifier = 30
    RULE_storageClassSpecifier = 31
    RULE_typeSpecifier = 32
    RULE_structOrUnionSpecifier = 33
    RULE_structOrUnion = 34
    RULE_structDeclarationList = 35
    RULE_structDeclaration = 36
    RULE_specifierQualifierList = 37
    RULE_structDeclaratorList = 38
    RULE_structDeclarator = 39
    RULE_enumSpecifier = 40
    RULE_enumeratorList = 41
    RULE_enumerator = 42
    RULE_enumerationConstant = 43
    RULE_atomicTypeSpecifier = 44
    RULE_typeQualifier = 45
    RULE_functionSpecifier = 46
    RULE_alignmentSpecifier = 47
    RULE_declarator = 48
    RULE_directDeclarator = 49
    RULE_gccDeclaratorExtension = 50
    RULE_gccAttributeSpecifier = 51
    RULE_gccAttributeList = 52
    RULE_gccAttribute = 53
    RULE_nestedParenthesesBlock = 54
    RULE_pointer = 55
    RULE_typeQualifierList = 56
    RULE_parameterTypeList = 57
    RULE_parameterList = 58
    RULE_parameterDeclaration = 59
    RULE_identifierList = 60
    RULE_typeName = 61
    RULE_abstractDeclarator = 62
    RULE_directAbstractDeclarator = 63
    RULE_typedefName = 64
    RULE_initializer = 65
    RULE_initializerList = 66
    RULE_designation = 67
    RULE_designatorList = 68
    RULE_designator = 69
    RULE_staticAssertDeclaration = 70
    RULE_statement = 71
    RULE_labeledStatement = 72
    RULE_compoundStatement = 73
    RULE_blockItemList = 74
    RULE_blockItem = 75
    RULE_expressionStatement = 76
    RULE_selectionStatement = 77
    RULE_iterationStatement = 78
    RULE_forCondition = 79
    RULE_forDeclaration = 80
    RULE_forExpression = 81
    RULE_jumpStatement = 82
    RULE_compilationUnit = 83
    RULE_translationUnit = 84
    RULE_externalDeclaration = 85
    RULE_functionDefinition = 86
    RULE_declarationList = 87

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "entryPointSpecifier", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    Auto=15
    Break=16
    Case=17
    Char=18
    Const=19
    Continue=20
    Default=21
    Do=22
    Double=23
    Else=24
    Entry=25
    Enum=26
    Extern=27
    Float=28
    For=29
    Goto=30
    If=31
    Inline=32
    Int=33
    Long=34
    Register=35
    Restrict=36
    Return=37
    Short=38
    Signed=39
    Sizeof=40
    Static=41
    Status=42
    Struct=43
    Switch=44
    Typedef=45
    Union=46
    Unsigned=47
    Void=48
    Volatile=49
    While=50
    Alignas=51
    Alignof=52
    Atomic=53
    Bool=54
    Complex=55
    Generic=56
    Imaginary=57
    Noreturn=58
    StaticAssert=59
    ThreadLocal=60
    LeftParen=61
    RightParen=62
    LeftBracket=63
    RightBracket=64
    LeftBrace=65
    RightBrace=66
    Less=67
    LessEqual=68
    Greater=69
    GreaterEqual=70
    LeftShift=71
    RightShift=72
    Plus=73
    PlusPlus=74
    Minus=75
    MinusMinus=76
    Star=77
    Div=78
    Mod=79
    And=80
    Or=81
    AndAnd=82
    OrOr=83
    Caret=84
    Not=85
    Tilde=86
    Question=87
    Colon=88
    Semi=89
    Comma=90
    Assign=91
    StarAssign=92
    DivAssign=93
    ModAssign=94
    PlusAssign=95
    MinusAssign=96
    LeftShiftAssign=97
    RightShiftAssign=98
    AndAssign=99
    XorAssign=100
    OrAssign=101
    Equal=102
    NotEqual=103
    Arrow=104
    Dot=105
    Ellipsis=106
    Identifier=107
    Constant=108
    DigitSequence=109
    StringLiteral=110
    ComplexDefine=111
    IncludeDirective=112
    AsmBlock=113
    LineAfterPreprocessing=114
    LineDirective=115
    PragmaDirective=116
    Whitespace=117
    Newline=118
    BlockComment=119
    LineComment=120

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(ParaCParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 179 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 178
                    self.match(ParaCParser.StringLiteral)
                    self.state = 181 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ParaCParser.StringLiteral):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 183
                self.match(ParaCParser.LeftParen)
                self.state = 184
                self.expression()
                self.state = 185
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 187
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 188
                    self.match(ParaCParser.T__0)


                self.state = 191
                self.match(ParaCParser.LeftParen)
                self.state = 192
                self.compoundStatement()
                self.state = 193
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 195
                self.match(ParaCParser.T__1)
                self.state = 196
                self.match(ParaCParser.LeftParen)
                self.state = 197
                self.unaryExpression()
                self.state = 198
                self.match(ParaCParser.Comma)
                self.state = 199
                self.typeName()
                self.state = 200
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 202
                self.match(ParaCParser.T__2)
                self.state = 203
                self.match(ParaCParser.LeftParen)
                self.state = 204
                self.typeName()
                self.state = 205
                self.match(ParaCParser.Comma)
                self.state = 206
                self.unaryExpression()
                self.state = 207
                self.match(ParaCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(ParaCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(ParaCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = ParaCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(ParaCParser.Generic)
            self.state = 212
            self.match(ParaCParser.LeftParen)
            self.state = 213
            self.assignmentExpression()
            self.state = 214
            self.match(ParaCParser.Comma)
            self.state = 215
            self.genericAssocList()
            self.state = 216
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = ParaCParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.genericAssociation()
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 219
                self.match(ParaCParser.Comma)
                self.state = 220
                self.genericAssociation()
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = ParaCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.state = 226
                self.typeName()
                pass
            elif token in [ParaCParser.Default]:
                self.state = 227
                self.match(ParaCParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 230
            self.match(ParaCParser.Colon)
            self.state = 231
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 233
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 234
                    self.match(ParaCParser.T__0)


                self.state = 237
                self.match(ParaCParser.LeftParen)
                self.state = 238
                self.typeName()
                self.state = 239
                self.match(ParaCParser.RightParen)
                self.state = 240
                self.match(ParaCParser.LeftBrace)
                self.state = 241
                self.initializerList()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 242
                    self.match(ParaCParser.Comma)


                self.state = 245
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.LeftBracket - 61)) | (1 << (ParaCParser.PlusPlus - 61)) | (1 << (ParaCParser.MinusMinus - 61)) | (1 << (ParaCParser.Arrow - 61)) | (1 << (ParaCParser.Dot - 61)))) != 0):
                self.state = 261
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.LeftBracket]:
                    self.state = 249
                    self.match(ParaCParser.LeftBracket)
                    self.state = 250
                    self.expression()
                    self.state = 251
                    self.match(ParaCParser.RightBracket)
                    pass
                elif token in [ParaCParser.LeftParen]:
                    self.state = 253
                    self.match(ParaCParser.LeftParen)
                    self.state = 255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                        self.state = 254
                        self.argumentExpressionList()


                    self.state = 257
                    self.match(ParaCParser.RightParen)
                    pass
                elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                    self.state = 258
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 259
                    self.match(ParaCParser.Identifier)
                    pass
                elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                    self.state = 260
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.assignmentExpression()
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 267
                self.match(ParaCParser.Comma)
                self.state = 268
                self.assignmentExpression()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 274
                    _la = self._input.LA(1)
                    if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (ParaCParser.Sizeof - 40)) | (1 << (ParaCParser.PlusPlus - 40)) | (1 << (ParaCParser.MinusMinus - 40)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral]:
                self.state = 280
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 281
                self.unaryOperator()
                self.state = 282
                self.castExpression()
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 284
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 285
                self.match(ParaCParser.LeftParen)
                self.state = 286
                self.typeName()
                self.state = 287
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 289
                self.match(ParaCParser.AndAnd)
                self.state = 290
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = ParaCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 295
                    self.match(ParaCParser.T__0)


                self.state = 298
                self.match(ParaCParser.LeftParen)
                self.state = 299
                self.typeName()
                self.state = 300
                self.match(ParaCParser.RightParen)
                self.state = 301
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.castExpression()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Div - 77)) | (1 << (ParaCParser.Mod - 77)))) != 0):
                self.state = 308
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Div - 77)) | (1 << (ParaCParser.Mod - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 309
                self.castExpression()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.multiplicativeExpression()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Plus or _la==ParaCParser.Minus:
                self.state = 316
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 317
                self.multiplicativeExpression()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.additiveExpression()
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.LeftShift or _la==ParaCParser.RightShift:
                self.state = 324
                _la = self._input.LA(1)
                if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 325
                self.additiveExpression()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.shiftExpression()
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (ParaCParser.Less - 67)) | (1 << (ParaCParser.LessEqual - 67)) | (1 << (ParaCParser.Greater - 67)) | (1 << (ParaCParser.GreaterEqual - 67)))) != 0):
                self.state = 332
                _la = self._input.LA(1)
                if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (ParaCParser.Less - 67)) | (1 << (ParaCParser.LessEqual - 67)) | (1 << (ParaCParser.Greater - 67)) | (1 << (ParaCParser.GreaterEqual - 67)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 333
                self.shiftExpression()
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.relationalExpression()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Equal or _la==ParaCParser.NotEqual:
                self.state = 340
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 341
                self.relationalExpression()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.equalityExpression()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.And:
                self.state = 348
                self.match(ParaCParser.And)
                self.state = 349
                self.equalityExpression()
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.andExpression()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Caret:
                self.state = 356
                self.match(ParaCParser.Caret)
                self.state = 357
                self.andExpression()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.exclusiveOrExpression()
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Or:
                self.state = 364
                self.match(ParaCParser.Or)
                self.state = 365
                self.exclusiveOrExpression()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.inclusiveOrExpression()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.AndAnd:
                self.state = 372
                self.match(ParaCParser.AndAnd)
                self.state = 373
                self.inclusiveOrExpression()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.logicalAndExpression()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.OrOr:
                self.state = 380
                self.match(ParaCParser.OrOr)
                self.state = 381
                self.logicalAndExpression()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.logicalOrExpression()
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Question:
                self.state = 388
                self.match(ParaCParser.Question)
                self.state = 389
                self.expression()
                self.state = 390
                self.match(ParaCParser.Colon)
                self.state = 391
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentExpression)
        try:
            self.state = 401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.unaryExpression()
                self.state = 397
                self.assignmentOperator()
                self.state = 398
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 400
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (ParaCParser.Assign - 91)) | (1 << (ParaCParser.StarAssign - 91)) | (1 << (ParaCParser.DivAssign - 91)) | (1 << (ParaCParser.ModAssign - 91)) | (1 << (ParaCParser.PlusAssign - 91)) | (1 << (ParaCParser.MinusAssign - 91)) | (1 << (ParaCParser.LeftShiftAssign - 91)) | (1 << (ParaCParser.RightShiftAssign - 91)) | (1 << (ParaCParser.AndAssign - 91)) | (1 << (ParaCParser.XorAssign - 91)) | (1 << (ParaCParser.OrAssign - 91)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.assignmentExpression()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 406
                self.match(ParaCParser.Comma)
                self.state = 407
                self.assignmentExpression()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.declarationSpecifiers()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                    self.state = 416
                    self.initDeclaratorList()


                self.state = 419
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 424
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 427 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = ParaCParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 429
                self.declarationSpecifier()
                self.state = 432 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 434
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.entryPointSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 436
                self.typeSpecifier(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 437
                self.typeQualifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 438
                self.functionSpecifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 439
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.initDeclarator()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 443
                self.match(ParaCParser.Comma)
                self.state = 444
                self.initDeclarator()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.declarator()
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 451
                self.match(ParaCParser.Assign)
                self.state = 452
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryPointSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_entryPointSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryPointSpecifier" ):
                listener.enterEntryPointSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryPointSpecifier" ):
                listener.exitEntryPointSpecifier(self)




    def entryPointSpecifier(self):

        localctx = ParaCParser.EntryPointSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_entryPointSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(ParaCParser.Entry)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Auto) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Register) | (1 << ParaCParser.Static) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def Complex(self):
            return self.getToken(ParaCParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool, ParaCParser.Complex]:
                self.state = 460
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__0]:
                self.state = 461
                self.match(ParaCParser.T__0)
                self.state = 462
                self.match(ParaCParser.LeftParen)
                self.state = 463
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 464
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 465
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 466
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 467
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 468
                self.typedefName()
                pass
            elif token in [ParaCParser.T__6]:
                self.state = 469
                self.match(ParaCParser.T__6)
                self.state = 470
                self.match(ParaCParser.LeftParen)
                self.state = 471
                self.constantExpression()
                self.state = 472
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 480
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 476
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 477
                    self.pointer() 
                self.state = 482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.structOrUnion()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 484
                    self.match(ParaCParser.Identifier)


                self.state = 487
                self.match(ParaCParser.LeftBrace)
                self.state = 488
                self.structDeclarationList()
                self.state = 489
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.structOrUnion()
                self.state = 492
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                self.structDeclaration()
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.StaticAssert))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.specifierQualifierList()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Colon - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                    self.state = 504
                    self.structDeclaratorList()


                self.state = 507
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 512
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 513
                self.typeQualifier()
                pass


            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 516
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.structDeclarator()
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 520
                self.match(ParaCParser.Comma)
                self.state = 521
                self.structDeclarator()
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                    self.state = 528
                    self.declarator()


                self.state = 531
                self.match(ParaCParser.Colon)
                self.state = 532
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 535
                self.match(ParaCParser.Enum)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 536
                    self.match(ParaCParser.Identifier)


                self.state = 539
                self.match(ParaCParser.LeftBrace)
                self.state = 540
                self.enumeratorList()
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 541
                    self.match(ParaCParser.Comma)


                self.state = 544
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.match(ParaCParser.Enum)
                self.state = 547
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.enumerator()
            self.state = 555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 551
                    self.match(ParaCParser.Comma)
                    self.state = 552
                    self.enumerator() 
                self.state = 557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.enumerationConstant()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 559
                self.match(ParaCParser.Assign)
                self.state = 560
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(ParaCParser.Atomic)
            self.state = 566
            self.match(ParaCParser.LeftParen)
            self.state = 567
            self.typeName()
            self.state = 568
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ParaCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__7, ParaCParser.T__8, ParaCParser.Inline, ParaCParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.gccAttributeSpecifier()
                pass
            elif token in [ParaCParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.match(ParaCParser.T__9)
                self.state = 575
                self.match(ParaCParser.LeftParen)
                self.state = 576
                self.match(ParaCParser.Identifier)
                self.state = 577
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Entry]:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.entryPointSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(ParaCParser.Alignas)
            self.state = 582
            self.match(ParaCParser.LeftParen)
            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 583
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 584
                self.constantExpression()
                pass


            self.state = 587
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 589
                self.pointer()


            self.state = 592
            self.directDeclarator(0)
            self.state = 596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.gccDeclaratorExtension() 
                self.state = 598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 600
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 601
                self.match(ParaCParser.LeftParen)
                self.state = 602
                self.declarator()
                self.state = 603
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 605
                self.match(ParaCParser.Identifier)
                self.state = 606
                self.match(ParaCParser.Colon)
                self.state = 607
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 608
                self.match(ParaCParser.LeftParen)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 609
                    self.typeSpecifier(0)


                self.state = 612
                self.pointer()
                self.state = 613
                self.directDeclarator(0)
                self.state = 614
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 661
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 618
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 619
                        self.match(ParaCParser.LeftBracket)
                        self.state = 621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 620
                            self.typeQualifierList()


                        self.state = 624
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                            self.state = 623
                            self.assignmentExpression()


                        self.state = 626
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 627
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 628
                        self.match(ParaCParser.LeftBracket)
                        self.state = 629
                        self.match(ParaCParser.Static)
                        self.state = 631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 630
                            self.typeQualifierList()


                        self.state = 633
                        self.assignmentExpression()
                        self.state = 634
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 636
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 637
                        self.match(ParaCParser.LeftBracket)
                        self.state = 638
                        self.typeQualifierList()
                        self.state = 639
                        self.match(ParaCParser.Static)
                        self.state = 640
                        self.assignmentExpression()
                        self.state = 641
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 643
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 644
                        self.match(ParaCParser.LeftBracket)
                        self.state = 646
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 645
                            self.typeQualifierList()


                        self.state = 648
                        self.match(ParaCParser.Star)
                        self.state = 649
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 650
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 651
                        self.match(ParaCParser.LeftParen)
                        self.state = 652
                        self.parameterTypeList()
                        self.state = 653
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 655
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 656
                        self.match(ParaCParser.LeftParen)
                        self.state = 658
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 657
                            self.identifierList()


                        self.state = 660
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = ParaCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.match(ParaCParser.T__10)
                self.state = 667
                self.match(ParaCParser.LeftParen)
                self.state = 669 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 668
                    self.match(ParaCParser.StringLiteral)
                    self.state = 671 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ParaCParser.StringLiteral):
                        break

                self.state = 673
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = ParaCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(ParaCParser.T__11)
            self.state = 678
            self.match(ParaCParser.LeftParen)
            self.state = 679
            self.match(ParaCParser.LeftParen)
            self.state = 680
            self.gccAttributeList()
            self.state = 681
            self.match(ParaCParser.RightParen)
            self.state = 682
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = ParaCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Imaginary) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftBracket))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.ComplexDefine - 64)) | (1 << (ParaCParser.IncludeDirective - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.LineAfterPreprocessing - 64)) | (1 << (ParaCParser.LineDirective - 64)) | (1 << (ParaCParser.PragmaDirective - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)) | (1 << (ParaCParser.BlockComment - 64)) | (1 << (ParaCParser.LineComment - 64)))) != 0):
                self.state = 684
                self.gccAttribute()


            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 687
                self.match(ParaCParser.Comma)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Imaginary) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftBracket))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.ComplexDefine - 64)) | (1 << (ParaCParser.IncludeDirective - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.LineAfterPreprocessing - 64)) | (1 << (ParaCParser.LineDirective - 64)) | (1 << (ParaCParser.PragmaDirective - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)) | (1 << (ParaCParser.BlockComment - 64)) | (1 << (ParaCParser.LineComment - 64)))) != 0):
                    self.state = 688
                    self.gccAttribute()


                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = ParaCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.RightParen - 61)) | (1 << (ParaCParser.Comma - 61)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftParen:
                self.state = 697
                self.match(ParaCParser.LeftParen)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 698
                    self.argumentExpressionList()


                self.state = 701
                self.match(ParaCParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Imaginary) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen) | (1 << ParaCParser.LeftBracket))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Comma - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.ComplexDefine - 64)) | (1 << (ParaCParser.IncludeDirective - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.LineAfterPreprocessing - 64)) | (1 << (ParaCParser.LineDirective - 64)) | (1 << (ParaCParser.PragmaDirective - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)) | (1 << (ParaCParser.BlockComment - 64)) | (1 << (ParaCParser.LineComment - 64)))) != 0):
                self.state = 709
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__10, ParaCParser.T__11, ParaCParser.T__12, ParaCParser.T__13, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Generic, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.ComplexDefine, ParaCParser.IncludeDirective, ParaCParser.AsmBlock, ParaCParser.LineAfterPreprocessing, ParaCParser.LineDirective, ParaCParser.PragmaDirective, ParaCParser.Whitespace, ParaCParser.Newline, ParaCParser.BlockComment, ParaCParser.LineComment]:
                    self.state = 704
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [ParaCParser.LeftParen]:
                    self.state = 705
                    self.match(ParaCParser.LeftParen)
                    self.state = 706
                    self.nestedParenthesesBlock()
                    self.state = 707
                    self.match(ParaCParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 714
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 716
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        self.state = 715
                        self.typeQualifierList()



                else:
                    raise NoViableAltException(self)
                self.state = 720 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 722
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 725 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.parameterList()
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 728
                self.match(ParaCParser.Comma)
                self.state = 729
                self.match(ParaCParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.parameterDeclaration()
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 733
                    self.match(ParaCParser.Comma)
                    self.state = 734
                    self.parameterDeclaration() 
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.declarationSpecifiers()
                self.state = 741
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.declarationSpecifiers2()
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.LeftBracket - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)))) != 0):
                    self.state = 744
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(ParaCParser.Identifier)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 750
                self.match(ParaCParser.Comma)
                self.state = 751
                self.match(ParaCParser.Identifier)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.specifierQualifierList()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.LeftBracket - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)))) != 0):
                self.state = 758
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 761
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 762
                    self.pointer()


                self.state = 765
                self.directAbstractDeclarator(0)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.T__10 or _la==ParaCParser.T__11:
                    self.state = 766
                    self.gccDeclaratorExtension()
                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 775
                self.match(ParaCParser.LeftParen)
                self.state = 776
                self.abstractDeclarator()
                self.state = 777
                self.match(ParaCParser.RightParen)
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 778
                        self.gccDeclaratorExtension() 
                    self.state = 783
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 2:
                self.state = 784
                self.match(ParaCParser.LeftBracket)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 785
                    self.typeQualifierList()


                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 788
                    self.assignmentExpression()


                self.state = 791
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 792
                self.match(ParaCParser.LeftBracket)
                self.state = 793
                self.match(ParaCParser.Static)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 794
                    self.typeQualifierList()


                self.state = 797
                self.assignmentExpression()
                self.state = 798
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 800
                self.match(ParaCParser.LeftBracket)
                self.state = 801
                self.typeQualifierList()
                self.state = 802
                self.match(ParaCParser.Static)
                self.state = 803
                self.assignmentExpression()
                self.state = 804
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 806
                self.match(ParaCParser.LeftBracket)
                self.state = 807
                self.match(ParaCParser.Star)
                self.state = 808
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 809
                self.match(ParaCParser.LeftParen)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                    self.state = 810
                    self.parameterTypeList()


                self.state = 813
                self.match(ParaCParser.RightParen)
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 814
                        self.gccDeclaratorExtension() 
                    self.state = 819
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 863
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 822
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 823
                        self.match(ParaCParser.LeftBracket)
                        self.state = 825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 824
                            self.typeQualifierList()


                        self.state = 828
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                            self.state = 827
                            self.assignmentExpression()


                        self.state = 830
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 831
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 832
                        self.match(ParaCParser.LeftBracket)
                        self.state = 833
                        self.match(ParaCParser.Static)
                        self.state = 835
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 834
                            self.typeQualifierList()


                        self.state = 837
                        self.assignmentExpression()
                        self.state = 838
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 840
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 841
                        self.match(ParaCParser.LeftBracket)
                        self.state = 842
                        self.typeQualifierList()
                        self.state = 843
                        self.match(ParaCParser.Static)
                        self.state = 844
                        self.assignmentExpression()
                        self.state = 845
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 847
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 848
                        self.match(ParaCParser.LeftBracket)
                        self.state = 849
                        self.match(ParaCParser.Star)
                        self.state = 850
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 851
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 852
                        self.match(ParaCParser.LeftParen)
                        self.state = 854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                            self.state = 853
                            self.parameterTypeList()


                        self.state = 856
                        self.match(ParaCParser.RightParen)
                        self.state = 860
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 857
                                self.gccDeclaratorExtension() 
                            self.state = 862
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                        pass

             
                self.state = 867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Sizeof, ParaCParser.Alignof, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.match(ParaCParser.LeftBrace)
                self.state = 872
                self.initializerList()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 873
                    self.match(ParaCParser.Comma)


                self.state = 876
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 880
                self.designation()


            self.state = 883
            self.initializer()
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 884
                    self.match(ParaCParser.Comma)
                    self.state = 886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 885
                        self.designation()


                    self.state = 888
                    self.initializer() 
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.designatorList()
            self.state = 895
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 897
                self.designator()
                self.state = 900 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_designator)
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.match(ParaCParser.LeftBracket)
                self.state = 903
                self.constantExpression()
                self.state = 904
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(ParaCParser.Dot)
                self.state = 907
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(ParaCParser.StaticAssert)
            self.state = 911
            self.match(ParaCParser.LeftParen)
            self.state = 912
            self.constantExpression()
            self.state = 913
            self.match(ParaCParser.Comma)
            self.state = 915 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 914
                self.match(ParaCParser.StringLiteral)
                self.state = 917 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 919
            self.match(ParaCParser.RightParen)
            self.state = 920
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 924
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 925
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 926
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 927
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 928
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__10 or _la==ParaCParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 929
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__13 or _la==ParaCParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 930
                self.match(ParaCParser.LeftParen)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 931
                    self.logicalOrExpression()
                    self.state = 936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 932
                        self.match(ParaCParser.Comma)
                        self.state = 933
                        self.logicalOrExpression()
                        self.state = 938
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 941
                    self.match(ParaCParser.Colon)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                        self.state = 942
                        self.logicalOrExpression()
                        self.state = 947
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 943
                            self.match(ParaCParser.Comma)
                            self.state = 944
                            self.logicalOrExpression()
                            self.state = 949
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 957
                self.match(ParaCParser.RightParen)
                self.state = 958
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_labeledStatement)
        try:
            self.state = 972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.match(ParaCParser.Identifier)
                self.state = 962
                self.match(ParaCParser.Colon)
                self.state = 963
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.match(ParaCParser.Case)
                self.state = 965
                self.constantExpression()
                self.state = 966
                self.match(ParaCParser.Colon)
                self.state = 967
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 969
                self.match(ParaCParser.Default)
                self.state = 970
                self.match(ParaCParser.Colon)
                self.state = 971
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(ParaCParser.LeftBrace)
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                self.state = 975
                self.blockItemList()


            self.state = 978
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 980
                self.blockItem()
                self.state = 983 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Generic) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.LeftBrace - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Semi - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_blockItem)
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                self.state = 989
                self.expression()


            self.state = 992
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_selectionStatement)
        try:
            self.state = 1009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.match(ParaCParser.If)
                self.state = 995
                self.match(ParaCParser.LeftParen)
                self.state = 996
                self.expression()
                self.state = 997
                self.match(ParaCParser.RightParen)
                self.state = 998
                self.statement()
                self.state = 1001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 999
                    self.match(ParaCParser.Else)
                    self.state = 1000
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(ParaCParser.Switch)
                self.state = 1004
                self.match(ParaCParser.LeftParen)
                self.state = 1005
                self.expression()
                self.state = 1006
                self.match(ParaCParser.RightParen)
                self.state = 1007
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_iterationStatement)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.match(ParaCParser.While)
                self.state = 1012
                self.match(ParaCParser.LeftParen)
                self.state = 1013
                self.expression()
                self.state = 1014
                self.match(ParaCParser.RightParen)
                self.state = 1015
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.match(ParaCParser.Do)
                self.state = 1018
                self.statement()
                self.state = 1019
                self.match(ParaCParser.While)
                self.state = 1020
                self.match(ParaCParser.LeftParen)
                self.state = 1021
                self.expression()
                self.state = 1022
                self.match(ParaCParser.RightParen)
                self.state = 1023
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1025
                self.match(ParaCParser.For)
                self.state = 1026
                self.match(ParaCParser.LeftParen)
                self.state = 1027
                self.forCondition()
                self.state = 1028
                self.match(ParaCParser.RightParen)
                self.state = 1029
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Semi)
            else:
                return self.getToken(ParaCParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1033
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 1034
                    self.expression()


                pass


            self.state = 1039
            self.match(ParaCParser.Semi)
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                self.state = 1040
                self.forExpression()


            self.state = 1043
            self.match(ParaCParser.Semi)
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                self.state = 1044
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.declarationSpecifiers()
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (ParaCParser.LeftParen - 61)) | (1 << (ParaCParser.Star - 61)) | (1 << (ParaCParser.Caret - 61)) | (1 << (ParaCParser.Identifier - 61)))) != 0):
                self.state = 1048
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.assignmentExpression()
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1052
                self.match(ParaCParser.Comma)
                self.state = 1053
                self.assignmentExpression()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1059
                self.match(ParaCParser.Goto)
                self.state = 1060
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1061
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1062
                self.match(ParaCParser.Return)
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Generic) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ParaCParser.Plus - 73)) | (1 << (ParaCParser.PlusPlus - 73)) | (1 << (ParaCParser.Minus - 73)) | (1 << (ParaCParser.MinusMinus - 73)) | (1 << (ParaCParser.Star - 73)) | (1 << (ParaCParser.And - 73)) | (1 << (ParaCParser.AndAnd - 73)) | (1 << (ParaCParser.Not - 73)) | (1 << (ParaCParser.Tilde - 73)) | (1 << (ParaCParser.Identifier - 73)) | (1 << (ParaCParser.Constant - 73)) | (1 << (ParaCParser.DigitSequence - 73)) | (1 << (ParaCParser.StringLiteral - 73)))) != 0):
                    self.state = 1063
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1066
                self.match(ParaCParser.Goto)
                self.state = 1067
                self.unaryExpression()
                pass


            self.state = 1070
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Caret - 77)) | (1 << (ParaCParser.Semi - 77)) | (1 << (ParaCParser.Identifier - 77)))) != 0):
                self.state = 1072
                self.translationUnit()


            self.state = 1075
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1077
                self.externalDeclaration()
                self.state = 1080 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal) | (1 << ParaCParser.LeftParen))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ParaCParser.Star - 77)) | (1 << (ParaCParser.Caret - 77)) | (1 << (ParaCParser.Semi - 77)) | (1 << (ParaCParser.Identifier - 77)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)




    def externalDeclaration(self):

        localctx = ParaCParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_externalDeclaration)
        try:
            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1084
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1087
                self.declarationSpecifiers()


            self.state = 1090
            self.declarator()
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier:
                self.state = 1091
                self.declarationList()


            self.state = 1094
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1096
                self.declaration()
                self.state = 1099 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool) | (1 << ParaCParser.Complex) | (1 << ParaCParser.Noreturn) | (1 << ParaCParser.StaticAssert) | (1 << ParaCParser.ThreadLocal))) != 0) or _la==ParaCParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeSpecifier_sempred
        self._predicates[49] = self.directDeclarator_sempred
        self._predicates[63] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




